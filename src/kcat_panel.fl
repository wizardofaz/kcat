# data file for the Fltk User Interface Designer (fluid)
version 1.0110 
i18n_type 1 
i18n_include "gettext.h" 
i18n_function _ 
header_name {.h} 
code_name {.cpp}
decl {\#include "images.h"} {} 

decl {\#include "kcat.h"} {} 

decl {\#include "support.h"} {} 

decl {\#include "status.h"} {} 

Function {kcat_window()} {open
} {
  Fl_Window {} {
    label kcat open
    xywh {570 59 530 355} type Double color 51
    code0 {\#include <stdlib.h>} visible
  } {
    Fl_Menu_Bar {} {open
      xywh {2 2 350 22} labelsize 12 textsize 12
    } {
      Submenu {} {
        label {&Files} open
        xywh {10 10 100 20}
      } {
        MenuItem mnuOpen {
          label {&Open}
          callback {openFreqList();}
          tooltip {Open Freq/Mode pairs list} xywh {10 10 100 20}
        }
        MenuItem mnuSave {
          label {&Save}
          callback {saveFreqList();}
          tooltip {Save current Freq/Mode pairs list} xywh {10 10 100 20} divider
        }
        MenuItem mnuExit {
          label {E&xit}
          callback {cbExit();}
          xywh {10 10 100 20} divider
        }
      }
      Submenu mnuConfig {
        label {&Config} open
        xywh {10 10 100 20}
      } {
        MenuItem mnuTooltips {
          label Tooltips
          callback {xcvrState.tooltips=mnuTooltips->value();
Fl_Tooltip::enable(xcvrState.tooltips);}
          xywh {0 0 36 21} type Toggle divider
          code0 {\#include <FL/Fl_Tooltip.H>}
          code1 {xcvrState.tooltips ? o->set() :o->clear();}
        }
        MenuItem mnuAntPorts {
          label {Antenna Ports}
          callback {cbmnuAntPorts();}
          tooltip {Specify frequency / ant. port Pairs} xywh {0 0 100 20}
        }
        MenuItem mnuPreferences {
          label {&Display Colors}
          callback {setDisplayColors();}
          tooltip {Colors - Freq Disp; Smeter; Pout; SWR} xywh {15 15 100 20} divider
        }
        MenuItem mnuSelectPort {
          label {Serial Port}
          callback {setCommsPort();}
          tooltip {Select serial port} xywh {0 0 36 21} divider
        }
      }
      Submenu mnuUtils {
        label Utils open selected
        xywh {10 10 100 20}
      } {
        MenuItem mnuAntImp {
          label {&Ant Imped}
          xywh {0 0 100 20} hide
        }
        MenuItem mnuScanner {
          label Scanner
          callback {open_scanner();}
          xywh {0 0 36 21}
        }
        MenuItem mnuFreqCal {
          label {&FreqCal}
          callback {openFreqCalibDialog();}
          tooltip {Calibrate to extern standard} xywh {0 0 100 20} hide
          code0 {extern void openFreqCalibDialog();}
        }
        MenuItem mnuClearAntData {
          label {Clear Ant' Data}
          callback {cbClearAntData();}
          tooltip {Clear antenna port impedance data} xywh {0 0 100 20} divider
        }
        MenuItem mnuNRAMdata {
          label {&NRAM data}
          callback {cbNRAM();}
          tooltip {Fetch/Restore NRAM data} xywh {0 0 100 20} divider
        }
        MenuItem mnuEvents {
          label {Event log}
          callback {cbEventLog();}
          xywh {0 0 36 21}
        }
      }
      Submenu mnuHelp {
        label {&Help} open
        xywh {10 10 100 20}
      } {
        MenuItem mnuOnLineHelp {
          label {On-line help}
          callback {visit_URL((void *)("http://www.w1hkj.com/kcat-help/index.html"));}
          xywh {0 0 36 21} divider
        }
        MenuItem mnuAbout {
          label {&About}
          callback {about();}
          xywh {10 10 100 20}
        }
      }
    }
    Fl_Box FreqDisp {
      label 8
      xywh {2 25 170 40} box DOWN_BOX
      code0 {\#include "FreqControl.h"}
      code2 {o->SetONOFFCOLOR (FL_YELLOW, FL_BLACK);}
      code3 {o->setCallBack(movFreq);}
      class cFreqControl
    }
    Fl_Box FreqDispB {
      label 8
      xywh {180 25 170 40} box DOWN_BOX
      code2 {o->SetONOFFCOLOR (FL_YELLOW, FL_BLACK);}
      code3 {o->setCallBack(movFreqB);}
      class cFreqControl
    }
    Fl_Button btnRxA_TxA {
      label {A/A}
      callback {cbRxA_TxA();}
      tooltip {T/R on A} xywh {2 67 40 20} color 50
    }
    Fl_Button btnRxA_TxB {
      label {A/B}
      callback {cbRxA_TxB();}
      tooltip {Rx on A
Tx on B} xywh {45 67 40 20} color 50
    }
    Fl_Button btnA2B {
      label {@->}
      callback {cbA2B();}
      tooltip {Vfo A --> Vfo B} xywh {132 67 40 20}
    }
    Fl_Button btnB2A {
      label {@<-}
      callback {cbB2A();}
      tooltip {Vfo B --> Vfo A} xywh {180 67 40 20}
    }
    Fl_Button btnRxB_TxA {
      label {B/A}
      callback {cbRxB_TxA();}
      tooltip {Rx on B
Tx on A} xywh {266 67 40 20} color 50
    }
    Fl_Button btnRxB_TxB {
      label {B/B}
      callback {cbRxB_TxB();}
      tooltip {T/R on B} xywh {310 67 40 20} color 50
    }
    Fl_Browser FreqSelect {
      callback {if (FreqSelect->value())
selectFreq();}
      tooltip {Select operating frequency/mode} xywh {377 2 150 63} type Hold labelfont 4 labelsize 12 textfont 13 textsize 12
    }
    Fl_Button btnAddFreq {
      label {@|>}
      callback {addFreq();}
      tooltip {Add to list} xywh {355 2 20 20} box PLASTIC_UP_BOX labelsize 10
    }
    Fl_Button btnDelFreq {
      label {@1+}
      callback {delFreq();}
      tooltip {Delete from list} xywh {355 23 20 20} box PLASTIC_UP_BOX labelsize 10
    }
    Fl_Button btnClearList {
      label {@-1square}
      callback {clearList()}
      tooltip {Clear list} xywh {355 45 20 20} box PLASTIC_UP_BOX labelsize 10
    }
    Fl_Value_Slider sldrRIT {
      callback {cbRIT();}
      tooltip {RIT (-790 to 790 Hz)} xywh {2 88 348 20} type {Horz Knob} color 26 labeltype NO_LABEL align 8 minimum -790 maximum 790 step 10 textsize 14
      code0 {\#include "ValueSlider.h"}
      code1 {o->reverse(true);}
      class Fl_Wheel_Value_Slider
    }
    Fl_Value_Slider sldrVOLUME {
      label {Audio Volume}
      callback {setVolume();}
      tooltip {Audio output volume} xywh {2 109 348 20} type {Horz Knob} color 26 labeltype NO_LABEL align 20 value 0.2 textsize 14
      code0 {o->reverse(true);}
      class Fl_Wheel_Value_Slider
    }
    Fl_Value_Slider sldrIFSHIFT {
      callback {setIFshift();}
      tooltip {Set IF Shift Frequency} xywh {2 130 348 20} type {Horz Knob} color 26 labeltype NO_LABEL align 16 minimum -1280 maximum 1270 step 10 textsize 14
      code0 {o->reverse(true);}
      class Fl_Wheel_Value_Slider
    }
    Fl_Value_Slider sldrNOTCH {
      callback {setNotch();}
      tooltip {Set Notch Frequency} xywh {2 151 348 20} type {Horz Knob} color 26 labeltype NO_LABEL align 0 minimum 200 maximum 2750 step 10 textsize 14
      code0 {o->reverse(true);}
      class Fl_Wheel_Value_Slider
    }
    Fl_Value_Slider sldrDepth {
      callback {cbDepth();}
      tooltip {Set Notch Depth} xywh {2 152 340 18} type {Horz Knob} color 26 labeltype NO_LABEL align 0 maximum 100 step 1 value 50 textsize 14 hide
      code0 {o->reverse(true);}
      class Fl_Wheel_Value_Slider
    }
    Fl_Value_Slider sldrNR {
      callback {cbNR();}
      tooltip {Noise Reduction (min -> max)} xywh {2 173 348 20} type {Horz Knob} color 26 labeltype NO_LABEL align 8 maximum 255 step 1 textsize 14
      code0 {o->reverse(true);}
      class Fl_Wheel_Value_Slider
    }
    Fl_Choice opMODE {
      callback {setMode();} open
      tooltip {Select Mode} xywh {2 194 85 20} down_box BORDER_BOX
    } {}
    Fl_Choice opBW {
      callback {setBW();} open
      tooltip {Select Bandwidth} xywh {98 194 85 20} down_box BORDER_BOX
    } {}
    Fl_Choice opNOTCH {
      callback {setNotchWidth();} open
      tooltip {Select Notch Depth} xywh {194 194 85 20} down_box BORDER_BOX
    } {}
    Fl_Value_Slider sldrMICGAIN {
      label Mic
      callback {setMicGain();}
      tooltip {Mic / Gain control} xywh {2 215 348 20} type {Horz Knob} color 26 align 8 textsize 14
      code0 {o->reverse(true);}
      class Fl_Wheel_Value_Slider
    }
    Fl_Value_Slider sldrPOWER {
      label Pwr
      callback {setPower();}
      tooltip {Set Power Output} xywh {2 236 348 20} type {Horz Knob} color 26 align 8 maximum 100 step 1 value 20 textsize 14
      code0 {o->reverse(true);}
      class Fl_Wheel_Value_Slider
    }
    Fl_Light_Button btnRIT {
      label RIT
      callback {cbbtnRIT();}
      tooltip {RIT on/off} xywh {352 88 54 20}
    }
    Fl_Light_Button btnVol {
      label Spkr
      callback {cbVol();}
      tooltip {Speaker on/off} xywh {352 109 54 20} value 1
    }
    Fl_Light_Button btnIFsh {
      label IFsh
      callback {cbIFsh();}
      tooltip {IF Shift On/Off} xywh {352 130 54 20}
    }
    Fl_Light_Button btnNotch {
      label Ntch
      callback {cbbtnNotch();}
      tooltip {Notch - Manual (off) Auto (on)} xywh {352 151 54 20}
    }
    Fl_Light_Button btnNR {
      label NR
      callback {cbbtnNR();}
      tooltip {NR on/off} xywh {352 173 54 20}
    }
    Fl_Light_Button btnAttenuator {
      label Att
      callback {cbAttenuator();}
      tooltip {Attenuator On/Off} xywh {290 194 60 20}
    }
    Fl_Light_Button btnPreamp {
      label Pre
      callback {cbPreamp();}
      tooltip {Preamp On/Off} xywh {352 194 54 20}
    }
    Fl_Group {} {open
      xywh {407 67 122 212} box THIN_DOWN_BOX
    } {
      Fl_Group grpMeters {open
        xywh {408 68 120 210} box FLAT_BOX color 32 selection_color 52 align 20
      } {
        Fl_Button btnSmeter {
          callback {cbSmeter();}
          tooltip {Click - change scale} xywh {409 73 30 200} box FLAT_BOX down_box FLAT_BOX color 48 selection_color 48 align 16
          code0 {o->image(image_smeter);}
        }
        Fl_Box sldrRcvSignal {
          xywh {441 82 8 182} box FLAT_BOX color 10 selection_color 2
          code0 {\#include "Fl_SigBar.h"}
          code1 {o->minimum(0.0f);}
          code2 {o->maximum(-128.0f);}
          code3 {o->horizontal(false);}
          class Fl_SigBar
        }
        Fl_Button btnPower {
          callback {cbPWR();}
          tooltip {Click - FWD / ALC} xywh {452 73 25 200} box FLAT_BOX down_box FLAT_BOX color 48 selection_color 48 align 16
          code0 {o->image(image_p150);}
        }
        Fl_Box sldrFwdPwr {
          xywh {479 82 8 182} box FLAT_BOX color 14 selection_color 6
          code0 {\#include "Fl_SigBar.h"}
          code1 {o->minimum(120.0f);}
          code2 {o->maximum(0.0f);}
          code3 {o->horizontal(false);}
          class Fl_SigBar
        }
        Fl_Box boxSWR {
          xywh {490 73 25 200} box FLAT_BOX color 50 align 16
          code0 {o->image(image_swr);}
        }
        Fl_Box sldrRefPwr {
          xywh {516 82 8 182} box FLAT_BOX color 9 selection_color 1
          code0 {\#include "Fl_SigBar.h"}
          code1 {o->minimum(50.0f);}
          code2 {o->maximum(0.0f);}
          code3 {o->horizontal(false);}
          class Fl_SigBar
        }
        Fl_Box boxSquelch {
          xywh {441 71 9 9} box FLAT_BOX color 175 align 16
        }
      }
    }
    Fl_Button btn_show_controls {
      label {@-22->}
      callback {show_controls();}
      tooltip {Show/Hide controls} xywh {2 258 18 20}
    }
    Fl_Light_Button btnPTT {
      label PTT
      callback {cbPTT();}
      tooltip {Xmt On/Off} xywh {24 258 64 20}
    }
    Fl_Light_Button btnTune {
      label Tune
      callback {cbTune();}
      tooltip {Auto-tune Antenna} xywh {93 258 64 20} type Normal
    }
    Fl_Light_Button btnCarrier {
      label Carr
      callback {cbCarrier();}
      tooltip {Constant Carrier} xywh {161 258 64 20}
    }
    Fl_Choice antSelect {
      callback {cbAntSel();} open
      xywh {230 258 120 20} down_box BORDER_BOX
      code0 {o->add("Ant: table|Ant: A-A|Ant: A-B|Ant: B-A|Ant: B-B");}
      code1 {o->value(0);}
    } {}
    Fl_Output txtTEMP {
      label C
      callback {cbTemp();}
      tooltip {Click C / F} xywh {352 258 40 20} color 0 selection_color 7 labelfont 13 align 8 textfont 13 textcolor 62
    }
    Fl_Tabs tabs {open
      xywh {1 282 526 70} selection_color 50
    } {
      Fl_Group CWtab {
        label CW open
        xywh {1 302 526 50} color 50 selection_color 50
      } {
        Fl_Light_Button btnSPOT {
          label Spot
          callback {cbSPOT();}
          xywh {2 310 55 22}
        }
        Fl_Counter cntrWPM {
          label Wpm
          callback {cbWPM();}
          xywh {59 310 90 22} minimum 5 maximum 80 step 1 value 18
          code0 {o->lstep(5);}
        }
        Fl_Value_Slider sldrCWweight {
          label {         Lite        Hvy}
          callback {cbCWweight();}
          xywh {152 310 120 22} type {Horz Knob} color 26 align 6 maximum 255 step 1 value 128 textsize 14
          class Fl_Wheel_Value_Slider
        }
        Fl_Value_Slider sldrCWattack {
          label {         Soft     Hard}
          callback {cbCWattack();}
          xywh {274 310 120 22} type {Horz Knob} color 26 align 6 maximum 255 step 1 value 128 textsize 14
          class Fl_Wheel_Value_Slider
        }
        Fl_Choice mnuCWmode {
          label Mode
          callback {cbCWmode();} open
          xywh {397 310 75 22} down_box BORDER_BOX align 2
          code0 {o->add("Left|Right|Str't");}
          code1 {o->value(1);}
        } {}
        Fl_Check_Button btnQSKonoff {
          label QSK
          callback {cbQSKonoff();}
          tooltip {Enable keyer} xywh {475 312 50 18} down_box DOWN_BOX
        }
      }
      Fl_Group CW2tab {
        label {CW -xtra} open
        xywh {2 302 525 50} color 50 selection_color 50 hide
      } {
        Fl_Counter sldrSideTone {
          label {S-T/Spch-Mon Level}
          callback {cbSidetone();}
          tooltip {Side tone volume} xywh {40 310 100 22} minimum 0 maximum 100 step 1 value 24
          code0 {o->lstep(10);}
        }
        Fl_Choice mnuCWoffset {
          label Offset
          callback {cbCWoffset();} open
          xywh {217 310 100 22} down_box BORDER_BOX align 2
          code0 {o->add("300|400|500|600|700|800");}
          code1 {o->value(4);}
        } {}
        Fl_Choice mnuCWdefFilter {
          label {Def' Filt'}
          callback {cbCWdefFilter();} open
          xywh {395 310 100 22} down_box BORDER_BOX align 2
          code0 {o->add("Wide|Narrow");}
          code1 {o->value(1);}
        } {}
      }
      Fl_Group VOXtab {
        label Vox open
        xywh {2 302 525 50} hide
      } {
        Fl_Counter sldrVoxLevel {
          label gain
          callback {cbsldrVoxLevel();}
          xywh {25 310 100 22} minimum 0 maximum 255 step 1
          code0 {o->lstep(10);}
        }
        Fl_Counter sldrAntiVox {
          label anti
          callback {cbsldrAntiVox();}
          xywh {160 310 100 22} minimum 0 maximum 255 step 1
          code0 {o->lstep(10);}
        }
        Fl_Counter sldrVoxDelay {
          label delay
          callback {cbsldrVoxDelay();}
          xywh {295 310 100 22} minimum 0 maximum 100 step 1
          code0 {o->lstep(10);}
        }
        Fl_Light_Button btnVoxOnOff {
          label VOX
          callback {cbVoxOnOff();}
          xywh {431 310 70 22}
        }
      }
      Fl_Group SPCHtab {
        label Speech open
        xywh {2 302 525 50} hide
      } {
        Fl_Light_Button btnSpchMon {
          label {Mon'}
          callback {cbSpchMon();}
          tooltip {Monitor both mic and aux input} xywh {106 310 70 22}
        }
        Fl_Counter sldrCompression {
          label Comp
          callback {cbsldrCompression();}
          xywh {214 310 100 22} minimum 0 maximum 255 step 1
          code0 {o->lstep(10);}
        }
        Fl_Light_Button btnSpchProc {
          label {Proc'}
          callback {cbbtnSpchProc();}
          xywh {353 310 70 22}
        }
      }
      Fl_Group RXtab {
        label RX open
        xywh {2 302 525 50} hide
      } {
        Fl_Counter sldrSqlLevel {
          label {SQL dbm}
          callback {cbSqlLevel();}
          xywh {18 309 100 22} minimum -127 maximum 0 step 1 value -127
          code0 {o->lstep(10);}
        }
        Fl_Round_Button {btnSQLtype[0]} {
          label Level
          callback {btnSQLtype[1]->value(0);
cbSQLtype();}
          xywh {159 308 70 21} down_box ROUND_DOWN_BOX value 1
        }
        Fl_Counter sldrAgcAction {
          label {AGC action}
          callback {cbsldrAgcAction();}
          xywh {270 309 100 22} minimum 0 maximum 255 step 1
          code0 {o->lstep(10);}
        }
        Fl_Counter sldrAgcSpeed {
          label {AGC speed}
          callback {cbsldrAgcSpeed();}
          xywh {412 309 100 22} minimum 0 maximum 255 step 1 value 127
          code0 {o->lstep(10);}
        }
        Fl_Round_Button {btnSQLtype[1]} {
          label Syllabic
          callback {btnSQLtype[0]->value(0);
cbSQLtype();}
          xywh {159 329 70 21} down_box ROUND_DOWN_BOX
        }
      }
      Fl_Group TXtab {
        label TX open
        xywh {2 302 525 50} hide
      } {
        Fl_Check_Button btnAmpOnOff {
          label {Amp on/off}
          callback {cbbtnAmpOnOff();}
          xywh {137 313 107 15} down_box DOWN_BOX
        }
        Fl_Check_Button tuner_bypass {
          label Tuner
          tooltip {Check to bypass tuner} xywh {164 311 70 15} down_box DOWN_BOX hide
        }
        Fl_Counter sldrXmtEqualizer {
          label Equilization
          callback {cbsldrXmtEqualizer();}
          xywh {273 307 100 22} minimum -127 maximum 127 step 1
          code0 {o->lstep(10);}
        }
      }
      Fl_Group OSCtab {
        label {Osc'} open
        xywh {2 302 525 50} hide
      } {
        Fl_Counter ctr_vfo_adj {
          label {DDS adjust (ppm)}
          callback {xcvrState.VFOADJ=o->value();
movFreq();
movFreqB();}
          xywh {80 312 120 22} align 34
          code0 {o->lstep(1);}
          code1 {o->value(xcvrState.VFOADJ);}
        }
        Fl_Counter ctr_vfo_offset {
          label {DDS offset}
          callback {xcvrState.VFO_OFFSET = o->value();
movFreq();
movFreqB();}
          xywh {325 311 120 22} align 34 step 1
          code0 {o->lstep(10);}
          code1 {o->value(xcvrState.VFO_OFFSET);}
        }
      }
    }
  }
} 

Function {CommsDialog()} {} {
  Fl_Window {} {
    label Select open
    xywh {106 753 323 104} type Double box UP_BOX hide modal
  } {
    Fl_Choice selectCommPort {
      label {Port:} open
      xywh {34 60 175 21} down_box BORDER_BOX align 5
    } {}
    Fl_Return_Button btnOkCommsDialog {
      label OK
      callback {cbOkCommsDialog();}
      xywh {218 60 68 21}
    }
    Fl_Box {} {
      label {Select the KC505 serial port
Use TEST for a testdrive}
      xywh {5 3 312 41}
    }
  }
} 

Function {FreqRangesDialog()} {} {
  Fl_Window {} {
    label {Antenna Port Setup} open
    xywh {637 596 260 170} type Double hide modal
  } {
    Fl_Input txtFreqRange {
      tooltip {Enter Start Freq in KHz} xywh {4 25 75 25} type Int align 5 textfont 13
    }
    Fl_Button btnRcvAnt {
      label A
      callback {if (btnRcvAnt->value() == 1) btnRcvAnt->label("B");
else btnRcvAnt->label("A");}
      xywh {82 25 30 25} type Toggle down_box UP_BOX labelfont 1
    }
    Fl_Button btnXmtAnt {
      label A
      callback {if (btnXmtAnt->value() == 1) btnXmtAnt->label("B");
else btnXmtAnt->label("A");}
      xywh {112 25 30 25} type Toggle down_box UP_BOX labelfont 1
    }
    Fl_Box {} {
      label Rcv
      xywh {79 5 30 20}
    }
    Fl_Box {} {
      label Xmt
      xywh {110 5 30 20}
    }
    Fl_Browser brwsAntRanges {
      callback {cbbrwsAntRanges();}
      xywh {147 5 108 160} type Hold labelfont 4 textfont 13
    }
    Fl_Button btnAddAntRange {
      label {Add @>|}
      callback {cbAddAntRange();}
      xywh {70 55 72 25} align 24
    }
    Fl_Button btnDeleteAntRange {
      label {Delete @\#2|>}
      callback {cbDeleteAntRange();}
      xywh {70 83 72 25} align 24
    }
    Fl_Return_Button btnAntRangeDialogOK {
      label OK
      callback {cbAntRangeDialogOK();}
      xywh {10 135 85 25}
    }
    Fl_Box {} {
      label {Freq kHz}
      xywh {1 5 75 20}
    }
  }
} 

Function {NRAMdataDialog()} {} {
  Fl_Window {} {
    label {NRAM critical data} open
    xywh {466 408 400 230} type Double hide
  } {
    Fl_Text_Display txtDataDisp {
      xywh {1 3 395 170}
    }
    Fl_Return_Button btnNRAMok {
      label OK
      callback {cbNRAMok();}
      xywh {319 201 75 25}
    }
    Fl_Button btnAntImpData {
      label AntIMp
      callback {cbNRAMAntImp();}
      xywh {0 176 60 25}
    }
    Fl_Button btnSmeterData {
      label Smeter
      callback {cbNRAMsmeter();}
      xywh {60 176 60 25}
    }
    Fl_Button btnFreqRefData {
      label FreqRef
      callback {cbNRAMFreqRef();}
      xywh {120 176 60 25}
    }
    Fl_Button btnPhaseDet {
      label Phase
      callback {cbNRAMPhase();}
      xywh {0 201 60 25}
    }
    Fl_Button btnCarrierData {
      label Carrier
      callback {cbNRAMCarrier();}
      xywh {60 201 60 25}
    }
    Fl_Button btnAllData {
      label All
      callback {cbNRAMAll();}
      xywh {120 201 60 25}
    }
    Fl_Button btnSaveData {
      label Save
      callback {cbNRAMSave();}
      tooltip {Save to file: NRAMdata.txt} xywh {188 201 60 25}
    }
    Fl_Button btnRestoreData {
      label Restore
      callback {cbNRAMRestore();}
      xywh {254 200 60 25} hide
    }
    Fl_Button btnClearData {
      label {Clr Txt}
      callback {cbNRAMClearText();}
      xywh {188 175 60 25}
    }
  }
} 

Function {FreqCalibDialog()} {open
} {
  Fl_Window {} {
    label {Calibrate to Freq Std} open
    xywh {321 504 285 62} type Double hide
  } {
    Fl_Counter cntrFreqStd {
      label {Freq. Std.}
      xywh {15 15 80 20} minimum 5 maximum 15 value 10
    }
    Fl_Button btnCalibrate {
      label Calibrate
      callback {cbCalibrate();}
      xywh {120 15 64 20}
      code0 {extern void cbCalibrate();}
    }
    Fl_Button btnCalFinished {
      label Finished
      callback {cbCalFinished()}
      xywh {205 15 64 20}
      code0 {extern void cbCalFinished();}
    }
  }
} 

Function {DisplayDialog()} {} {
  Fl_Window {} {
    label {kcat colors / scheme} open
    xywh {771 521 424 295} type Double hide
  } {
    Fl_Group {} {open
      xywh {2 2 218 70} box ENGRAVED_FRAME
    } {
      Fl_Group {} {open
        xywh {5 6 210 35} box DOWN_BOX
      } {
        Fl_Box lblTest {
          label {14070.000}
          xywh {7 8 206 31} box FLAT_BOX labelfont 4 labelsize 32
        }
      }
      Fl_Button prefFont {
        label Font
        callback {cbPrefFont();}
        xywh {10 46 60 22}
      }
      Fl_Button prefForeground {
        label Color
        callback {cbPrefForeground();}
        xywh {78 46 60 22}
      }
      Fl_Button btnBacklight {
        label Back
        callback {cbBacklightColor();}
        xywh {146 46 60 22}
      }
    }
    Fl_Group {} {open
      xywh {2 74 218 218} box ENGRAVED_BOX
    } {
      Fl_Button btnSmeterColor {
        label Smeter
        callback {cbSMeterColor();}
        xywh {154 88 60 22}
      }
      Fl_Button btnSWRcolor {
        label SWR
        callback {cbSWRMeterColor();}
        xywh {154 144 60 22}
      }
      Fl_Button btnPowercolor {
        label Pwr
        callback {cbPwrMeterColor();}
        xywh {154 200 60 22}
      }
      Fl_Button btnPeakColor {
        label Peak
        callback {cbPeakMeterColor();}
        xywh {154 256 60 22}
      }
      Fl_Group {} {open
        xywh {3 77 149 212} box DOWN_BOX
      } {
        Fl_Group grpMeter1disp {open
          xywh {4 78 65 210} box FLAT_BOX color 0 selection_color 52 align 20
        } {
          Fl_Button btnSmeterdisp {
            tooltip {Click - change scale} xywh {9 83 40 200} box FLAT_BOX down_box FLAT_BOX color 2 selection_color 2 align 16
            code0 {o->image(image_smeter);}
          }
          Fl_Box sldrRcvSignaldisp {
            xywh {51 92 10 182} box FLAT_BOX color 10 selection_color 2
            code0 {\#include "Fl_SigBar.h"}
            code1 {o->minimum(0.0f);}
            code2 {o->maximum(-128.0f);}
            code3 {o->horizontal(false);}
            class Fl_SigBar
          }
          Fl_Box boxSquelchdisp {
            xywh {51 81 9 9} box OVAL_BOX color 6 selection_color 0
          }
        }
        Fl_Group grpMeter2disp {open
          xywh {69 78 80 210} box FLAT_BOX color 0 selection_color 52 align 20
        } {
          Fl_Button btnPowerdisp {
            tooltip {Click - FWD / ALC} xywh {71 83 25 200} box FLAT_BOX down_box FLAT_BOX color 175 selection_color 175 align 16
            code0 {o->image(image_p150);}
          }
          Fl_Box sldrFwdPwrdisp {
            xywh {98 92 10 182} box FLAT_BOX color 14 selection_color 6
            code0 {\#include "Fl_SigBar.h"}
            code1 {o->minimum(120.0f);}
            code2 {o->maximum(0.0f);}
            code3 {o->horizontal(false);}
            class Fl_SigBar
          }
          Fl_Button btnSWRdisp {
            tooltip {Click REF / SWR} xywh {122 83 25 200} box FLAT_BOX down_box FLAT_BOX color 1 selection_color 1 align 16
            code0 {o->image(image_swr);}
          }
          Fl_Box sldrRefPwrdisp {
            xywh {110 92 10 182} box FLAT_BOX color 9 selection_color 1
            code0 {\#include "Fl_SigBar.h"}
            code1 {o->minimum(50.0f);}
            code2 {o->maximum(0.0f);}
            code3 {o->horizontal(false);}
            class Fl_SigBar
          }
        }
      }
    }
    Fl_Group {} {
      label System open
      xywh {220 2 202 70} box ENGRAVED_FRAME align 21
    } {
      Fl_Choice mnuScheme {
        label UI
        callback {xcvrState.ui_scheme = o->text();
Fl::scheme(xcvrState.ui_scheme.c_str());} open
        tooltip {Change application look and feel} xywh {227 22 80 22} down_box BORDER_BOX align 8
        code0 {mnuScheme->add("base");}
        code1 {mnuScheme->add("gtk+");}
        code2 {mnuScheme->add("plastic");}
        code3 {mnuScheme->value(mnuScheme->find_item(xcvrState.ui_scheme.c_str()));}
      } {}
      Fl_Button pref_sys_foreground {
        label Fgnd
        callback {cb_sys_foreground();}
        tooltip {Label color} xywh {227 46 60 22}
      }
      Fl_Button pref_sys_background {
        label Bngd
        callback {cb_sys_background();}
        tooltip {Background - normal} xywh {291 46 60 22}
      }
      Fl_Button prefsys_background2 {
        label Bgnd2
        callback {cb_sys_background2();}
        tooltip {Background - selected} xywh {356 46 60 22}
      }
      Fl_Button prefsys_defaults {
        label Default
        callback {cb_sys_defaults();}
        tooltip {Background - selected} xywh {356 21 60 22}
      }
    }
    Fl_Group {} {open
      xywh {220 122 202 88} box ENGRAVED_FRAME
    } {
      Fl_Value_Slider sldrColors {
        tooltip {Adjust power level} xywh {226 128 188 20} type {Horz Knob} box THIN_DOWN_BOX align 0 maximum 100 step 1 value 15 textsize 12
        code0 {o->reverse(true);}
        class Fl_Wheel_Value_Slider
      }
      Fl_Button pref_slider_background {
        label Bngd
        callback {cb_slider_background();}
        tooltip {Background - normal} xywh {226 154 90 22}
      }
      Fl_Button pref_slider_select {
        label Button
        callback {cb_slider_select();}
        tooltip {Background - normal} xywh {324 154 90 22}
      }
      Fl_Button prefslider_defaults {
        label Default
        callback {cb_slider_defaults();}
        tooltip {Background - selected} xywh {276 183 90 22}
      }
    }
    Fl_Button btnReset {
      label Reset
      callback {cb_reset_display_dialog();}
      tooltip {Restore all flrig defaults} xywh {232 223 60 22}
    }
    Fl_Button btnCancel {
      label Cancel
      callback {cbCancelDisplayDialog();}
      tooltip {Discard current changes} xywh {234 259 60 22}
    }
    Fl_Return_Button btnOkDisplayDialog {
      label OK
      callback {cbOkDisplayDialog();}
      tooltip {Save Current Changes} xywh {347 260 60 22}
    }
    Fl_Group {} {open
      xywh {220 74 202 45} box ENGRAVED_FRAME
    } {
      Fl_Light_Button btn_lighted {
        label {Lt Btn}
        callback {cb_lighted_button();}
        xywh {226 85 90 22}
      }
      Fl_Button btn_lighted_default {
        label Default
        callback {cb_lighted_default();}
        tooltip {Background - selected} xywh {324 85 90 22}
      }
    }
  }
} 

Function {scanner_window()} {open
} {
  Fl_Window {} {
    label {kcat scanner} open
    xywh {568 443 530 174} type Double resizable visible
  } {
    Fl_Box spectrum_plot {
      label {spectrum plot}
      xywh {128 2 400 170} box DOWN_BOX color 15 selection_color 7 labelcolor 7 resizable
      code0 {\#include "XYplot.h"}
      class XYplot
    }
    Fl_Group {} {open
      xywh {2 2 124 170}
    } {
      Fl_Box startFreqDisp {
        label {6.1}
        xywh {3 2 120 36} box DOWN_BOX
        code2 {o->SetONOFFCOLOR (FL_YELLOW, FL_BLACK);}
        code3 {o->setCallBack(startFreq);}
        class cFreqControl
      }
      Fl_Choice scan_range {
        label Rng
        callback {set_freq_range();} open
        xywh {3 47 90 20} down_box BORDER_BOX align 8
        code0 {o->add("2500|5000|10000|25000|50000|100000");}
        code1 {o->value(0);}
      } {}
      Fl_Button btn_start_scan {
        label Start
        callback {start_scan();}
        xywh {3 76 55 20}
      }
      Fl_Button btn_stop_scan {
        label Stop
        callback {stop_scan();}
        xywh {68 76 55 20}
      }
      Fl_Button btn_start_continuous {
        label Continuous
        callback {start_continuous_scan();}
        xywh {12 101 103 20}
      }
      Fl_Choice db_max {
        label dbMax
        callback {db_max_cb();} open
        xywh {3 123 70 20} down_box BORDER_BOX align 8
        code0 {o->add("0|-10|-20|-30|-40|-50");}
        code1 {o->value(0);}
      } {}
      Fl_Choice db_min {
        label dbMin
        callback {db_min_cb();} open
        xywh {3 146 70 20} down_box BORDER_BOX align 8
        code0 {o->add("-60|-70|-80|-90|-100|-110|-120|-130");}
        code1 {o->value(5);}
      } {}
      Fl_Box {} {
        xywh {2 168 122 0} align 16 resizable
      }
    }
  }
} 
