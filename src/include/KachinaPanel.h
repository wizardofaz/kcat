// generated by Fast Light User Interface Designer (fluid) version 1.0110

#ifndef KachinaPanel_h
#define KachinaPanel_h
#include <FL/Fl.H>
#include <FL/Fl_Double_Window.H>
#include <stdlib.h>
#include <FL/Fl_Menu_Bar.H>
extern void openFreqCalibDialog();
#include "FreqControl.h"
extern cFreqControl *FreqDisp;
#include <FL/Fl_Button.H>
extern Fl_Button *btnAddFreq;
extern Fl_Button *btnDelFreq;
extern Fl_Button *btnClearList;
#include <FL/Fl_Browser.H>
extern Fl_Browser *FreqSelect;
extern Fl_Button *btnABactive;
extern Fl_Button *btnA2B;
#include <FL/Fl_Light_Button.H>
extern Fl_Light_Button *btnSplit;
#include <FL/Fl_Output.H>
extern Fl_Output *txtInactive;
#include <FL/Fl_Value_Slider.H>
extern Fl_Value_Slider *sldrRIT;
extern Fl_Value_Slider *sldrVOLUME;
extern Fl_Value_Slider *sldrIFSHIFT;
extern Fl_Value_Slider *sldrNOTCH;
extern Fl_Value_Slider *sldrDepth;
extern Fl_Value_Slider *sldrNR;
extern Fl_Value_Slider *sldrMICGAIN;
extern Fl_Value_Slider *sldrPOWER;
#include <FL/Fl_Choice.H>
extern Fl_Choice *opMODE;
extern Fl_Choice *opBW;
extern Fl_Choice *opNOTCH;
extern Fl_Light_Button *btnRIT;
extern Fl_Light_Button *btnMute;
extern Fl_Light_Button *btnIFsh;
extern Fl_Light_Button *btnNotch;
extern Fl_Light_Button *btnNR;
extern Fl_Light_Button *btnAttenuator;
extern Fl_Light_Button *btnPreamp;
extern Fl_Light_Button *btnPTT;
extern Fl_Light_Button *btnTune;
extern Fl_Light_Button *btnCarrier;
#include <FL/Fl_Counter.H>
extern Fl_Counter *cntrWPM;
extern Fl_Output *txtTEMP;
#include <FL/Fl_Group.H>
extern Fl_Button *btnSmeter;
#include "Fl_SigBar.h"
extern Fl_SigBar *sldrRcvSignal;
#include <FL/Fl_Slider.H>
extern Fl_Slider *sldrSQdisp;
#include <FL/Fl_Box.H>
extern Fl_Box *boxSquelch;
extern Fl_Button *btnPower;
extern Fl_SigBar *sldrFwdPwr;
extern Fl_Button *btnSWR;
extern Fl_SigBar *sldrRefPwr;
extern Fl_Button *btnRxAnt;
extern Fl_Button *btnTxAnt;
#include <FL/Fl_Check_Button.H>
extern Fl_Check_Button *btnSelAnt;
Fl_Double_Window* Kachina_window();
extern Fl_Menu_Item menu_[];
#define mnuOpen (menu_+1)
#define mnuSave (menu_+2)
#define mnuExit (menu_+3)
#define mnuViewLog (menu_+4)
#define mnuConfig (menu_+6)
#define mnuRcvParams (menu_+7)
#define mnuXmtParams (menu_+8)
#define mnuPreferences (menu_+9)
#define mnuCWparams (menu_+10)
#define mnuAntPorts (menu_+11)
#define mnuUtils (menu_+13)
#define mnuAntImp (menu_+14)
#define mnuFreqCal (menu_+15)
#define mnuClearAntData (menu_+16)
#define mnuNRAMdata (menu_+17)
#define mnuHelp (menu_+21)
#define mnuAbout (menu_+22)
extern Fl_Slider *sldrAgcAction;
extern Fl_Slider *sldrAgcSpeed;
extern Fl_Value_Slider *sldrSqlLevel;
#include <FL/Fl_Return_Button.H>
extern Fl_Return_Button *btnRcvParamOK;
#include <FL/Fl_Round_Button.H>
extern Fl_Round_Button *btnSQLtype[2];
Fl_Double_Window* RcvParamDialog();
extern Fl_Slider *sldrCompression;
extern Fl_Check_Button *btnSpchProc;
extern Fl_Check_Button *btnSpchMon;
extern Fl_Slider *sldrSideTone;
extern Fl_Slider *sldrVoxLevel;
extern Fl_Slider *sldrAntiVox;
extern Fl_Slider *sldrVoxDelay;
extern Fl_Check_Button *btnAmpOnOff;
extern Fl_Slider *sldrXmtEqualizer;
extern Fl_Return_Button *btnXmtParamOK;
extern Fl_Light_Button *btnVoxOnOff;
extern Fl_Counter *cntTxOffset;
Fl_Double_Window* XmtParamDialog();
extern Fl_Return_Button *btnOkCommsDialog;
extern Fl_Choice *selectCommPort;
Fl_Double_Window* CommsDialog();
extern Fl_Box *lblTest;
extern Fl_Button *prefForeground;
extern Fl_Button *prefSelectColor;
extern Fl_Button *prefBackground;
extern Fl_Box *lblSelect;
extern Fl_Return_Button *btnOkDisplayDialog;
extern Fl_Button *btnSmeterColor;
extern Fl_Button *btnPowercolor;
extern Fl_Button *btnSWRcolor;
Fl_Double_Window* DisplayDialog();
extern Fl_Slider *sldrCWattack;
extern Fl_Slider *sldrCWweight;
extern Fl_Choice *mnuCWmode;
extern Fl_Choice *mnuCWdefFilter;
extern Fl_Choice *mnuCWoffset;
extern Fl_Check_Button *btnQSKonoff;
extern Fl_Check_Button *btnCWspot;
extern Fl_Return_Button *btnCwParamOK;
Fl_Double_Window* CwParamDialog();
#include <FL/Fl_Input.H>
extern Fl_Input *txtFreqRange;
extern Fl_Button *btnRcvAnt;
extern Fl_Button *btnXmtAnt;
extern Fl_Browser *brwsAntRanges;
extern Fl_Button *btnAddAntRange;
extern Fl_Button *btnDeleteAntRange;
extern Fl_Return_Button *btnAntRangeDialogOK;
Fl_Double_Window* FreqRangesDialog();
#include <FL/Fl_Text_Display.H>
extern Fl_Text_Display *txtViewLog;
Fl_Double_Window* ViewLogDialog();
extern Fl_Text_Display *txtDataDisp;
extern Fl_Return_Button *btnNRAMok;
extern Fl_Button *btnAntImpData;
extern Fl_Button *btnSmeterData;
extern Fl_Button *btnFreqRefData;
extern Fl_Button *btnPhaseDet;
extern Fl_Button *btnCarrierData;
extern Fl_Button *btnAllData;
extern Fl_Button *btnSaveData;
extern Fl_Button *btnRestoreData;
extern Fl_Button *btnClearData;
Fl_Double_Window* NRAMdataDialog();
extern Fl_Counter *cntrFreqStd;
extern void cbCalibrate();
extern Fl_Button *btnCalibrate;
extern void cbCalFinished();
extern Fl_Button *btnCalFinished;
Fl_Double_Window* FreqCalibDialog();
#endif
