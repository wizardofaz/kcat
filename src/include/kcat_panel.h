// generated by Fast Light User Interface Designer (fluid) version 1.0309

#ifndef kcat_panel_h
#define kcat_panel_h
#include <FL/Fl.H>
#include <FL/Fl_Double_Window.H>
#include <stdlib.h>
#include <FL/Fl_Menu_Bar.H>
#include <FL/Fl_Tooltip.H>
extern void openFreqCalibDialog();
#include "FreqControl.h"
extern cFreqControl *FreqDisp;
extern cFreqControl *FreqDispB;
#include <FL/Fl_Button.H>
extern Fl_Button *btnRxA_TxA;
extern Fl_Button *btnRxA_TxB;
extern Fl_Button *btnA2B;
extern Fl_Button *btnB2A;
extern Fl_Button *btnRxB_TxA;
extern Fl_Button *btnRxB_TxB;
#include <FL/Fl_Browser.H>
extern Fl_Browser *FreqSelect;
extern Fl_Button *btnAddFreq;
extern Fl_Button *btnDelFreq;
extern Fl_Button *btnClearList;
#include "ValueSlider.h"
extern Fl_Wheel_Value_Slider *sldrRIT;
extern Fl_Wheel_Value_Slider *sldrVOLUME;
extern Fl_Wheel_Value_Slider *sldrIFSHIFT;
extern Fl_Wheel_Value_Slider *sldrNOTCH;
extern Fl_Wheel_Value_Slider *sldrDepth;
extern Fl_Wheel_Value_Slider *sldrNR;
#include <FL/Fl_Choice.H>
extern Fl_Choice *opMODE;
extern Fl_Choice *opBW;
extern Fl_Choice *opNOTCH;
extern Fl_Wheel_Value_Slider *sldrMICGAIN;
extern Fl_Wheel_Value_Slider *sldrPOWER;
#include <FL/Fl_Light_Button.H>
extern Fl_Light_Button *btnRIT;
extern Fl_Light_Button *btnVol;
extern Fl_Light_Button *btnIFsh;
extern Fl_Light_Button *btnNotch;
extern Fl_Light_Button *btnNR;
extern Fl_Light_Button *btnAttenuator;
extern Fl_Light_Button *btnPreamp;
#include <FL/Fl_Group.H>
extern Fl_Group *grpMeters;
extern Fl_Button *btnSmeter;
#include "Fl_SigBar.h"
extern Fl_SigBar *sldrRcvSignal;
extern Fl_Button *btnPower;
extern Fl_SigBar *sldrFwdPwr;
#include <FL/Fl_Box.H>
extern Fl_Box *boxSWR;
extern Fl_SigBar *sldrRefPwr;
extern Fl_Box *boxSquelch;
extern Fl_Button *btn_show_controls;
extern Fl_Light_Button *btnPTT;
extern Fl_Button *btn_tune;
extern Fl_Light_Button *btn_autotune;
extern Fl_Light_Button *btnCarrier;
extern Fl_Choice *antSelect;
#include <FL/Fl_Output.H>
extern Fl_Output *txtTEMP;
#include <FL/Fl_Tabs.H>
extern Fl_Tabs *tabs;
extern Fl_Group *CWtab;
extern Fl_Light_Button *btnSPOT;
#include <FL/Fl_Counter.H>
extern Fl_Counter *cntrWPM2;
extern Fl_Counter *cntrWPM;
extern Fl_Wheel_Value_Slider *sldrCWweight;
extern Fl_Wheel_Value_Slider *sldrCWattack;
extern Fl_Choice *mnuCWmode;
#include <FL/Fl_Check_Button.H>
extern Fl_Check_Button *btnQSKonoff;
extern Fl_Group *CW2tab;
extern Fl_Counter *sldrSideTone;
extern Fl_Choice *mnuCWoffset;
extern Fl_Choice *mnuCWdefFilter;
extern Fl_Group *VOXtab;
extern Fl_Counter *sldrVoxLevel;
extern Fl_Counter *sldrAntiVox;
extern Fl_Counter *sldrVoxDelay;
extern Fl_Light_Button *btnVoxOnOff;
extern Fl_Group *SPCHtab;
extern Fl_Light_Button *btnSpchMon;
extern Fl_Counter *sldrCompression;
extern Fl_Light_Button *btnSpchProc;
extern Fl_Group *RXtab;
extern Fl_Counter *sldrSqlLevel;
#include <FL/Fl_Round_Button.H>
extern Fl_Counter *sldrAgcAction;
extern Fl_Counter *sldrAgcSpeed;
extern Fl_Round_Button *btnSQLtype[2];
extern Fl_Group *TXtab;
extern Fl_Check_Button *btnAmpOnOff;
extern Fl_Counter *sldrXmtEqualizer;
extern Fl_Group *OSCtab;
extern Fl_Counter *ctr_vfo_adj;
extern Fl_Counter *ctr_vfo_offset;
Fl_Double_Window* kcat_window();
extern unsigned char menu__i18n_done;
extern Fl_Menu_Item menu_[];
#define mnuOpen (menu_+1)
#define mnuSave (menu_+2)
#define mnuExit (menu_+3)
#define mnuConfig (menu_+5)
#define mnuTooltips (menu_+6)
#define mnuAntPorts (menu_+7)
#define mnuPreferences (menu_+8)
#define mnuSelectPort (menu_+9)
#define mnuUtils (menu_+11)
#define mnu_cw_keyboard (menu_+12)
#define mnuAntImp (menu_+13)
#define mnuScanner (menu_+14)
#define mnuFreqCal (menu_+15)
#define mnuClearAntData (menu_+16)
#define mnuNRAMdata (menu_+17)
#define mnuEvents (menu_+18)
#define mnuHelp (menu_+20)
#define mnuOnLineHelp (menu_+21)
#define mnuAbout (menu_+22)
extern Fl_Choice *selectCommPort;
#include <FL/Fl_Return_Button.H>
extern Fl_Return_Button *btnOkCommsDialog;
Fl_Double_Window* CommsDialog();
#include <FL/Fl_Int_Input.H>
extern Fl_Int_Input *txtFreqRange;
extern Fl_Button *btnRcvAnt;
extern Fl_Button *btnXmtAnt;
extern Fl_Browser *brwsAntRanges;
extern Fl_Button *btnAddAntRange;
extern Fl_Button *btnDeleteAntRange;
extern Fl_Return_Button *btnAntRangeDialogOK;
Fl_Double_Window* FreqRangesDialog();
#include <FL/Fl_Text_Display.H>
extern Fl_Text_Display *txtDataDisp;
extern Fl_Return_Button *btnNRAMok;
extern Fl_Button *btnAntImpData;
extern Fl_Button *btnSmeterData;
extern Fl_Button *btnFreqRefData;
extern Fl_Button *btnPhaseDet;
extern Fl_Button *btnCarrierData;
extern Fl_Button *btnAllData;
extern Fl_Button *btnSaveData;
extern Fl_Button *btnRestoreData;
extern Fl_Button *btnClearData;
Fl_Double_Window* NRAMdataDialog();
extern Fl_Counter *cntrFreqStd;
extern void cbCalibrate();
extern Fl_Button *btnCalibrate;
extern void cbCalFinished();
extern Fl_Button *btnCalFinished;
Fl_Double_Window* FreqCalibDialog();
extern Fl_Box *lblTest;
extern Fl_Button *prefFont;
extern Fl_Button *prefForeground;
extern Fl_Button *btnBacklight;
extern Fl_Button *btnSmeterColor;
extern Fl_Button *btnSWRcolor;
extern Fl_Button *btnPowercolor;
extern Fl_Button *btnPeakColor;
extern Fl_Group *grpMeter1disp;
extern Fl_Button *btnSmeterdisp;
extern Fl_SigBar *sldrRcvSignaldisp;
extern Fl_Box *boxSquelchdisp;
extern Fl_Group *grpMeter2disp;
extern Fl_Button *btnPowerdisp;
extern Fl_SigBar *sldrFwdPwrdisp;
extern Fl_Button *btnSWRdisp;
extern Fl_SigBar *sldrRefPwrdisp;
extern Fl_Choice *mnuScheme;
extern Fl_Button *pref_sys_foreground;
extern Fl_Button *pref_sys_background;
extern Fl_Button *prefsys_background2;
extern Fl_Button *prefsys_defaults;
extern Fl_Wheel_Value_Slider *sldrColors;
extern Fl_Button *pref_slider_background;
extern Fl_Button *pref_slider_select;
extern Fl_Button *prefslider_defaults;
extern Fl_Button *btnReset;
extern Fl_Button *btnCancel;
extern Fl_Return_Button *btnOkDisplayDialog;
extern Fl_Light_Button *btn_lighted;
extern Fl_Button *btn_lighted_default;
Fl_Double_Window* DisplayDialog();
#include "XYplot.h"
extern XYplot *spectrum_plot;
extern cFreqControl *startFreqDisp;
extern Fl_Choice *scan_range;
extern Fl_Button *btn_start_scan;
extern Fl_Button *btn_stop_scan;
extern Fl_Button *btn_start_continuous;
extern Fl_Choice *db_max;
extern Fl_Choice *db_min;
Fl_Double_Window* scanner_window();
#include "flinput2.h"
extern Fl_Input2 *txt_to_send;
extern Fl_Button *btn_msg1;
extern Fl_Button *btn_msg2;
extern Fl_Button *btn_msg3;
extern Fl_Button *btn_msg4;
extern Fl_Button *btn_msg5;
extern Fl_Button *btn_msg6;
extern Fl_Button *btn_msg7;
extern Fl_Button *btn_msg8;
extern Fl_Button *btn_msg9;
extern Fl_Button *btn_msg10;
extern Fl_Button *btn_msg11;
extern Fl_Button *btn_msg12;
extern Fl_Button *btn_messages;
extern Fl_Button *btn_abort;
extern Fl_Light_Button *btn_send;
extern Fl_Input2 *txt_sta;
extern Fl_Input2 *txt_name;
#include <FL/Fl_Input.H>
extern Fl_Input *txt_freq;
extern Fl_Input2 *txt_xchg;
extern Fl_Button *btn_log_it;
extern Fl_Button *btn_clear;
extern Fl_Check_Button *btn_dups;
extern Fl_Check_Button *btnConnect;
extern Fl_Counter *cntrFARNSWORTH;
extern Fl_Counter *cntrWPM;
extern Fl_Counter *cntrWPM2;
Fl_Double_Window* cwkeyboard_window();
extern Fl_Input2 *label_1;
extern Fl_Input2 *edit_msg1;
extern Fl_Input2 *label_2;
extern Fl_Input2 *edit_msg2;
extern Fl_Input2 *label_3;
extern Fl_Input2 *edit_msg3;
extern Fl_Input2 *label_4;
extern Fl_Input2 *edit_msg4;
extern Fl_Input2 *label_5;
extern Fl_Input2 *edit_msg5;
extern Fl_Input2 *label_6;
extern Fl_Input2 *edit_msg6;
extern Fl_Input2 *label_7;
extern Fl_Input2 *edit_msg7;
extern Fl_Input2 *label_8;
extern Fl_Input2 *edit_msg8;
extern Fl_Input2 *label_9;
extern Fl_Input2 *edit_msg9;
extern Fl_Input2 *label_10;
extern Fl_Input2 *edit_msg10;
extern Fl_Input2 *label_11;
extern Fl_Input2 *edit_msg11;
extern Fl_Input2 *label_12;
extern Fl_Input2 *edit_msg12;
extern Fl_Button *btn_done_edit;
extern Fl_Button *btn_cancel_edit;
extern Fl_Button *btn_apply_edit;
extern Fl_Input2 *txt_cll;
extern Fl_Input2 *txt_opr;
extern Fl_Input2 *txt_qth;
extern Fl_Input2 *txt_loc;
extern Fl_Int_Input *txt_serial_nbr;
extern Fl_Int_Input *txt_time_span;
extern Fl_Input *txt_xout;
extern Fl_Check_Button *btn_zeros;
extern Fl_Check_Button *btn_ck_band;
extern Fl_Check_Button *btn_ck_time_span;
Fl_Double_Window* message_editor();
#endif
