// generated by Fast Light User Interface Designer (fluid) version 1.0110

#include "KachinaPanel.h"
#include "images.h"
#include "Kachina.h"
#include "support.h"

static void cb_mnuOpen(Fl_Menu_*, void*) {
  openFreqList();
}

static void cb_mnuSave(Fl_Menu_*, void*) {
  saveFreqList();
}

static void cb_mnuExit(Fl_Menu_*, void*) {
  cbExit();
}

static void cb_mnuViewLog(Fl_Menu_*, void*) {
  cbViewLog();
}

static void cb_mnuRcvParams(Fl_Menu_*, void*) {
  openRcvConfigDialog();
}

static void cb_mnuXmtParams(Fl_Menu_*, void*) {
  openXmtConfigDialog();
}

static void cb_mnuPreferences(Fl_Menu_*, void*) {
  setDisplayColors();
}

static void cb_mnuCWparams(Fl_Menu_*, void*) {
  openCwParamDialog();
}

static void cb_mnuAntPorts(Fl_Menu_*, void*) {
  cbmnuAntPorts();
}

static void cb_mnuFreqCal(Fl_Menu_*, void*) {
  openFreqCalibDialog();
}

static void cb_mnuClearAntData(Fl_Menu_*, void*) {
  cbClearAntData();
}

static void cb_mnuNRAMdata(Fl_Menu_*, void*) {
  cbNRAM();
}

static void cb_mnuAbout(Fl_Menu_*, void*) {
  about();
}

Fl_Menu_Item menu_[] = {
 {"&Files", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 12, 0},
 {"&Open", 0,  (Fl_Callback*)cb_mnuOpen, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"&Save", 0,  (Fl_Callback*)cb_mnuSave, 0, 128, FL_NORMAL_LABEL, 0, 12, 0},
 {"E&xit", 0,  (Fl_Callback*)cb_mnuExit, 0, 128, FL_NORMAL_LABEL, 0, 12, 0},
 {"View Log", 0,  (Fl_Callback*)cb_mnuViewLog, 0, 2, FL_NORMAL_LABEL, 0, 12, 0},
 {0,0,0,0,0,0,0,0,0},
 {"&Config", 0,  0, 0, 192, FL_NORMAL_LABEL, 0, 12, 0},
 {"&Rcv Parameters", 0,  (Fl_Callback*)cb_mnuRcvParams, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"&Xmt Parameters", 0,  (Fl_Callback*)cb_mnuXmtParams, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"&Display Colors", 0,  (Fl_Callback*)cb_mnuPreferences, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"CW Params", 0,  (Fl_Callback*)cb_mnuCWparams, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Antenna Ports", 0,  (Fl_Callback*)cb_mnuAntPorts, 0, 128, FL_NORMAL_LABEL, 0, 12, 0},
 {0,0,0,0,0,0,0,0,0},
 {"Utils", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 12, 0},
 {"&Ant Imped", 0,  0, 0, 16, FL_NORMAL_LABEL, 0, 12, 0},
 {"&FreqCal", 0,  (Fl_Callback*)cb_mnuFreqCal, 0, 128, FL_NORMAL_LABEL, 0, 12, 0},
 {"Clear Ant\' Data", 0,  (Fl_Callback*)cb_mnuClearAntData, 0, 128, FL_NORMAL_LABEL, 0, 12, 0},
 {"&NRAM data", 0,  (Fl_Callback*)cb_mnuNRAMdata, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {0,0,0,0,0,0,0,0,0},
 {"                           ", 0,  0, 0, 193, FL_NO_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"&Help", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 12, 0},
 {"&About", 0,  (Fl_Callback*)cb_mnuAbout, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0}
};

cFreqControl *FreqDisp=(cFreqControl *)0;

Fl_Button *btnAddFreq=(Fl_Button *)0;

static void cb_btnAddFreq(Fl_Button*, void*) {
  addFreq();
}

Fl_Button *btnDelFreq=(Fl_Button *)0;

static void cb_btnDelFreq(Fl_Button*, void*) {
  delFreq();
}

Fl_Button *btnClearList=(Fl_Button *)0;

static void cb_btnClearList(Fl_Button*, void*) {
  clearList();
}

Fl_Browser *FreqSelect=(Fl_Browser *)0;

static void cb_FreqSelect(Fl_Browser*, void*) {
  if (FreqSelect->value())
selectFreq();
}

Fl_Button *btnABactive=(Fl_Button *)0;

static void cb_btnABactive(Fl_Button*, void*) {
  cbABactive();
}

Fl_Button *btnA2B=(Fl_Button *)0;

static void cb_btnA2B(Fl_Button*, void*) {
  cbA2B();
}

Fl_Light_Button *btnSplit=(Fl_Light_Button *)0;

static void cb_btnSplit(Fl_Light_Button*, void*) {
  cbABsplit();
}

Fl_Output *txtInactive=(Fl_Output *)0;

Fl_Value_Slider *sldrRIT=(Fl_Value_Slider *)0;

static void cb_sldrRIT(Fl_Value_Slider*, void*) {
  cbRIT();
}

Fl_Value_Slider *sldrVOLUME=(Fl_Value_Slider *)0;

static void cb_sldrVOLUME(Fl_Value_Slider*, void*) {
  setVolume();
}

Fl_Value_Slider *sldrIFSHIFT=(Fl_Value_Slider *)0;

static void cb_sldrIFSHIFT(Fl_Value_Slider*, void*) {
  setIFshift();
}

Fl_Value_Slider *sldrNOTCH=(Fl_Value_Slider *)0;

static void cb_sldrNOTCH(Fl_Value_Slider*, void*) {
  setNotch();
}

Fl_Value_Slider *sldrDepth=(Fl_Value_Slider *)0;

static void cb_sldrDepth(Fl_Value_Slider*, void*) {
  cbDepth();
}

Fl_Value_Slider *sldrNR=(Fl_Value_Slider *)0;

static void cb_sldrNR(Fl_Value_Slider*, void*) {
  cbNR();
}

Fl_Value_Slider *sldrMICGAIN=(Fl_Value_Slider *)0;

static void cb_sldrMICGAIN(Fl_Value_Slider*, void*) {
  setMicGain();
}

Fl_Value_Slider *sldrPOWER=(Fl_Value_Slider *)0;

static void cb_sldrPOWER(Fl_Value_Slider*, void*) {
  setPower();
}

Fl_Choice *opMODE=(Fl_Choice *)0;

static void cb_opMODE(Fl_Choice*, void*) {
  setMode();
}

Fl_Choice *opBW=(Fl_Choice *)0;

static void cb_opBW(Fl_Choice*, void*) {
  setBW();
}

Fl_Choice *opNOTCH=(Fl_Choice *)0;

static void cb_opNOTCH(Fl_Choice*, void*) {
  setNotchWidth();
}

Fl_Light_Button *btnRIT=(Fl_Light_Button *)0;

static void cb_btnRIT(Fl_Light_Button*, void*) {
  cbbtnRIT();
}

Fl_Light_Button *btnMute=(Fl_Light_Button *)0;

static void cb_btnMute(Fl_Light_Button*, void*) {
  cbMute();
}

Fl_Light_Button *btnIFsh=(Fl_Light_Button *)0;

static void cb_btnIFsh(Fl_Light_Button*, void*) {
  cbIFsh();
}

Fl_Light_Button *btnNotch=(Fl_Light_Button *)0;

static void cb_btnNotch(Fl_Light_Button*, void*) {
  cbbtnNotch();
}

Fl_Light_Button *btnNR=(Fl_Light_Button *)0;

static void cb_btnNR(Fl_Light_Button*, void*) {
  cbbtnNR();
}

Fl_Light_Button *btnAttenuator=(Fl_Light_Button *)0;

static void cb_btnAttenuator(Fl_Light_Button*, void*) {
  cbAttenuator();
}

Fl_Light_Button *btnPreamp=(Fl_Light_Button *)0;

static void cb_btnPreamp(Fl_Light_Button*, void*) {
  cbPreamp();
}

Fl_Light_Button *btnPTT=(Fl_Light_Button *)0;

static void cb_btnPTT(Fl_Light_Button*, void*) {
  cbPTT();
}

Fl_Light_Button *btnTune=(Fl_Light_Button *)0;

static void cb_btnTune(Fl_Light_Button*, void*) {
  cbTune();
}

Fl_Light_Button *btnCarrier=(Fl_Light_Button *)0;

static void cb_btnCarrier(Fl_Light_Button*, void*) {
  cbCarrier();
}

Fl_Counter *cntrWPM=(Fl_Counter *)0;

static void cb_cntrWPM(Fl_Counter*, void*) {
  cbWPM();
}

Fl_Output *txtTEMP=(Fl_Output *)0;

static void cb_txtTEMP(Fl_Output*, void*) {
  cbTemp();
}

Fl_Button *btnSmeter=(Fl_Button *)0;

static void cb_btnSmeter(Fl_Button*, void*) {
  cbSmeter();
}

Fl_SigBar *sldrRcvSignal=(Fl_SigBar *)0;

Fl_Slider *sldrSQdisp=(Fl_Slider *)0;

Fl_Box *boxSquelch=(Fl_Box *)0;

Fl_Button *btnPower=(Fl_Button *)0;

static void cb_btnPower(Fl_Button*, void*) {
  cbPWR();
}

Fl_SigBar *sldrFwdPwr=(Fl_SigBar *)0;

Fl_Button *btnSWR=(Fl_Button *)0;

static void cb_btnSWR(Fl_Button*, void*) {
  cbSWR();
}

Fl_SigBar *sldrRefPwr=(Fl_SigBar *)0;

Fl_Button *btnRxAnt=(Fl_Button *)0;

static void cb_btnRxAnt(Fl_Button*, void*) {
  cbRxAnt();
}

Fl_Button *btnTxAnt=(Fl_Button *)0;

static void cb_btnTxAnt(Fl_Button*, void*) {
  cbTxAnt();
}

Fl_Check_Button *btnSelAnt=(Fl_Check_Button *)0;

static void cb_btnSelAnt(Fl_Check_Button*, void*) {
  movFreq();
}

Fl_Double_Window* Kachina_window() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(500, 315, "Kachina CAT");
    w = o;
    o->color((Fl_Color)51);
    { Fl_Menu_Bar* o = new Fl_Menu_Bar(2, 2, 310, 20);
      o->labelsize(12);
      o->textsize(12);
      o->menu(menu_);
    } // Fl_Menu_Bar* o
    { FreqDisp = new cFreqControl(2, 26, 344, 60, "8");
      FreqDisp->tooltip("Set Frequency");
      FreqDisp->box(FL_DOWN_BOX);
      FreqDisp->color((Fl_Color)FL_BACKGROUND_COLOR);
      FreqDisp->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
      FreqDisp->labeltype(FL_NORMAL_LABEL);
      FreqDisp->labelfont(0);
      FreqDisp->labelsize(14);
      FreqDisp->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
      FreqDisp->align(FL_ALIGN_CENTER);
      FreqDisp->when(FL_WHEN_RELEASE);
      FreqDisp->SetONOFFCOLOR (FL_YELLOW, FL_BLACK);
      FreqDisp->setCallBack(movFreq);
    } // cFreqControl* FreqDisp
    { btnAddFreq = new Fl_Button(350, 25, 20, 20, "@|>");
      btnAddFreq->tooltip("Add to list");
      btnAddFreq->box(FL_PLASTIC_UP_BOX);
      btnAddFreq->labelsize(10);
      btnAddFreq->callback((Fl_Callback*)cb_btnAddFreq);
    } // Fl_Button* btnAddFreq
    { btnDelFreq = new Fl_Button(350, 46, 20, 20, "@1+");
      btnDelFreq->tooltip("Delete from list");
      btnDelFreq->box(FL_PLASTIC_UP_BOX);
      btnDelFreq->labelsize(10);
      btnDelFreq->callback((Fl_Callback*)cb_btnDelFreq);
    } // Fl_Button* btnDelFreq
    { btnClearList = new Fl_Button(350, 67, 20, 20, "@-1square");
      btnClearList->tooltip("Clear list");
      btnClearList->box(FL_PLASTIC_UP_BOX);
      btnClearList->labelsize(10);
      btnClearList->callback((Fl_Callback*)cb_btnClearList);
    } // Fl_Button* btnClearList
    { FreqSelect = new Fl_Browser(372, 2, 127, 96);
      FreqSelect->tooltip("Select operating frequency/mode");
      FreqSelect->type(2);
      FreqSelect->labelfont(4);
      FreqSelect->labelsize(12);
      FreqSelect->textfont(13);
      FreqSelect->textsize(12);
      FreqSelect->callback((Fl_Callback*)cb_FreqSelect);
    } // Fl_Browser* FreqSelect
    { btnABactive = new Fl_Button(2, 90, 55, 30, "A / B");
      btnABactive->tooltip("Select active VFO");
      btnABactive->callback((Fl_Callback*)cb_btnABactive);
    } // Fl_Button* btnABactive
    { btnA2B = new Fl_Button(57, 90, 55, 30, "A -> B");
      btnA2B->tooltip("Active -> Inactive");
      btnA2B->callback((Fl_Callback*)cb_btnA2B);
    } // Fl_Button* btnA2B
    { btnSplit = new Fl_Light_Button(112, 90, 55, 30, "Split");
      btnSplit->tooltip("Rcv-active Xmt-inactive");
      btnSplit->callback((Fl_Callback*)cb_btnSplit);
    } // Fl_Light_Button* btnSplit
    { txtInactive = new Fl_Output(167, 90, 180, 30);
      txtInactive->color((Fl_Color)FL_DARK_BLUE);
      txtInactive->labelsize(36);
      txtInactive->labelcolor((Fl_Color)14);
      txtInactive->textfont(4);
      txtInactive->textsize(36);
      txtInactive->textcolor((Fl_Color)29);
      txtInactive->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
    } // Fl_Output* txtInactive
    { sldrRIT = new Fl_Value_Slider(2, 122, 295, 18);
      sldrRIT->tooltip("RIT (-790 to 790 Hz)");
      sldrRIT->type(5);
      sldrRIT->color((Fl_Color)26);
      sldrRIT->labeltype(FL_NO_LABEL);
      sldrRIT->minimum(-790);
      sldrRIT->maximum(790);
      sldrRIT->step(10);
      sldrRIT->textsize(14);
      sldrRIT->callback((Fl_Callback*)cb_sldrRIT);
      sldrRIT->align(FL_ALIGN_RIGHT);
      sldrRIT->deactivate();
    } // Fl_Value_Slider* sldrRIT
    { sldrVOLUME = new Fl_Value_Slider(2, 142, 295, 18, "Audio Volume");
      sldrVOLUME->tooltip("Audio output volume");
      sldrVOLUME->type(5);
      sldrVOLUME->color((Fl_Color)26);
      sldrVOLUME->labeltype(FL_NO_LABEL);
      sldrVOLUME->value(0.2);
      sldrVOLUME->textsize(14);
      sldrVOLUME->callback((Fl_Callback*)cb_sldrVOLUME);
      sldrVOLUME->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
    } // Fl_Value_Slider* sldrVOLUME
    { sldrIFSHIFT = new Fl_Value_Slider(2, 162, 295, 18);
      sldrIFSHIFT->tooltip("Set IF Shift Frequency");
      sldrIFSHIFT->type(5);
      sldrIFSHIFT->color((Fl_Color)26);
      sldrIFSHIFT->labeltype(FL_NO_LABEL);
      sldrIFSHIFT->minimum(-1280);
      sldrIFSHIFT->maximum(1270);
      sldrIFSHIFT->step(10);
      sldrIFSHIFT->textsize(14);
      sldrIFSHIFT->callback((Fl_Callback*)cb_sldrIFSHIFT);
      sldrIFSHIFT->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
      sldrIFSHIFT->deactivate();
    } // Fl_Value_Slider* sldrIFSHIFT
    { sldrNOTCH = new Fl_Value_Slider(2, 182, 295, 18);
      sldrNOTCH->tooltip("Set Notch Frequency");
      sldrNOTCH->type(5);
      sldrNOTCH->color((Fl_Color)26);
      sldrNOTCH->labeltype(FL_NO_LABEL);
      sldrNOTCH->minimum(200);
      sldrNOTCH->maximum(2750);
      sldrNOTCH->step(10);
      sldrNOTCH->textsize(14);
      sldrNOTCH->callback((Fl_Callback*)cb_sldrNOTCH);
      sldrNOTCH->align(FL_ALIGN_CENTER);
    } // Fl_Value_Slider* sldrNOTCH
    { sldrDepth = new Fl_Value_Slider(2, 182, 295, 18);
      sldrDepth->tooltip("Auto Notch Depth (min -> max)");
      sldrDepth->type(5);
      sldrDepth->color((Fl_Color)26);
      sldrDepth->labeltype(FL_NO_LABEL);
      sldrDepth->maximum(255);
      sldrDepth->step(1);
      sldrDepth->textsize(14);
      sldrDepth->callback((Fl_Callback*)cb_sldrDepth);
      sldrDepth->align(FL_ALIGN_RIGHT);
      sldrDepth->hide();
      sldrDepth->deactivate();
    } // Fl_Value_Slider* sldrDepth
    { sldrNR = new Fl_Value_Slider(2, 202, 295, 18);
      sldrNR->tooltip("Noise Reduction (min -> max)");
      sldrNR->type(5);
      sldrNR->color((Fl_Color)26);
      sldrNR->labeltype(FL_NO_LABEL);
      sldrNR->maximum(255);
      sldrNR->step(1);
      sldrNR->textsize(14);
      sldrNR->callback((Fl_Callback*)cb_sldrNR);
      sldrNR->align(FL_ALIGN_RIGHT);
      sldrNR->deactivate();
    } // Fl_Value_Slider* sldrNR
    { sldrMICGAIN = new Fl_Value_Slider(2, 244, 295, 18, "Mic");
      sldrMICGAIN->tooltip("Mic / Gain control");
      sldrMICGAIN->type(5);
      sldrMICGAIN->color((Fl_Color)21);
      sldrMICGAIN->textsize(14);
      sldrMICGAIN->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
      sldrMICGAIN->callback((Fl_Callback*)cb_sldrMICGAIN);
      sldrMICGAIN->align(FL_ALIGN_RIGHT);
    } // Fl_Value_Slider* sldrMICGAIN
    { sldrPOWER = new Fl_Value_Slider(2, 268, 295, 18, "Pwr");
      sldrPOWER->tooltip("Set Power Output");
      sldrPOWER->type(5);
      sldrPOWER->color((Fl_Color)21);
      sldrPOWER->maximum(100);
      sldrPOWER->step(1);
      sldrPOWER->value(20);
      sldrPOWER->textsize(14);
      sldrPOWER->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
      sldrPOWER->callback((Fl_Callback*)cb_sldrPOWER);
      sldrPOWER->align(FL_ALIGN_RIGHT);
    } // Fl_Value_Slider* sldrPOWER
    { opMODE = new Fl_Choice(2, 222, 70, 20);
      opMODE->tooltip("Select Mode");
      opMODE->down_box(FL_BORDER_BOX);
      opMODE->callback((Fl_Callback*)cb_opMODE);
    } // Fl_Choice* opMODE
    { opBW = new Fl_Choice(78, 222, 70, 20);
      opBW->tooltip("Select Bandwidth");
      opBW->down_box(FL_BORDER_BOX);
      opBW->callback((Fl_Callback*)cb_opBW);
    } // Fl_Choice* opBW
    { opNOTCH = new Fl_Choice(154, 222, 71, 20);
      opNOTCH->tooltip("Select Notch Depth");
      opNOTCH->down_box(FL_BORDER_BOX);
      opNOTCH->callback((Fl_Callback*)cb_opNOTCH);
    } // Fl_Choice* opNOTCH
    { btnRIT = new Fl_Light_Button(298, 122, 50, 18, "RIT");
      btnRIT->tooltip("RIT on/off");
      btnRIT->labelsize(12);
      btnRIT->callback((Fl_Callback*)cb_btnRIT);
    } // Fl_Light_Button* btnRIT
    { btnMute = new Fl_Light_Button(298, 142, 50, 18, "mute");
      btnMute->tooltip("Speaker Mute on/off");
      btnMute->labelsize(12);
      btnMute->callback((Fl_Callback*)cb_btnMute);
    } // Fl_Light_Button* btnMute
    { btnIFsh = new Fl_Light_Button(298, 162, 50, 18, "IFsh");
      btnIFsh->tooltip("IF Shift On/Off");
      btnIFsh->labelsize(12);
      btnIFsh->callback((Fl_Callback*)cb_btnIFsh);
    } // Fl_Light_Button* btnIFsh
    { btnNotch = new Fl_Light_Button(298, 182, 50, 18, "Ntch");
      btnNotch->tooltip("Notch - Manual (off) Auto (on)");
      btnNotch->labelsize(12);
      btnNotch->callback((Fl_Callback*)cb_btnNotch);
    } // Fl_Light_Button* btnNotch
    { btnNR = new Fl_Light_Button(298, 202, 50, 18, "NR");
      btnNR->tooltip("NR on/off");
      btnNR->labelsize(12);
      btnNR->callback((Fl_Callback*)cb_btnNR);
    } // Fl_Light_Button* btnNR
    { btnAttenuator = new Fl_Light_Button(235, 223, 55, 18, "Att");
      btnAttenuator->tooltip("Attenuator On/Off");
      btnAttenuator->labelsize(12);
      btnAttenuator->callback((Fl_Callback*)cb_btnAttenuator);
    } // Fl_Light_Button* btnAttenuator
    { btnPreamp = new Fl_Light_Button(298, 223, 50, 18, "Pre");
      btnPreamp->tooltip("Preamp On/Off");
      btnPreamp->labelsize(12);
      btnPreamp->callback((Fl_Callback*)cb_btnPreamp);
    } // Fl_Light_Button* btnPreamp
    { btnPTT = new Fl_Light_Button(2, 292, 47, 20, "PTT");
      btnPTT->tooltip("Xmt On/Off");
      btnPTT->labelsize(12);
      btnPTT->callback((Fl_Callback*)cb_btnPTT);
    } // Fl_Light_Button* btnPTT
    { btnTune = new Fl_Light_Button(52, 292, 47, 20, "Tune");
      btnTune->tooltip("Auto-tune Antenna");
      btnTune->type(0);
      btnTune->labelsize(12);
      btnTune->callback((Fl_Callback*)cb_btnTune);
    } // Fl_Light_Button* btnTune
    { btnCarrier = new Fl_Light_Button(103, 292, 47, 20, "Carr");
      btnCarrier->tooltip("Constant Carrier");
      btnCarrier->labelsize(12);
      btnCarrier->callback((Fl_Callback*)cb_btnCarrier);
    } // Fl_Light_Button* btnCarrier
    { cntrWPM = new Fl_Counter(293, 290, 54, 20, "wpm");
      cntrWPM->type(1);
      cntrWPM->labelsize(12);
      cntrWPM->minimum(5);
      cntrWPM->maximum(80);
      cntrWPM->step(1);
      cntrWPM->value(18);
      cntrWPM->callback((Fl_Callback*)cb_cntrWPM);
      cntrWPM->align(FL_ALIGN_LEFT);
    } // Fl_Counter* cntrWPM
    { txtTEMP = new Fl_Output(317, 3, 40, 20, "C");
      txtTEMP->tooltip("Click C / F");
      txtTEMP->color((Fl_Color)FL_FOREGROUND_COLOR);
      txtTEMP->selection_color((Fl_Color)FL_BACKGROUND2_COLOR);
      txtTEMP->labelfont(13);
      txtTEMP->labelsize(12);
      txtTEMP->textfont(13);
      txtTEMP->textcolor((Fl_Color)62);
      txtTEMP->callback((Fl_Callback*)cb_txtTEMP);
      txtTEMP->align(FL_ALIGN_RIGHT);
    } // Fl_Output* txtTEMP
    { Fl_Group* o = new Fl_Group(350, 101, 65, 211);
      o->box(FL_DOWN_BOX);
      o->color((Fl_Color)FL_FOREGROUND_COLOR);
      o->selection_color((Fl_Color)FL_LIGHT2);
      o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
      { Fl_Button* o = btnSmeter = new Fl_Button(352, 106, 40, 200);
        btnSmeter->tooltip("Click - change scale");
        btnSmeter->box(FL_FLAT_BOX);
        btnSmeter->down_box(FL_FLAT_BOX);
        btnSmeter->color((Fl_Color)2);
        btnSmeter->selection_color((Fl_Color)2);
        btnSmeter->callback((Fl_Callback*)cb_btnSmeter);
        btnSmeter->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
        o->image(image_smeter);
      } // Fl_Button* btnSmeter
      { Fl_SigBar* o = sldrRcvSignal = new Fl_SigBar(393, 115, 10, 182);
        sldrRcvSignal->box(FL_FLAT_BOX);
        sldrRcvSignal->color((Fl_Color)10);
        sldrRcvSignal->selection_color((Fl_Color)2);
        sldrRcvSignal->labeltype(FL_NORMAL_LABEL);
        sldrRcvSignal->labelfont(0);
        sldrRcvSignal->labelsize(14);
        sldrRcvSignal->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
        sldrRcvSignal->align(FL_ALIGN_CENTER);
        sldrRcvSignal->when(FL_WHEN_RELEASE);
        o->minimum(0.0f);
        o->maximum(-128.0f);
      } // Fl_SigBar* sldrRcvSignal
      { sldrSQdisp = new Fl_Slider(404, 115, 8, 182);
        sldrSQdisp->box(FL_FLAT_BOX);
        sldrSQdisp->color((Fl_Color)FL_FOREGROUND_COLOR);
        sldrSQdisp->selection_color((Fl_Color)3);
        sldrSQdisp->labeltype(FL_NO_LABEL);
        sldrSQdisp->labelcolor((Fl_Color)3);
        sldrSQdisp->maximum(-127);
        sldrSQdisp->step(1);
        sldrSQdisp->value(-100);
        sldrSQdisp->deactivate();
      } // Fl_Slider* sldrSQdisp
      { boxSquelch = new Fl_Box(403, 104, 9, 9);
        boxSquelch->box(FL_OVAL_BOX);
        boxSquelch->color((Fl_Color)6);
        boxSquelch->selection_color((Fl_Color)FL_FOREGROUND_COLOR);
      } // Fl_Box* boxSquelch
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(418, 101, 80, 210);
      o->box(FL_DOWN_BOX);
      o->color((Fl_Color)FL_FOREGROUND_COLOR);
      o->selection_color((Fl_Color)FL_LIGHT2);
      o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
      { Fl_Button* o = btnPower = new Fl_Button(420, 106, 25, 200);
        btnPower->tooltip("Click - FWD / ALC");
        btnPower->box(FL_FLAT_BOX);
        btnPower->down_box(FL_FLAT_BOX);
        btnPower->color((Fl_Color)175);
        btnPower->selection_color((Fl_Color)175);
        btnPower->callback((Fl_Callback*)cb_btnPower);
        btnPower->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
        o->image(image_p150);
      } // Fl_Button* btnPower
      { Fl_SigBar* o = sldrFwdPwr = new Fl_SigBar(446, 115, 10, 182);
        sldrFwdPwr->box(FL_FLAT_BOX);
        sldrFwdPwr->color((Fl_Color)14);
        sldrFwdPwr->selection_color((Fl_Color)6);
        sldrFwdPwr->labeltype(FL_NORMAL_LABEL);
        sldrFwdPwr->labelfont(0);
        sldrFwdPwr->labelsize(14);
        sldrFwdPwr->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
        sldrFwdPwr->align(FL_ALIGN_CENTER);
        sldrFwdPwr->when(FL_WHEN_RELEASE);
        o->minimum(120.0f);
        o->maximum(0.0f);
      } // Fl_SigBar* sldrFwdPwr
      { Fl_Button* o = btnSWR = new Fl_Button(470, 106, 25, 200);
        btnSWR->tooltip("Click REF / SWR");
        btnSWR->box(FL_FLAT_BOX);
        btnSWR->down_box(FL_FLAT_BOX);
        btnSWR->color((Fl_Color)1);
        btnSWR->selection_color((Fl_Color)1);
        btnSWR->callback((Fl_Callback*)cb_btnSWR);
        btnSWR->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
        o->image(image_swr);
      } // Fl_Button* btnSWR
      { Fl_SigBar* o = sldrRefPwr = new Fl_SigBar(459, 115, 10, 182);
        sldrRefPwr->box(FL_FLAT_BOX);
        sldrRefPwr->color((Fl_Color)9);
        sldrRefPwr->selection_color((Fl_Color)1);
        sldrRefPwr->labeltype(FL_NORMAL_LABEL);
        sldrRefPwr->labelfont(0);
        sldrRefPwr->labelsize(14);
        sldrRefPwr->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
        sldrRefPwr->align(FL_ALIGN_CENTER);
        sldrRefPwr->when(FL_WHEN_RELEASE);
        o->minimum(50.0f);
        o->maximum(0.0f);
      } // Fl_SigBar* sldrRefPwr
      o->end();
    } // Fl_Group* o
    { btnRxAnt = new Fl_Button(169, 292, 45, 20, "Rx-A");
      btnRxAnt->tooltip("Select Ant A");
      btnRxAnt->callback((Fl_Callback*)cb_btnRxAnt);
    } // Fl_Button* btnRxAnt
    { btnTxAnt = new Fl_Button(214, 292, 45, 20, "Tx-A");
      btnTxAnt->tooltip("Select Ant B");
      btnTxAnt->callback((Fl_Callback*)cb_btnTxAnt);
    } // Fl_Button* btnTxAnt
    { btnSelAnt = new Fl_Check_Button(154, 292, 20, 20);
      btnSelAnt->tooltip("Click to override Antenna Table");
      btnSelAnt->down_box(FL_DOWN_BOX);
      btnSelAnt->callback((Fl_Callback*)cb_btnSelAnt);
    } // Fl_Check_Button* btnSelAnt
    o->end();
  } // Fl_Double_Window* o
  return w;
}

Fl_Slider *sldrAgcAction=(Fl_Slider *)0;

static void cb_sldrAgcAction(Fl_Slider*, void*) {
  cbsldrAgcAction();
}

Fl_Slider *sldrAgcSpeed=(Fl_Slider *)0;

static void cb_sldrAgcSpeed(Fl_Slider*, void*) {
  cbsldrAgcSpeed();
}

Fl_Value_Slider *sldrSqlLevel=(Fl_Value_Slider *)0;

static void cb_sldrSqlLevel(Fl_Value_Slider*, void*) {
  cbSqlLevel();
}

Fl_Return_Button *btnRcvParamOK=(Fl_Return_Button *)0;

static void cb_btnRcvParamOK(Fl_Return_Button*, void*) {
  closeRcvDialog();
}

static void cb_btnSQLtype(Fl_Round_Button*, void*) {
  btnSQLtype[1]->value(0);
cbSQLtype();
}

Fl_Round_Button *btnSQLtype[2]={(Fl_Round_Button *)0};

static void cb_btnSQLtype1(Fl_Round_Button*, void*) {
  btnSQLtype[0]->value(0);
cbSQLtype();
}

Fl_Double_Window* RcvParamDialog() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(365, 175, "Receiver Parameters");
    w = o;
    o->selection_color((Fl_Color)17);
    { sldrAgcAction = new Fl_Slider(95, 17, 265, 16, "Min                                                    Max");
      sldrAgcAction->type(1);
      sldrAgcAction->color((Fl_Color)246);
      sldrAgcAction->maximum(255);
      sldrAgcAction->step(1);
      sldrAgcAction->callback((Fl_Callback*)cb_sldrAgcAction);
      sldrAgcAction->align(FL_ALIGN_TOP_LEFT);
    } // Fl_Slider* sldrAgcAction
    { sldrAgcSpeed = new Fl_Slider(95, 51, 265, 16, "Slo                                                     Fast");
      sldrAgcSpeed->type(1);
      sldrAgcSpeed->color((Fl_Color)246);
      sldrAgcSpeed->maximum(255);
      sldrAgcSpeed->step(1);
      sldrAgcSpeed->value(117);
      sldrAgcSpeed->callback((Fl_Callback*)cb_sldrAgcSpeed);
      sldrAgcSpeed->align(FL_ALIGN_TOP_LEFT);
    } // Fl_Slider* sldrAgcSpeed
    { sldrSqlLevel = new Fl_Value_Slider(60, 83, 300, 16, "Min                                                   Max ");
      sldrSqlLevel->type(5);
      sldrSqlLevel->color((Fl_Color)17);
      sldrSqlLevel->selection_color((Fl_Color)53);
      sldrSqlLevel->minimum(-127);
      sldrSqlLevel->maximum(0);
      sldrSqlLevel->step(1);
      sldrSqlLevel->value(-127);
      sldrSqlLevel->textfont(1);
      sldrSqlLevel->textsize(12);
      sldrSqlLevel->callback((Fl_Callback*)cb_sldrSqlLevel);
      sldrSqlLevel->align(FL_ALIGN_TOP_RIGHT);
    } // Fl_Value_Slider* sldrSqlLevel
    { Fl_Box* o = new Fl_Box(7, 17, 85, 17, "AGC action:");
      o->align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(7, 51, 85, 17, "AGC speed:");
      o->align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE);
    } // Fl_Box* o
    { btnRcvParamOK = new Fl_Return_Button(273, 131, 80, 25, "OK");
      btnRcvParamOK->callback((Fl_Callback*)cb_btnRcvParamOK);
    } // Fl_Return_Button* btnRcvParamOK
    { Fl_Box* o = new Fl_Box(5, 83, 55, 17, "SQ dbm");
      o->align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE);
    } // Fl_Box* o
    { Fl_Group* o = new Fl_Group(5, 105, 205, 66, "Squelch Type:");
      o->box(FL_ENGRAVED_FRAME);
      o->align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE);
      { btnSQLtype[0] = new Fl_Round_Button(65, 123, 20, 21, "Level Sensitive");
        btnSQLtype[0]->down_box(FL_ROUND_DOWN_BOX);
        btnSQLtype[0]->value(1);
        btnSQLtype[0]->callback((Fl_Callback*)cb_btnSQLtype);
      } // Fl_Round_Button* btnSQLtype[0]
      { btnSQLtype[1] = new Fl_Round_Button(65, 143, 20, 21, "Syllabic");
        btnSQLtype[1]->down_box(FL_ROUND_DOWN_BOX);
        btnSQLtype[1]->callback((Fl_Callback*)cb_btnSQLtype1);
      } // Fl_Round_Button* btnSQLtype[1]
      o->end();
    } // Fl_Group* o
    o->end();
  } // Fl_Double_Window* o
  return w;
}

Fl_Slider *sldrCompression=(Fl_Slider *)0;

static void cb_sldrCompression(Fl_Slider*, void*) {
  cbsldrCompression();
}

Fl_Check_Button *btnSpchProc=(Fl_Check_Button *)0;

static void cb_btnSpchProc(Fl_Check_Button*, void*) {
  cbbtnSpchProc();
}

Fl_Check_Button *btnSpchMon=(Fl_Check_Button *)0;

static void cb_btnSpchMon(Fl_Check_Button*, void*) {
  cbSpchMon();
}

Fl_Slider *sldrSideTone=(Fl_Slider *)0;

static void cb_sldrSideTone(Fl_Slider*, void*) {
  cbSidetone();
}

Fl_Slider *sldrVoxLevel=(Fl_Slider *)0;

static void cb_sldrVoxLevel(Fl_Slider*, void*) {
  cbsldrVoxLevel();
}

Fl_Slider *sldrAntiVox=(Fl_Slider *)0;

static void cb_sldrAntiVox(Fl_Slider*, void*) {
  cbsldrAntiVox();
}

Fl_Slider *sldrVoxDelay=(Fl_Slider *)0;

static void cb_sldrVoxDelay(Fl_Slider*, void*) {
  cbsldrVoxDelay();
}

Fl_Check_Button *btnAmpOnOff=(Fl_Check_Button *)0;

static void cb_btnAmpOnOff(Fl_Check_Button*, void*) {
  cbbtnAmpOnOff();
}

Fl_Slider *sldrXmtEqualizer=(Fl_Slider *)0;

static void cb_sldrXmtEqualizer(Fl_Slider*, void*) {
  cbsldrXmtEqualizer();
}

Fl_Return_Button *btnXmtParamOK=(Fl_Return_Button *)0;

static void cb_btnXmtParamOK(Fl_Return_Button*, void*) {
  closeXmtDialog();
}

Fl_Light_Button *btnVoxOnOff=(Fl_Light_Button *)0;

static void cb_btnVoxOnOff(Fl_Light_Button*, void*) {
  cbVoxOnOff();
}

Fl_Counter *cntTxOffset=(Fl_Counter *)0;

static void cb_cntTxOffset(Fl_Counter* o, void*) {
  xcvrState.TxOffset = (int)o->value();
adjustFreqs();
}

Fl_Double_Window* XmtParamDialog() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(360, 305, "Transmit Parameters");
    w = o;
    { sldrCompression = new Fl_Slider(90, 66, 265, 16, "0                                                       18dB");
      sldrCompression->type(1);
      sldrCompression->color((Fl_Color)246);
      sldrCompression->maximum(255);
      sldrCompression->step(1);
      sldrCompression->callback((Fl_Callback*)cb_sldrCompression);
      sldrCompression->align(FL_ALIGN_TOP_LEFT);
    } // Fl_Slider* sldrCompression
    { Fl_Box* o = new Fl_Box(2, 67, 85, 17, "Spch Comp:");
      o->align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE);
    } // Fl_Box* o
    { btnSpchProc = new Fl_Check_Button(90, 30, 25, 25, "On/Off");
      btnSpchProc->down_box(FL_DOWN_BOX);
      btnSpchProc->callback((Fl_Callback*)cb_btnSpchProc);
    } // Fl_Check_Button* btnSpchProc
    { Fl_Box* o = new Fl_Box(2, 34, 85, 17, "Spch Proc:");
      o->align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE);
    } // Fl_Box* o
    { btnSpchMon = new Fl_Check_Button(259, 30, 25, 25, "On/Off");
      btnSpchMon->down_box(FL_DOWN_BOX);
      btnSpchMon->callback((Fl_Callback*)cb_btnSpchMon);
    } // Fl_Check_Button* btnSpchMon
    { Fl_Box* o = new Fl_Box(171, 34, 85, 17, "Spch Mon:");
      o->align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE);
    } // Fl_Box* o
    { sldrSideTone = new Fl_Slider(90, 99, 265, 16, "Min                                                    Max");
      sldrSideTone->type(1);
      sldrSideTone->color((Fl_Color)246);
      sldrSideTone->maximum(255);
      sldrSideTone->step(1);
      sldrSideTone->callback((Fl_Callback*)cb_sldrSideTone);
      sldrSideTone->align(FL_ALIGN_TOP_LEFT);
    } // Fl_Slider* sldrSideTone
    { Fl_Box* o = new Fl_Box(2, 98, 85, 17, "Sidetone:");
      o->align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE);
    } // Fl_Box* o
    { sldrVoxLevel = new Fl_Slider(90, 138, 264, 16, "Min                      Level                     Max");
      sldrVoxLevel->type(1);
      sldrVoxLevel->color((Fl_Color)246);
      sldrVoxLevel->maximum(255);
      sldrVoxLevel->step(1);
      sldrVoxLevel->callback((Fl_Callback*)cb_sldrVoxLevel);
      sldrVoxLevel->align(FL_ALIGN_TOP_LEFT);
    } // Fl_Slider* sldrVoxLevel
    { sldrAntiVox = new Fl_Slider(88, 170, 265, 16, "Low                                                   High");
      sldrAntiVox->type(1);
      sldrAntiVox->color((Fl_Color)246);
      sldrAntiVox->maximum(255);
      sldrAntiVox->step(1);
      sldrAntiVox->callback((Fl_Callback*)cb_sldrAntiVox);
      sldrAntiVox->align(FL_ALIGN_TOP_LEFT);
    } // Fl_Slider* sldrAntiVox
    { Fl_Box* o = new Fl_Box(0, 169, 85, 17, "Anti Vox:");
      o->align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE);
    } // Fl_Box* o
    { sldrVoxDelay = new Fl_Slider(89, 202, 265, 16, "Short                                                Long");
      sldrVoxDelay->type(1);
      sldrVoxDelay->color((Fl_Color)246);
      sldrVoxDelay->maximum(255);
      sldrVoxDelay->step(1);
      sldrVoxDelay->callback((Fl_Callback*)cb_sldrVoxDelay);
      sldrVoxDelay->align(FL_ALIGN_TOP_LEFT);
    } // Fl_Slider* sldrVoxDelay
    { Fl_Box* o = new Fl_Box(1, 202, 85, 17, "Vox Delay:");
      o->align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE);
    } // Fl_Box* o
    { btnAmpOnOff = new Fl_Check_Button(86, 265, 25, 25, "On/Off");
      btnAmpOnOff->down_box(FL_DOWN_BOX);
      btnAmpOnOff->callback((Fl_Callback*)cb_btnAmpOnOff);
    } // Fl_Check_Button* btnAmpOnOff
    { Fl_Box* o = new Fl_Box(9, 269, 74, 17, "Amplifier:");
      o->align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE);
    } // Fl_Box* o
    { sldrXmtEqualizer = new Fl_Slider(89, 242, 265, 16, "Bass                                             Treble");
      sldrXmtEqualizer->type(1);
      sldrXmtEqualizer->color((Fl_Color)246);
      sldrXmtEqualizer->minimum(-128);
      sldrXmtEqualizer->maximum(127);
      sldrXmtEqualizer->step(1);
      sldrXmtEqualizer->callback((Fl_Callback*)cb_sldrXmtEqualizer);
      sldrXmtEqualizer->align(FL_ALIGN_TOP_LEFT);
    } // Fl_Slider* sldrXmtEqualizer
    { Fl_Box* o = new Fl_Box(1, 242, 85, 17, "Tx Equaliz:");
      o->align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE);
    } // Fl_Box* o
    { btnXmtParamOK = new Fl_Return_Button(275, 270, 80, 25, "OK");
      btnXmtParamOK->callback((Fl_Callback*)cb_btnXmtParamOK);
    } // Fl_Return_Button* btnXmtParamOK
    { btnVoxOnOff = new Fl_Light_Button(2, 135, 85, 20, "Vox on/off");
      btnVoxOnOff->tooltip("Enable / Disable VOX");
      btnVoxOnOff->callback((Fl_Callback*)cb_btnVoxOnOff);
    } // Fl_Light_Button* btnVoxOnOff
    { Fl_Counter* o = cntTxOffset = new Fl_Counter(289, 9, 63, 21, "Tx Offset (Hz):");
      cntTxOffset->type(1);
      cntTxOffset->minimum(-100);
      cntTxOffset->maximum(100);
      cntTxOffset->step(1);
      cntTxOffset->callback((Fl_Callback*)cb_cntTxOffset);
      cntTxOffset->align(FL_ALIGN_LEFT);
      o->value(xcvrState.TxOffset);
    } // Fl_Counter* cntTxOffset
    o->set_non_modal();
    o->end();
  } // Fl_Double_Window* o
  return w;
}

Fl_Return_Button *btnOkCommsDialog=(Fl_Return_Button *)0;

static void cb_btnOkCommsDialog(Fl_Return_Button*, void*) {
  cbOkCommsDialog();
}

Fl_Choice *selectCommPort=(Fl_Choice *)0;

Fl_Double_Window* CommsDialog() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(151, 94, "Select");
    w = o;
    o->box(FL_UP_BOX);
    { btnOkCommsDialog = new Fl_Return_Button(20, 55, 105, 25, "OK");
      btnOkCommsDialog->callback((Fl_Callback*)cb_btnOkCommsDialog);
    } // Fl_Return_Button* btnOkCommsDialog
    { selectCommPort = new Fl_Choice(20, 19, 105, 21, "tty Port:");
      selectCommPort->down_box(FL_BORDER_BOX);
      selectCommPort->align(FL_ALIGN_TOP_LEFT);
    } // Fl_Choice* selectCommPort
    o->set_modal();
    o->end();
  } // Fl_Double_Window* o
  return w;
}

Fl_Box *lblTest=(Fl_Box *)0;

Fl_Button *prefForeground=(Fl_Button *)0;

static void cb_prefForeground(Fl_Button*, void*) {
  cbPrefForeground();
}

Fl_Button *prefSelectColor=(Fl_Button *)0;

static void cb_prefSelectColor(Fl_Button*, void*) {
  cbSelectColor();
}

Fl_Button *prefBackground=(Fl_Button *)0;

static void cb_prefBackground(Fl_Button*, void*) {
  cbPrefBackground();
}

Fl_Box *lblSelect=(Fl_Box *)0;

Fl_Return_Button *btnOkDisplayDialog=(Fl_Return_Button *)0;

static void cb_btnOkDisplayDialog(Fl_Return_Button*, void*) {
  cbOkDisplayDialog();
}

Fl_Button *btnSmeterColor=(Fl_Button *)0;

static void cb_btnSmeterColor(Fl_Button*, void*) {
  cbSmeterColor();
}

Fl_Button *btnPowercolor=(Fl_Button *)0;

static void cb_btnPowercolor(Fl_Button*, void*) {
  cbPWRcolor();
}

Fl_Button *btnSWRcolor=(Fl_Button *)0;

static void cb_btnSWRcolor(Fl_Button*, void*) {
  cbSWRcolor();
}

Fl_Double_Window* DisplayDialog() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(340, 245, "Colors");
    w = o;
    { Fl_Group* o = new Fl_Group(194, 5, 136, 155, "Freq Disp");
      o->box(FL_ENGRAVED_FRAME);
      o->align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE);
      { Fl_Box* o = lblTest = new Fl_Box(212, 30, 40, 60, "8");
        lblTest->box(FL_DOWN_BOX);
        lblTest->color((Fl_Color)FL_FOREGROUND_COLOR);
        lblTest->selection_color((Fl_Color)FL_FOREGROUND_COLOR);
        lblTest->labelfont(4);
        lblTest->labelsize(56);
        lblTest->labelcolor((Fl_Color)167);
        o->labelsize(o->h()-8);
      } // Fl_Box* lblTest
      { prefForeground = new Fl_Button(207, 95, 50, 25, "Color");
        prefForeground->callback((Fl_Callback*)cb_prefForeground);
      } // Fl_Button* prefForeground
      { prefSelectColor = new Fl_Button(270, 95, 50, 25, "Select");
        prefSelectColor->callback((Fl_Callback*)cb_prefSelectColor);
      } // Fl_Button* prefSelectColor
      { prefBackground = new Fl_Button(207, 125, 50, 25, "Back");
        prefBackground->callback((Fl_Callback*)cb_prefBackground);
      } // Fl_Button* prefBackground
      { Fl_Box* o = lblSelect = new Fl_Box(275, 30, 40, 60, "8");
        lblSelect->box(FL_DOWN_BOX);
        lblSelect->color((Fl_Color)FL_FOREGROUND_COLOR);
        lblSelect->selection_color((Fl_Color)FL_FOREGROUND_COLOR);
        lblSelect->labelfont(4);
        lblSelect->labelsize(56);
        lblSelect->labelcolor((Fl_Color)167);
        o->labelsize(o->h()-8);
      } // Fl_Box* lblSelect
      o->end();
    } // Fl_Group* o
    { btnOkDisplayDialog = new Fl_Return_Button(230, 175, 60, 25, "OK");
      btnOkDisplayDialog->callback((Fl_Callback*)cb_btnOkDisplayDialog);
    } // Fl_Return_Button* btnOkDisplayDialog
    { Fl_Group* o = new Fl_Group(4, 5, 55, 231, "Smeter");
      o->box(FL_EMBOSSED_FRAME);
      o->align(FL_ALIGN_TOP|FL_ALIGN_INSIDE);
      { Fl_Button* o = btnSmeterColor = new Fl_Button(11, 27, 40, 200);
        btnSmeterColor->tooltip("Click on Image to adjust color");
        btnSmeterColor->box(FL_DOWN_BOX);
        btnSmeterColor->down_box(FL_FLAT_BOX);
        btnSmeterColor->color((Fl_Color)2);
        btnSmeterColor->selection_color((Fl_Color)2);
        btnSmeterColor->callback((Fl_Callback*)cb_btnSmeterColor);
        btnSmeterColor->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
        o->image(image_smeter);
        o->color(btnSmeter->color());
      } // Fl_Button* btnSmeterColor
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(64, 5, 55, 231, "Power");
      o->box(FL_EMBOSSED_FRAME);
      o->align(FL_ALIGN_TOP|FL_ALIGN_INSIDE);
      { Fl_Button* o = btnPowercolor = new Fl_Button(79, 27, 25, 200);
        btnPowercolor->tooltip("Click on Image to adjust color");
        btnPowercolor->box(FL_DOWN_BOX);
        btnPowercolor->down_box(FL_FLAT_BOX);
        btnPowercolor->color((Fl_Color)175);
        btnPowercolor->selection_color((Fl_Color)175);
        btnPowercolor->callback((Fl_Callback*)cb_btnPowercolor);
        btnPowercolor->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
        o->image(image_p150);
        o->color(btnPower->color());
      } // Fl_Button* btnPowercolor
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(129, 5, 55, 231, "SWR");
      o->box(FL_EMBOSSED_FRAME);
      o->align(FL_ALIGN_TOP|FL_ALIGN_INSIDE);
      { Fl_Button* o = btnSWRcolor = new Fl_Button(142, 27, 25, 200);
        btnSWRcolor->tooltip("Click on Image to adjust color");
        btnSWRcolor->box(FL_DOWN_BOX);
        btnSWRcolor->down_box(FL_FLAT_BOX);
        btnSWRcolor->color((Fl_Color)1);
        btnSWRcolor->selection_color((Fl_Color)1);
        btnSWRcolor->callback((Fl_Callback*)cb_btnSWRcolor);
        btnSWRcolor->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
        o->image(image_swr);
        o->color(btnSWR->color());
      } // Fl_Button* btnSWRcolor
      o->end();
    } // Fl_Group* o
    o->end();
  } // Fl_Double_Window* o
  return w;
}

Fl_Slider *sldrCWattack=(Fl_Slider *)0;

static void cb_sldrCWattack(Fl_Slider*, void*) {
  cbCWattack();
}

Fl_Slider *sldrCWweight=(Fl_Slider *)0;

static void cb_sldrCWweight(Fl_Slider*, void*) {
  cbCWweight();
}

Fl_Choice *mnuCWmode=(Fl_Choice *)0;

static void cb_mnuCWmode(Fl_Choice*, void*) {
  cbCWmode();
}

Fl_Choice *mnuCWdefFilter=(Fl_Choice *)0;

static void cb_mnuCWdefFilter(Fl_Choice*, void*) {
  cbCWdefFilter();
}

Fl_Choice *mnuCWoffset=(Fl_Choice *)0;

static void cb_mnuCWoffset(Fl_Choice*, void*) {
  cbCWoffset();
}

Fl_Check_Button *btnQSKonoff=(Fl_Check_Button *)0;

static void cb_btnQSKonoff(Fl_Check_Button*, void*) {
  cbQSKonoff();
}

Fl_Check_Button *btnCWspot=(Fl_Check_Button *)0;

static void cb_btnCWspot(Fl_Check_Button*, void*) {
  cbCWspot();
}

Fl_Return_Button *btnCwParamOK=(Fl_Return_Button *)0;

static void cb_btnCwParamOK(Fl_Return_Button*, void*) {
  closeCwParamDialog();
}

Fl_Double_Window* CwParamDialog() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(295, 210, "CW Parameters");
    w = o;
    { sldrCWattack = new Fl_Slider(15, 24, 265, 16, "Soft                                                    Hard");
      sldrCWattack->type(1);
      sldrCWattack->color((Fl_Color)246);
      sldrCWattack->maximum(255);
      sldrCWattack->step(1);
      sldrCWattack->value(127);
      sldrCWattack->callback((Fl_Callback*)cb_sldrCWattack);
      sldrCWattack->align(FL_ALIGN_TOP_LEFT);
    } // Fl_Slider* sldrCWattack
    { sldrCWweight = new Fl_Slider(15, 59, 265, 16, "Light                                                Heavy");
      sldrCWweight->type(1);
      sldrCWweight->color((Fl_Color)246);
      sldrCWweight->maximum(255);
      sldrCWweight->step(1);
      sldrCWweight->value(127);
      sldrCWweight->callback((Fl_Callback*)cb_sldrCWweight);
      sldrCWweight->align(FL_ALIGN_TOP_LEFT);
    } // Fl_Slider* sldrCWweight
    { Fl_Choice* o = mnuCWmode = new Fl_Choice(15, 95, 100, 24, "Mode");
      mnuCWmode->down_box(FL_BORDER_BOX);
      mnuCWmode->callback((Fl_Callback*)cb_mnuCWmode);
      mnuCWmode->align(FL_ALIGN_TOP_LEFT);
      o->add("Left|Right|Straight");
      o->value(1);
    } // Fl_Choice* mnuCWmode
    { Fl_Choice* o = mnuCWdefFilter = new Fl_Choice(140, 96, 100, 24, "Default Filter");
      mnuCWdefFilter->down_box(FL_BORDER_BOX);
      mnuCWdefFilter->callback((Fl_Callback*)cb_mnuCWdefFilter);
      mnuCWdefFilter->align(FL_ALIGN_TOP_LEFT);
      o->add("Wide|Narrow");
      o->value(1);
    } // Fl_Choice* mnuCWdefFilter
    { Fl_Choice* o = mnuCWoffset = new Fl_Choice(14, 136, 100, 24, "Offset");
      mnuCWoffset->down_box(FL_BORDER_BOX);
      mnuCWoffset->callback((Fl_Callback*)cb_mnuCWoffset);
      mnuCWoffset->align(FL_ALIGN_TOP_LEFT);
      o->add("300|400|500|600|700|800");
      o->value(4);
    } // Fl_Choice* mnuCWoffset
    { btnQSKonoff = new Fl_Check_Button(140, 135, 100, 25, "QSK on/off");
      btnQSKonoff->down_box(FL_DOWN_BOX);
      btnQSKonoff->callback((Fl_Callback*)cb_btnQSKonoff);
    } // Fl_Check_Button* btnQSKonoff
    { btnCWspot = new Fl_Check_Button(185, 135, 100, 25, "Spot on/off");
      btnCWspot->down_box(FL_DOWN_BOX);
      btnCWspot->callback((Fl_Callback*)cb_btnCWspot);
      btnCWspot->hide();
      btnCWspot->deactivate();
    } // Fl_Check_Button* btnCWspot
    { btnCwParamOK = new Fl_Return_Button(195, 170, 80, 25, "OK");
      btnCwParamOK->callback((Fl_Callback*)cb_btnCwParamOK);
    } // Fl_Return_Button* btnCwParamOK
    o->end();
  } // Fl_Double_Window* o
  return w;
}

Fl_Input *txtFreqRange=(Fl_Input *)0;

Fl_Button *btnRcvAnt=(Fl_Button *)0;

static void cb_btnRcvAnt(Fl_Button*, void*) {
  if (btnRcvAnt->value() == 1) btnRcvAnt->label("B");
else btnRcvAnt->label("A");
}

Fl_Button *btnXmtAnt=(Fl_Button *)0;

static void cb_btnXmtAnt(Fl_Button*, void*) {
  if (btnXmtAnt->value() == 1) btnXmtAnt->label("B");
else btnXmtAnt->label("A");
}

Fl_Browser *brwsAntRanges=(Fl_Browser *)0;

static void cb_brwsAntRanges(Fl_Browser*, void*) {
  cbbrwsAntRanges();
}

Fl_Button *btnAddAntRange=(Fl_Button *)0;

static void cb_btnAddAntRange(Fl_Button*, void*) {
  cbAddAntRange();
}

Fl_Button *btnDeleteAntRange=(Fl_Button *)0;

static void cb_btnDeleteAntRange(Fl_Button*, void*) {
  cbDeleteAntRange();
}

Fl_Return_Button *btnAntRangeDialogOK=(Fl_Return_Button *)0;

static void cb_btnAntRangeDialogOK(Fl_Return_Button*, void*) {
  cbAntRangeDialogOK();
}

Fl_Double_Window* FreqRangesDialog() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(260, 170, "Antenna Port Setup");
    w = o;
    { txtFreqRange = new Fl_Input(4, 25, 75, 25);
      txtFreqRange->tooltip("Enter Start Freq in KHz");
      txtFreqRange->type(2);
      txtFreqRange->textfont(13);
      txtFreqRange->align(FL_ALIGN_TOP_LEFT);
    } // Fl_Input* txtFreqRange
    { btnRcvAnt = new Fl_Button(82, 25, 30, 25, "A");
      btnRcvAnt->type(1);
      btnRcvAnt->down_box(FL_UP_BOX);
      btnRcvAnt->labelfont(1);
      btnRcvAnt->callback((Fl_Callback*)cb_btnRcvAnt);
    } // Fl_Button* btnRcvAnt
    { btnXmtAnt = new Fl_Button(112, 25, 30, 25, "A");
      btnXmtAnt->type(1);
      btnXmtAnt->down_box(FL_UP_BOX);
      btnXmtAnt->labelfont(1);
      btnXmtAnt->callback((Fl_Callback*)cb_btnXmtAnt);
    } // Fl_Button* btnXmtAnt
    { new Fl_Box(79, 5, 30, 20, "Rcv");
    } // Fl_Box* o
    { new Fl_Box(110, 5, 30, 20, "Xmt");
    } // Fl_Box* o
    { brwsAntRanges = new Fl_Browser(147, 5, 108, 160);
      brwsAntRanges->type(2);
      brwsAntRanges->labelfont(4);
      brwsAntRanges->textfont(13);
      brwsAntRanges->callback((Fl_Callback*)cb_brwsAntRanges);
    } // Fl_Browser* brwsAntRanges
    { btnAddAntRange = new Fl_Button(70, 55, 72, 25, "Add @>|");
      btnAddAntRange->callback((Fl_Callback*)cb_btnAddAntRange);
      btnAddAntRange->align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE);
    } // Fl_Button* btnAddAntRange
    { btnDeleteAntRange = new Fl_Button(70, 83, 72, 25, "Delete @#2|>");
      btnDeleteAntRange->callback((Fl_Callback*)cb_btnDeleteAntRange);
      btnDeleteAntRange->align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE);
    } // Fl_Button* btnDeleteAntRange
    { btnAntRangeDialogOK = new Fl_Return_Button(10, 135, 85, 25, "OK");
      btnAntRangeDialogOK->callback((Fl_Callback*)cb_btnAntRangeDialogOK);
    } // Fl_Return_Button* btnAntRangeDialogOK
    { new Fl_Box(1, 5, 75, 20, "Freq kHz");
    } // Fl_Box* o
    o->set_modal();
    o->end();
  } // Fl_Double_Window* o
  return w;
}

Fl_Text_Display *txtViewLog=(Fl_Text_Display *)0;

Fl_Double_Window* ViewLogDialog() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(500, 130, "Serial Log");
    w = o;
    { txtViewLog = new Fl_Text_Display(0, 0, 500, 130);
      txtViewLog->textfont(13);
      txtViewLog->textsize(12);
    } // Fl_Text_Display* txtViewLog
    o->end();
  } // Fl_Double_Window* o
  return w;
}

Fl_Text_Display *txtDataDisp=(Fl_Text_Display *)0;

Fl_Return_Button *btnNRAMok=(Fl_Return_Button *)0;

static void cb_btnNRAMok(Fl_Return_Button*, void*) {
  cbNRAMok();
}

Fl_Button *btnAntImpData=(Fl_Button *)0;

static void cb_btnAntImpData(Fl_Button*, void*) {
  cbNRAMAntImp();
}

Fl_Button *btnSmeterData=(Fl_Button *)0;

static void cb_btnSmeterData(Fl_Button*, void*) {
  cbNRAMsmeter();
}

Fl_Button *btnFreqRefData=(Fl_Button *)0;

static void cb_btnFreqRefData(Fl_Button*, void*) {
  cbNRAMFreqRef();
}

Fl_Button *btnPhaseDet=(Fl_Button *)0;

static void cb_btnPhaseDet(Fl_Button*, void*) {
  cbNRAMPhase();
}

Fl_Button *btnCarrierData=(Fl_Button *)0;

static void cb_btnCarrierData(Fl_Button*, void*) {
  cbNRAMCarrier();
}

Fl_Button *btnAllData=(Fl_Button *)0;

static void cb_btnAllData(Fl_Button*, void*) {
  cbNRAMAll();
}

Fl_Button *btnSaveData=(Fl_Button *)0;

static void cb_btnSaveData(Fl_Button*, void*) {
  cbNRAMSave();
}

Fl_Button *btnRestoreData=(Fl_Button *)0;

static void cb_btnRestoreData(Fl_Button*, void*) {
  cbNRAMRestore();
}

Fl_Button *btnClearData=(Fl_Button *)0;

static void cb_btnClearData(Fl_Button*, void*) {
  cbNRAMClearText();
}

Fl_Double_Window* NRAMdataDialog() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(400, 230, "NRAM critical data");
    w = o;
    { txtDataDisp = new Fl_Text_Display(1, 3, 395, 170);
    } // Fl_Text_Display* txtDataDisp
    { btnNRAMok = new Fl_Return_Button(319, 201, 75, 25, "OK");
      btnNRAMok->callback((Fl_Callback*)cb_btnNRAMok);
    } // Fl_Return_Button* btnNRAMok
    { btnAntImpData = new Fl_Button(0, 176, 60, 25, "AntIMp");
      btnAntImpData->callback((Fl_Callback*)cb_btnAntImpData);
    } // Fl_Button* btnAntImpData
    { btnSmeterData = new Fl_Button(60, 176, 60, 25, "Smeter");
      btnSmeterData->callback((Fl_Callback*)cb_btnSmeterData);
    } // Fl_Button* btnSmeterData
    { btnFreqRefData = new Fl_Button(120, 176, 60, 25, "FreqRef");
      btnFreqRefData->callback((Fl_Callback*)cb_btnFreqRefData);
    } // Fl_Button* btnFreqRefData
    { btnPhaseDet = new Fl_Button(0, 201, 60, 25, "Phase");
      btnPhaseDet->callback((Fl_Callback*)cb_btnPhaseDet);
    } // Fl_Button* btnPhaseDet
    { btnCarrierData = new Fl_Button(60, 201, 60, 25, "Carrier");
      btnCarrierData->callback((Fl_Callback*)cb_btnCarrierData);
    } // Fl_Button* btnCarrierData
    { btnAllData = new Fl_Button(120, 201, 60, 25, "All");
      btnAllData->callback((Fl_Callback*)cb_btnAllData);
    } // Fl_Button* btnAllData
    { btnSaveData = new Fl_Button(188, 201, 60, 25, "Save");
      btnSaveData->tooltip("Save to file: NRAMdata.txt");
      btnSaveData->callback((Fl_Callback*)cb_btnSaveData);
    } // Fl_Button* btnSaveData
    { btnRestoreData = new Fl_Button(254, 200, 60, 25, "Restore");
      btnRestoreData->callback((Fl_Callback*)cb_btnRestoreData);
      btnRestoreData->hide();
    } // Fl_Button* btnRestoreData
    { btnClearData = new Fl_Button(188, 175, 60, 25, "Clr Txt");
      btnClearData->callback((Fl_Callback*)cb_btnClearData);
    } // Fl_Button* btnClearData
    o->end();
  } // Fl_Double_Window* o
  return w;
}

Fl_Counter *cntrFreqStd=(Fl_Counter *)0;

Fl_Button *btnCalibrate=(Fl_Button *)0;

static void cb_btnCalibrate(Fl_Button*, void*) {
  cbCalibrate();
}

Fl_Button *btnCalFinished=(Fl_Button *)0;

static void cb_btnCalFinished(Fl_Button*, void*) {
  cbCalFinished();
}

Fl_Double_Window* FreqCalibDialog() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(285, 62, "Calibrate to Freq Std");
    w = o;
    { cntrFreqStd = new Fl_Counter(15, 15, 80, 20, "Freq. Std.");
      cntrFreqStd->minimum(5);
      cntrFreqStd->maximum(15);
      cntrFreqStd->value(10);
    } // Fl_Counter* cntrFreqStd
    { btnCalibrate = new Fl_Button(120, 15, 64, 20, "Calibrate");
      btnCalibrate->callback((Fl_Callback*)cb_btnCalibrate);
    } // Fl_Button* btnCalibrate
    { btnCalFinished = new Fl_Button(205, 15, 64, 20, "Finished");
      btnCalFinished->callback((Fl_Callback*)cb_btnCalFinished);
    } // Fl_Button* btnCalFinished
    o->end();
  } // Fl_Double_Window* o
  return w;
}
