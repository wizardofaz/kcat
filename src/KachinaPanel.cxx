// generated by Fast Light User Interface Designer (fluid) version 1.0110

#include "gettext.h"
#include "KachinaPanel.h"
#include "images.h"
#include "Kachina.h"
#include "support.h"

static void cb_mnuOpen(Fl_Menu_*, void*) {
  openFreqList();
}

static void cb_mnuSave(Fl_Menu_*, void*) {
  saveFreqList();
}

static void cb_mnuExit(Fl_Menu_*, void*) {
  cbExit();
}

static void cb_mnuViewLog(Fl_Menu_*, void*) {
  cbViewLog();
}

static void cb_mnuPreferences(Fl_Menu_*, void*) {
  setDisplayColors();
}

static void cb_mnuAntPorts(Fl_Menu_*, void*) {
  cbmnuAntPorts();
}

static void cb_mnuFreqCal(Fl_Menu_*, void*) {
  openFreqCalibDialog();
}

static void cb_mnuClearAntData(Fl_Menu_*, void*) {
  cbClearAntData();
}

static void cb_mnuNRAMdata(Fl_Menu_*, void*) {
  cbNRAM();
}

static void cb_mnuAbout(Fl_Menu_*, void*) {
  about();
}

Fl_Menu_Item menu_[] = {
 {_("&Files"), 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 12, 0},
 {_("&Open"), 0,  (Fl_Callback*)cb_mnuOpen, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {_("&Save"), 0,  (Fl_Callback*)cb_mnuSave, 0, 128, FL_NORMAL_LABEL, 0, 12, 0},
 {_("E&xit"), 0,  (Fl_Callback*)cb_mnuExit, 0, 128, FL_NORMAL_LABEL, 0, 12, 0},
 {_("View Log"), 0,  (Fl_Callback*)cb_mnuViewLog, 0, 2, FL_NORMAL_LABEL, 0, 12, 0},
 {0,0,0,0,0,0,0,0,0},
 {_("&Config"), 0,  0, 0, 192, FL_NORMAL_LABEL, 0, 12, 0},
 {_("&Display Colors"), 0,  (Fl_Callback*)cb_mnuPreferences, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {_("Antenna Ports"), 0,  (Fl_Callback*)cb_mnuAntPorts, 0, 128, FL_NORMAL_LABEL, 0, 12, 0},
 {0,0,0,0,0,0,0,0,0},
 {_("Utils"), 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 12, 0},
 {_("&Ant Imped"), 0,  0, 0, 16, FL_NORMAL_LABEL, 0, 12, 0},
 {_("&FreqCal"), 0,  (Fl_Callback*)cb_mnuFreqCal, 0, 128, FL_NORMAL_LABEL, 0, 12, 0},
 {_("Clear Ant\' Data"), 0,  (Fl_Callback*)cb_mnuClearAntData, 0, 128, FL_NORMAL_LABEL, 0, 12, 0},
 {_("&NRAM data"), 0,  (Fl_Callback*)cb_mnuNRAMdata, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {0,0,0,0,0,0,0,0,0},
 {_("                        "), 0,  0, 0, 193, FL_NO_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {_("&Help"), 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 12, 0},
 {_("&About"), 0,  (Fl_Callback*)cb_mnuAbout, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0}
};

cFreqControl *FreqDisp=(cFreqControl *)0;

cFreqControl *FreqDispB=(cFreqControl *)0;

Fl_Browser *FreqSelect=(Fl_Browser *)0;

static void cb_FreqSelect(Fl_Browser*, void*) {
  if (FreqSelect->value())
selectFreq();
}

Fl_Button *btnABactive=(Fl_Button *)0;

static void cb_btnABactive(Fl_Button*, void*) {
  cbABactive();
}

Fl_Button *btnA2B=(Fl_Button *)0;

static void cb_btnA2B(Fl_Button*, void*) {
  cbA2B();
}

Fl_Light_Button *btnSplit=(Fl_Light_Button *)0;

static void cb_btnSplit(Fl_Light_Button*, void*) {
  cbABsplit();
}

Fl_Button *btnAddFreq=(Fl_Button *)0;

static void cb_btnAddFreq(Fl_Button*, void*) {
  addFreq();
}

Fl_Button *btnDelFreq=(Fl_Button *)0;

static void cb_btnDelFreq(Fl_Button*, void*) {
  delFreq();
}

Fl_Button *btnClearList=(Fl_Button *)0;

static void cb_btnClearList(Fl_Button*, void*) {
  clearList();
}

Fl_Value_Slider *sldrRIT=(Fl_Value_Slider *)0;

static void cb_sldrRIT(Fl_Value_Slider*, void*) {
  cbRIT();
}

Fl_Value_Slider *sldrVOLUME=(Fl_Value_Slider *)0;

static void cb_sldrVOLUME(Fl_Value_Slider*, void*) {
  setVolume();
}

Fl_Value_Slider *sldrIFSHIFT=(Fl_Value_Slider *)0;

static void cb_sldrIFSHIFT(Fl_Value_Slider*, void*) {
  setIFshift();
}

Fl_Value_Slider *sldrNOTCH=(Fl_Value_Slider *)0;

static void cb_sldrNOTCH(Fl_Value_Slider*, void*) {
  setNotch();
}

Fl_Value_Slider *sldrDepth=(Fl_Value_Slider *)0;

static void cb_sldrDepth(Fl_Value_Slider*, void*) {
  cbDepth();
}

Fl_Value_Slider *sldrNR=(Fl_Value_Slider *)0;

static void cb_sldrNR(Fl_Value_Slider*, void*) {
  cbNR();
}

Fl_Choice *opMODE=(Fl_Choice *)0;

static void cb_opMODE(Fl_Choice*, void*) {
  setMode();
}

Fl_Choice *opBW=(Fl_Choice *)0;

static void cb_opBW(Fl_Choice*, void*) {
  setBW();
}

Fl_Choice *opNOTCH=(Fl_Choice *)0;

static void cb_opNOTCH(Fl_Choice*, void*) {
  setNotchWidth();
}

Fl_Value_Slider *sldrMICGAIN=(Fl_Value_Slider *)0;

static void cb_sldrMICGAIN(Fl_Value_Slider*, void*) {
  setMicGain();
}

Fl_Value_Slider *sldrPOWER=(Fl_Value_Slider *)0;

static void cb_sldrPOWER(Fl_Value_Slider*, void*) {
  setPower();
}

Fl_Light_Button *btnRIT=(Fl_Light_Button *)0;

static void cb_btnRIT(Fl_Light_Button*, void*) {
  cbbtnRIT();
}

Fl_Light_Button *btnMute=(Fl_Light_Button *)0;

static void cb_btnMute(Fl_Light_Button*, void*) {
  cbMute();
}

Fl_Light_Button *btnIFsh=(Fl_Light_Button *)0;

static void cb_btnIFsh(Fl_Light_Button*, void*) {
  cbIFsh();
}

Fl_Light_Button *btnNotch=(Fl_Light_Button *)0;

static void cb_btnNotch(Fl_Light_Button*, void*) {
  cbbtnNotch();
}

Fl_Light_Button *btnNR=(Fl_Light_Button *)0;

static void cb_btnNR(Fl_Light_Button*, void*) {
  cbbtnNR();
}

Fl_Light_Button *btnAttenuator=(Fl_Light_Button *)0;

static void cb_btnAttenuator(Fl_Light_Button*, void*) {
  cbAttenuator();
}

Fl_Light_Button *btnPreamp=(Fl_Light_Button *)0;

static void cb_btnPreamp(Fl_Light_Button*, void*) {
  cbPreamp();
}

Fl_Button *btnSmeter=(Fl_Button *)0;

static void cb_btnSmeter(Fl_Button*, void*) {
  cbSmeter();
}

Fl_SigBar *sldrRcvSignal=(Fl_SigBar *)0;

Fl_Slider *sldrSQdisp=(Fl_Slider *)0;

Fl_Box *boxSquelch=(Fl_Box *)0;

Fl_Button *btnPower=(Fl_Button *)0;

static void cb_btnPower(Fl_Button*, void*) {
  cbPWR();
}

Fl_SigBar *sldrFwdPwr=(Fl_SigBar *)0;

Fl_Button *btnSWR=(Fl_Button *)0;

static void cb_btnSWR(Fl_Button*, void*) {
  cbSWR();
}

Fl_SigBar *sldrRefPwr=(Fl_SigBar *)0;

Fl_Button *btn_show_controls=(Fl_Button *)0;

static void cb_btn_show_controls(Fl_Button*, void*) {
  show_controls();
}

Fl_Light_Button *btnPTT=(Fl_Light_Button *)0;

static void cb_btnPTT(Fl_Light_Button*, void*) {
  cbPTT();
}

Fl_Light_Button *btnTune=(Fl_Light_Button *)0;

static void cb_btnTune(Fl_Light_Button*, void*) {
  cbTune();
}

Fl_Light_Button *btnCarrier=(Fl_Light_Button *)0;

static void cb_btnCarrier(Fl_Light_Button*, void*) {
  cbCarrier();
}

Fl_Check_Button *btnSelAnt=(Fl_Check_Button *)0;

static void cb_btnSelAnt(Fl_Check_Button*, void*) {
  movFreq();
}

Fl_Button *btnRxAnt=(Fl_Button *)0;

static void cb_btnRxAnt(Fl_Button*, void*) {
  cbRxAnt();
}

Fl_Button *btnTxAnt=(Fl_Button *)0;

static void cb_btnTxAnt(Fl_Button*, void*) {
  cbTxAnt();
}

Fl_Output *txtTEMP=(Fl_Output *)0;

static void cb_txtTEMP(Fl_Output*, void*) {
  cbTemp();
}

Fl_Tabs *tabs=(Fl_Tabs *)0;

Fl_Group *CWtab=(Fl_Group *)0;

Fl_Counter *cntrWPM=(Fl_Counter *)0;

static void cb_cntrWPM(Fl_Counter*, void*) {
  cbWPM();
}

Fl_Counter *sldrCWweight=(Fl_Counter *)0;

static void cb_sldrCWweight(Fl_Counter*, void*) {
  cbCWweight();
}

Fl_Counter *sldrCWattack=(Fl_Counter *)0;

static void cb_sldrCWattack(Fl_Counter*, void*) {
  cbCWattack();
}

Fl_Choice *mnuCWmode=(Fl_Choice *)0;

static void cb_mnuCWmode(Fl_Choice*, void*) {
  cbCWmode();
}

Fl_Check_Button *btnQSKonoff=(Fl_Check_Button *)0;

static void cb_btnQSKonoff(Fl_Check_Button*, void*) {
  cbQSKonoff();
}

Fl_Group *CW2tab=(Fl_Group *)0;

Fl_Counter *sldrSideTone=(Fl_Counter *)0;

static void cb_sldrSideTone(Fl_Counter*, void*) {
  cbSidetone();
}

Fl_Choice *mnuCWoffset=(Fl_Choice *)0;

static void cb_mnuCWoffset(Fl_Choice*, void*) {
  cbCWoffset();
}

Fl_Choice *mnuCWdefFilter=(Fl_Choice *)0;

static void cb_mnuCWdefFilter(Fl_Choice*, void*) {
  cbCWdefFilter();
}

Fl_Group *VOXtab=(Fl_Group *)0;

Fl_Counter *sldrVoxLevel=(Fl_Counter *)0;

static void cb_sldrVoxLevel(Fl_Counter*, void*) {
  cbsldrVoxLevel();
}

Fl_Counter *sldrAntiVox=(Fl_Counter *)0;

static void cb_sldrAntiVox(Fl_Counter*, void*) {
  cbsldrAntiVox();
}

Fl_Counter *sldrVoxDelay=(Fl_Counter *)0;

static void cb_sldrVoxDelay(Fl_Counter*, void*) {
  cbsldrVoxDelay();
}

Fl_Light_Button *btnVoxOnOff=(Fl_Light_Button *)0;

static void cb_btnVoxOnOff(Fl_Light_Button*, void*) {
  cbVoxOnOff();
}

Fl_Group *SPCHtab=(Fl_Group *)0;

Fl_Counter *MonVol=(Fl_Counter *)0;

Fl_Light_Button *btnSpchMon=(Fl_Light_Button *)0;

static void cb_btnSpchMon(Fl_Light_Button*, void*) {
  cbSpchMon();
}

Fl_Counter *sldrCompression=(Fl_Counter *)0;

static void cb_sldrCompression(Fl_Counter*, void*) {
  cbsldrCompression();
}

Fl_Light_Button *btnSpchProc=(Fl_Light_Button *)0;

static void cb_btnSpchProc(Fl_Light_Button*, void*) {
  cbbtnSpchProc();
}

Fl_Group *RXtab=(Fl_Group *)0;

Fl_Counter *sldrSqlLevel=(Fl_Counter *)0;

static void cb_sldrSqlLevel(Fl_Counter*, void*) {
  cbSqlLevel();
}

static void cb_btnSQLtype(Fl_Round_Button*, void*) {
  btnSQLtype[1]->value(0);
cbSQLtype();
}

Fl_Counter *sldrAgcAction=(Fl_Counter *)0;

static void cb_sldrAgcAction(Fl_Counter*, void*) {
  cbsldrAgcAction();
}

Fl_Counter *sldrAgcSpeed=(Fl_Counter *)0;

static void cb_sldrAgcSpeed(Fl_Counter*, void*) {
  cbsldrAgcSpeed();
}

Fl_Round_Button *btnSQLtype[2]={(Fl_Round_Button *)0};

static void cb_btnSQLtype1(Fl_Round_Button*, void*) {
  btnSQLtype[0]->value(0);
cbSQLtype();
}

Fl_Group *TXtab=(Fl_Group *)0;

Fl_Check_Button *btnAmpOnOff=(Fl_Check_Button *)0;

static void cb_btnAmpOnOff(Fl_Check_Button*, void*) {
  cbbtnAmpOnOff();
}

Fl_Check_Button *tuner_bypass=(Fl_Check_Button *)0;

Fl_Counter *sldrXmtEqualizer=(Fl_Counter *)0;

static void cb_sldrXmtEqualizer(Fl_Counter*, void*) {
  cbsldrXmtEqualizer();
}

Fl_Group *OSCtab=(Fl_Group *)0;

Fl_Counter *ctr_vfo_adj=(Fl_Counter *)0;

static void cb_ctr_vfo_adj(Fl_Counter*, void*) {
  cb_vfo_adj();
}

Fl_Double_Window* Kachina_window() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(500, 355, _("Kachina CAT"));
    w = o;
    o->color((Fl_Color)51);
    { Fl_Menu_Bar* o = new Fl_Menu_Bar(2, 2, 290, 20);
      o->labelsize(12);
      o->textsize(12);
      o->menu(menu_);
    } // Fl_Menu_Bar* o
    { cFreqControl* o = FreqDisp = new cFreqControl(1, 25, 175, 40, _("8"));
      FreqDisp->tooltip(_("Set Frequency"));
      FreqDisp->box(FL_DOWN_BOX);
      FreqDisp->color((Fl_Color)FL_BACKGROUND_COLOR);
      FreqDisp->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
      FreqDisp->labeltype(FL_NORMAL_LABEL);
      FreqDisp->labelfont(0);
      FreqDisp->labelsize(14);
      FreqDisp->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
      FreqDisp->align(FL_ALIGN_CENTER);
      FreqDisp->when(FL_WHEN_RELEASE);
      o->SetONOFFCOLOR (FL_YELLOW, FL_BLACK);
      o->setCallBack(movFreq);
    } // cFreqControl* FreqDisp
    { cFreqControl* o = FreqDispB = new cFreqControl(177, 25, 175, 40, _("8"));
      FreqDispB->tooltip(_("Set Frequency"));
      FreqDispB->box(FL_DOWN_BOX);
      FreqDispB->color((Fl_Color)FL_BACKGROUND_COLOR);
      FreqDispB->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
      FreqDispB->labeltype(FL_NORMAL_LABEL);
      FreqDispB->labelfont(0);
      FreqDispB->labelsize(14);
      FreqDispB->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
      FreqDispB->align(FL_ALIGN_CENTER);
      FreqDispB->when(FL_WHEN_RELEASE);
      o->SetONOFFCOLOR (FL_YELLOW, FL_BLACK);
      o->setCallBack(movFreqB);
    } // cFreqControl* FreqDispB
    { FreqSelect = new Fl_Browser(354, 2, 144, 65);
      FreqSelect->tooltip(_("Select operating frequency/mode"));
      FreqSelect->type(2);
      FreqSelect->labelfont(4);
      FreqSelect->labelsize(12);
      FreqSelect->textfont(13);
      FreqSelect->textsize(12);
      FreqSelect->callback((Fl_Callback*)cb_FreqSelect);
    } // Fl_Browser* FreqSelect
    { btnABactive = new Fl_Button(1, 68, 55, 20, _("A / B"));
      btnABactive->tooltip(_("Select active VFO"));
      btnABactive->callback((Fl_Callback*)cb_btnABactive);
    } // Fl_Button* btnABactive
    { btnA2B = new Fl_Button(80, 68, 55, 20, _("A -> B"));
      btnA2B->tooltip(_("Active -> Inactive"));
      btnA2B->callback((Fl_Callback*)cb_btnA2B);
    } // Fl_Button* btnA2B
    { btnSplit = new Fl_Light_Button(160, 68, 55, 20, _("Split"));
      btnSplit->tooltip(_("Rcv-active Xmt-inactive"));
      btnSplit->callback((Fl_Callback*)cb_btnSplit);
    } // Fl_Light_Button* btnSplit
    { btnAddFreq = new Fl_Button(240, 68, 20, 20, _("@|>"));
      btnAddFreq->tooltip(_("Add to list"));
      btnAddFreq->box(FL_PLASTIC_UP_BOX);
      btnAddFreq->labelsize(10);
      btnAddFreq->callback((Fl_Callback*)cb_btnAddFreq);
    } // Fl_Button* btnAddFreq
    { btnDelFreq = new Fl_Button(285, 68, 18, 20, _("@1+"));
      btnDelFreq->tooltip(_("Delete from list"));
      btnDelFreq->box(FL_PLASTIC_UP_BOX);
      btnDelFreq->labelsize(10);
      btnDelFreq->callback((Fl_Callback*)cb_btnDelFreq);
    } // Fl_Button* btnDelFreq
    { btnClearList = new Fl_Button(328, 68, 20, 20, _("@-1square"));
      btnClearList->tooltip(_("Clear list"));
      btnClearList->box(FL_PLASTIC_UP_BOX);
      btnClearList->labelsize(10);
      btnClearList->callback((Fl_Callback*)cb_btnClearList);
    } // Fl_Button* btnClearList
    { sldrRIT = new Fl_Value_Slider(2, 90, 295, 18);
      sldrRIT->tooltip(_("RIT (-790 to 790 Hz)"));
      sldrRIT->type(5);
      sldrRIT->color((Fl_Color)26);
      sldrRIT->labeltype(FL_NO_LABEL);
      sldrRIT->minimum(-790);
      sldrRIT->maximum(790);
      sldrRIT->step(10);
      sldrRIT->textsize(14);
      sldrRIT->callback((Fl_Callback*)cb_sldrRIT);
      sldrRIT->align(FL_ALIGN_RIGHT);
      sldrRIT->deactivate();
    } // Fl_Value_Slider* sldrRIT
    { sldrVOLUME = new Fl_Value_Slider(2, 111, 295, 18, _("Audio Volume"));
      sldrVOLUME->tooltip(_("Audio output volume"));
      sldrVOLUME->type(5);
      sldrVOLUME->color((Fl_Color)26);
      sldrVOLUME->labeltype(FL_NO_LABEL);
      sldrVOLUME->value(0.2);
      sldrVOLUME->textsize(14);
      sldrVOLUME->callback((Fl_Callback*)cb_sldrVOLUME);
      sldrVOLUME->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
    } // Fl_Value_Slider* sldrVOLUME
    { sldrIFSHIFT = new Fl_Value_Slider(2, 132, 295, 18);
      sldrIFSHIFT->tooltip(_("Set IF Shift Frequency"));
      sldrIFSHIFT->type(5);
      sldrIFSHIFT->color((Fl_Color)26);
      sldrIFSHIFT->labeltype(FL_NO_LABEL);
      sldrIFSHIFT->minimum(-1280);
      sldrIFSHIFT->maximum(1270);
      sldrIFSHIFT->step(10);
      sldrIFSHIFT->textsize(14);
      sldrIFSHIFT->callback((Fl_Callback*)cb_sldrIFSHIFT);
      sldrIFSHIFT->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
      sldrIFSHIFT->deactivate();
    } // Fl_Value_Slider* sldrIFSHIFT
    { sldrNOTCH = new Fl_Value_Slider(2, 152, 295, 18);
      sldrNOTCH->tooltip(_("Set Notch Frequency"));
      sldrNOTCH->type(5);
      sldrNOTCH->color((Fl_Color)26);
      sldrNOTCH->labeltype(FL_NO_LABEL);
      sldrNOTCH->minimum(200);
      sldrNOTCH->maximum(2750);
      sldrNOTCH->step(10);
      sldrNOTCH->textsize(14);
      sldrNOTCH->callback((Fl_Callback*)cb_sldrNOTCH);
      sldrNOTCH->align(FL_ALIGN_CENTER);
    } // Fl_Value_Slider* sldrNOTCH
    { sldrDepth = new Fl_Value_Slider(2, 152, 295, 18);
      sldrDepth->tooltip(_("Set Notch Depth"));
      sldrDepth->type(5);
      sldrDepth->color((Fl_Color)26);
      sldrDepth->labeltype(FL_NO_LABEL);
      sldrDepth->maximum(100);
      sldrDepth->step(1);
      sldrDepth->value(50);
      sldrDepth->textsize(14);
      sldrDepth->callback((Fl_Callback*)cb_sldrDepth);
      sldrDepth->align(FL_ALIGN_CENTER);
      sldrDepth->hide();
    } // Fl_Value_Slider* sldrDepth
    { sldrNR = new Fl_Value_Slider(2, 173, 295, 18);
      sldrNR->tooltip(_("Noise Reduction (min -> max)"));
      sldrNR->type(5);
      sldrNR->color((Fl_Color)26);
      sldrNR->labeltype(FL_NO_LABEL);
      sldrNR->maximum(255);
      sldrNR->step(1);
      sldrNR->textsize(14);
      sldrNR->callback((Fl_Callback*)cb_sldrNR);
      sldrNR->align(FL_ALIGN_RIGHT);
      sldrNR->deactivate();
    } // Fl_Value_Slider* sldrNR
    { opMODE = new Fl_Choice(2, 194, 70, 20);
      opMODE->tooltip(_("Select Mode"));
      opMODE->down_box(FL_BORDER_BOX);
      opMODE->callback((Fl_Callback*)cb_opMODE);
    } // Fl_Choice* opMODE
    { opBW = new Fl_Choice(78, 194, 70, 20);
      opBW->tooltip(_("Select Bandwidth"));
      opBW->down_box(FL_BORDER_BOX);
      opBW->callback((Fl_Callback*)cb_opBW);
    } // Fl_Choice* opBW
    { opNOTCH = new Fl_Choice(154, 194, 71, 20);
      opNOTCH->tooltip(_("Select Notch Depth"));
      opNOTCH->down_box(FL_BORDER_BOX);
      opNOTCH->callback((Fl_Callback*)cb_opNOTCH);
    } // Fl_Choice* opNOTCH
    { sldrMICGAIN = new Fl_Value_Slider(2, 216, 295, 18, _("Mic"));
      sldrMICGAIN->tooltip(_("Mic / Gain control"));
      sldrMICGAIN->type(5);
      sldrMICGAIN->color((Fl_Color)21);
      sldrMICGAIN->textsize(14);
      sldrMICGAIN->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
      sldrMICGAIN->callback((Fl_Callback*)cb_sldrMICGAIN);
      sldrMICGAIN->align(FL_ALIGN_RIGHT);
    } // Fl_Value_Slider* sldrMICGAIN
    { sldrPOWER = new Fl_Value_Slider(2, 237, 295, 18, _("Pwr"));
      sldrPOWER->tooltip(_("Set Power Output"));
      sldrPOWER->type(5);
      sldrPOWER->color((Fl_Color)21);
      sldrPOWER->maximum(100);
      sldrPOWER->step(1);
      sldrPOWER->value(20);
      sldrPOWER->textsize(14);
      sldrPOWER->textcolor((Fl_Color)FL_BACKGROUND2_COLOR);
      sldrPOWER->callback((Fl_Callback*)cb_sldrPOWER);
      sldrPOWER->align(FL_ALIGN_RIGHT);
    } // Fl_Value_Slider* sldrPOWER
    { btnRIT = new Fl_Light_Button(298, 90, 50, 18, _("RIT"));
      btnRIT->tooltip(_("RIT on/off"));
      btnRIT->labelsize(12);
      btnRIT->callback((Fl_Callback*)cb_btnRIT);
    } // Fl_Light_Button* btnRIT
    { btnMute = new Fl_Light_Button(298, 111, 50, 18, _("mute"));
      btnMute->tooltip(_("Speaker Mute on/off"));
      btnMute->labelsize(12);
      btnMute->callback((Fl_Callback*)cb_btnMute);
    } // Fl_Light_Button* btnMute
    { btnIFsh = new Fl_Light_Button(298, 132, 50, 18, _("IFsh"));
      btnIFsh->tooltip(_("IF Shift On/Off"));
      btnIFsh->labelsize(12);
      btnIFsh->callback((Fl_Callback*)cb_btnIFsh);
    } // Fl_Light_Button* btnIFsh
    { btnNotch = new Fl_Light_Button(298, 152, 50, 18, _("Ntch"));
      btnNotch->tooltip(_("Notch - Manual (off) Auto (on)"));
      btnNotch->labelsize(12);
      btnNotch->callback((Fl_Callback*)cb_btnNotch);
    } // Fl_Light_Button* btnNotch
    { btnNR = new Fl_Light_Button(298, 173, 50, 18, _("NR"));
      btnNR->tooltip(_("NR on/off"));
      btnNR->labelsize(12);
      btnNR->callback((Fl_Callback*)cb_btnNR);
    } // Fl_Light_Button* btnNR
    { btnAttenuator = new Fl_Light_Button(235, 194, 55, 20, _("Att"));
      btnAttenuator->tooltip(_("Attenuator On/Off"));
      btnAttenuator->labelsize(12);
      btnAttenuator->callback((Fl_Callback*)cb_btnAttenuator);
    } // Fl_Light_Button* btnAttenuator
    { btnPreamp = new Fl_Light_Button(298, 194, 50, 20, _("Pre"));
      btnPreamp->tooltip(_("Preamp On/Off"));
      btnPreamp->labelsize(12);
      btnPreamp->callback((Fl_Callback*)cb_btnPreamp);
    } // Fl_Light_Button* btnPreamp
    { Fl_Group* o = new Fl_Group(353, 68, 65, 210);
      o->box(FL_DOWN_BOX);
      o->color((Fl_Color)FL_FOREGROUND_COLOR);
      o->selection_color((Fl_Color)FL_LIGHT2);
      o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
      { Fl_Button* o = btnSmeter = new Fl_Button(355, 73, 40, 200);
        btnSmeter->tooltip(_("Click - change scale"));
        btnSmeter->box(FL_FLAT_BOX);
        btnSmeter->down_box(FL_FLAT_BOX);
        btnSmeter->color((Fl_Color)2);
        btnSmeter->selection_color((Fl_Color)2);
        btnSmeter->callback((Fl_Callback*)cb_btnSmeter);
        btnSmeter->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
        o->image(image_smeter);
      } // Fl_Button* btnSmeter
      { Fl_SigBar* o = sldrRcvSignal = new Fl_SigBar(396, 82, 10, 182);
        sldrRcvSignal->box(FL_FLAT_BOX);
        sldrRcvSignal->color((Fl_Color)10);
        sldrRcvSignal->selection_color((Fl_Color)2);
        sldrRcvSignal->labeltype(FL_NORMAL_LABEL);
        sldrRcvSignal->labelfont(0);
        sldrRcvSignal->labelsize(14);
        sldrRcvSignal->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
        sldrRcvSignal->align(FL_ALIGN_CENTER);
        sldrRcvSignal->when(FL_WHEN_RELEASE);
        o->minimum(0.0f);
        o->maximum(-128.0f);
      } // Fl_SigBar* sldrRcvSignal
      { sldrSQdisp = new Fl_Slider(407, 82, 8, 182);
        sldrSQdisp->box(FL_FLAT_BOX);
        sldrSQdisp->color((Fl_Color)FL_FOREGROUND_COLOR);
        sldrSQdisp->selection_color((Fl_Color)3);
        sldrSQdisp->labeltype(FL_NO_LABEL);
        sldrSQdisp->labelcolor((Fl_Color)3);
        sldrSQdisp->maximum(-127);
        sldrSQdisp->step(1);
        sldrSQdisp->value(-100);
        sldrSQdisp->deactivate();
      } // Fl_Slider* sldrSQdisp
      { boxSquelch = new Fl_Box(406, 71, 9, 9);
        boxSquelch->box(FL_OVAL_BOX);
        boxSquelch->color((Fl_Color)6);
        boxSquelch->selection_color((Fl_Color)FL_FOREGROUND_COLOR);
      } // Fl_Box* boxSquelch
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(418, 68, 80, 210);
      o->box(FL_DOWN_BOX);
      o->color((Fl_Color)FL_FOREGROUND_COLOR);
      o->selection_color((Fl_Color)FL_LIGHT2);
      o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
      { Fl_Button* o = btnPower = new Fl_Button(421, 73, 25, 200);
        btnPower->tooltip(_("Click - FWD / ALC"));
        btnPower->box(FL_FLAT_BOX);
        btnPower->down_box(FL_FLAT_BOX);
        btnPower->color((Fl_Color)175);
        btnPower->selection_color((Fl_Color)175);
        btnPower->callback((Fl_Callback*)cb_btnPower);
        btnPower->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
        o->image(image_p150);
      } // Fl_Button* btnPower
      { Fl_SigBar* o = sldrFwdPwr = new Fl_SigBar(447, 82, 10, 182);
        sldrFwdPwr->box(FL_FLAT_BOX);
        sldrFwdPwr->color((Fl_Color)14);
        sldrFwdPwr->selection_color((Fl_Color)6);
        sldrFwdPwr->labeltype(FL_NORMAL_LABEL);
        sldrFwdPwr->labelfont(0);
        sldrFwdPwr->labelsize(14);
        sldrFwdPwr->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
        sldrFwdPwr->align(FL_ALIGN_CENTER);
        sldrFwdPwr->when(FL_WHEN_RELEASE);
        o->minimum(120.0f);
        o->maximum(0.0f);
      } // Fl_SigBar* sldrFwdPwr
      { Fl_Button* o = btnSWR = new Fl_Button(470, 73, 25, 200);
        btnSWR->tooltip(_("Click REF / SWR"));
        btnSWR->box(FL_FLAT_BOX);
        btnSWR->down_box(FL_FLAT_BOX);
        btnSWR->color((Fl_Color)1);
        btnSWR->selection_color((Fl_Color)1);
        btnSWR->callback((Fl_Callback*)cb_btnSWR);
        btnSWR->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
        o->image(image_swr);
      } // Fl_Button* btnSWR
      { Fl_SigBar* o = sldrRefPwr = new Fl_SigBar(459, 82, 10, 182);
        sldrRefPwr->box(FL_FLAT_BOX);
        sldrRefPwr->color((Fl_Color)9);
        sldrRefPwr->selection_color((Fl_Color)1);
        sldrRefPwr->labeltype(FL_NORMAL_LABEL);
        sldrRefPwr->labelfont(0);
        sldrRefPwr->labelsize(14);
        sldrRefPwr->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
        sldrRefPwr->align(FL_ALIGN_CENTER);
        sldrRefPwr->when(FL_WHEN_RELEASE);
        o->minimum(50.0f);
        o->maximum(0.0f);
      } // Fl_SigBar* sldrRefPwr
      o->end();
    } // Fl_Group* o
    { btn_show_controls = new Fl_Button(2, 258, 18, 20, _("@-22->"));
      btn_show_controls->tooltip(_("Show/Hide controls"));
      btn_show_controls->callback((Fl_Callback*)cb_btn_show_controls);
    } // Fl_Button* btn_show_controls
    { btnPTT = new Fl_Light_Button(32, 258, 47, 20, _("PTT"));
      btnPTT->tooltip(_("Xmt On/Off"));
      btnPTT->labelsize(12);
      btnPTT->callback((Fl_Callback*)cb_btnPTT);
    } // Fl_Light_Button* btnPTT
    { btnTune = new Fl_Light_Button(92, 258, 47, 20, _("Tune"));
      btnTune->tooltip(_("Auto-tune Antenna"));
      btnTune->type(0);
      btnTune->labelsize(12);
      btnTune->callback((Fl_Callback*)cb_btnTune);
    } // Fl_Light_Button* btnTune
    { btnCarrier = new Fl_Light_Button(152, 258, 47, 20, _("Carr"));
      btnCarrier->tooltip(_("Constant Carrier"));
      btnCarrier->labelsize(12);
      btnCarrier->callback((Fl_Callback*)cb_btnCarrier);
    } // Fl_Light_Button* btnCarrier
    { btnSelAnt = new Fl_Check_Button(212, 258, 20, 20);
      btnSelAnt->tooltip(_("Click to override Antenna Table"));
      btnSelAnt->down_box(FL_DOWN_BOX);
      btnSelAnt->callback((Fl_Callback*)cb_btnSelAnt);
    } // Fl_Check_Button* btnSelAnt
    { btnRxAnt = new Fl_Button(245, 258, 45, 20, _("Rx-A"));
      btnRxAnt->tooltip(_("Select Ant A"));
      btnRxAnt->callback((Fl_Callback*)cb_btnRxAnt);
    } // Fl_Button* btnRxAnt
    { btnTxAnt = new Fl_Button(303, 258, 45, 20, _("Tx-A"));
      btnTxAnt->tooltip(_("Select Ant B"));
      btnTxAnt->callback((Fl_Callback*)cb_btnTxAnt);
    } // Fl_Button* btnTxAnt
    { txtTEMP = new Fl_Output(297, 3, 40, 20, _("C"));
      txtTEMP->tooltip(_("Click C / F"));
      txtTEMP->color((Fl_Color)FL_FOREGROUND_COLOR);
      txtTEMP->selection_color((Fl_Color)FL_BACKGROUND2_COLOR);
      txtTEMP->labelfont(13);
      txtTEMP->labelsize(12);
      txtTEMP->textfont(13);
      txtTEMP->textcolor((Fl_Color)62);
      txtTEMP->callback((Fl_Callback*)cb_txtTEMP);
      txtTEMP->align(FL_ALIGN_RIGHT);
    } // Fl_Output* txtTEMP
    { tabs = new Fl_Tabs(1, 282, 497, 70);
      tabs->selection_color((Fl_Color)FL_LIGHT1);
      { CWtab = new Fl_Group(2, 302, 495, 50, _("CW"));
        CWtab->color((Fl_Color)FL_LIGHT1);
        CWtab->selection_color((Fl_Color)FL_LIGHT1);
        { cntrWPM = new Fl_Counter(55, 307, 60, 22, _("Wpm"));
          cntrWPM->type(1);
          cntrWPM->labelsize(12);
          cntrWPM->minimum(5);
          cntrWPM->maximum(80);
          cntrWPM->step(1);
          cntrWPM->value(18);
          cntrWPM->callback((Fl_Callback*)cb_cntrWPM);
        } // Fl_Counter* cntrWPM
        { sldrCWweight = new Fl_Counter(146, 307, 60, 22, _("Weight"));
          sldrCWweight->type(1);
          sldrCWweight->minimum(0.75);
          sldrCWweight->maximum(1.5);
          sldrCWweight->step(0.05);
          sldrCWweight->value(1);
          sldrCWweight->callback((Fl_Callback*)cb_sldrCWweight);
        } // Fl_Counter* sldrCWweight
        { sldrCWattack = new Fl_Counter(238, 307, 60, 22, _("Attack"));
          sldrCWattack->tooltip(_("QSK delay (msec)"));
          sldrCWattack->type(1);
          sldrCWattack->minimum(0);
          sldrCWattack->maximum(255);
          sldrCWattack->step(1);
          sldrCWattack->value(127);
          sldrCWattack->callback((Fl_Callback*)cb_sldrCWattack);
        } // Fl_Counter* sldrCWattack
        { Fl_Choice* o = mnuCWmode = new Fl_Choice(329, 307, 65, 22, _("Mode"));
          mnuCWmode->down_box(FL_BORDER_BOX);
          mnuCWmode->callback((Fl_Callback*)cb_mnuCWmode);
          mnuCWmode->align(FL_ALIGN_BOTTOM);
          o->add("Left|Right|Str't");
          o->value(1);
        } // Fl_Choice* mnuCWmode
        { btnQSKonoff = new Fl_Check_Button(426, 309, 54, 18, _("QSK"));
          btnQSKonoff->tooltip(_("Enable keyer"));
          btnQSKonoff->down_box(FL_DOWN_BOX);
          btnQSKonoff->callback((Fl_Callback*)cb_btnQSKonoff);
        } // Fl_Check_Button* btnQSKonoff
        CWtab->end();
      } // Fl_Group* CWtab
      { CW2tab = new Fl_Group(2, 302, 495, 50, _("CW -xtra"));
        CW2tab->color((Fl_Color)FL_LIGHT1);
        CW2tab->selection_color((Fl_Color)FL_LIGHT1);
        CW2tab->hide();
        { sldrSideTone = new Fl_Counter(88, 307, 60, 22, _("S-T vol"));
          sldrSideTone->tooltip(_("Side tone volume"));
          sldrSideTone->type(1);
          sldrSideTone->minimum(5);
          sldrSideTone->maximum(80);
          sldrSideTone->step(1);
          sldrSideTone->value(24);
          sldrSideTone->callback((Fl_Callback*)cb_sldrSideTone);
        } // Fl_Counter* sldrSideTone
        { Fl_Choice* o = mnuCWoffset = new Fl_Choice(200, 307, 65, 22, _("Offset"));
          mnuCWoffset->down_box(FL_BORDER_BOX);
          mnuCWoffset->callback((Fl_Callback*)cb_mnuCWoffset);
          mnuCWoffset->align(FL_ALIGN_BOTTOM);
          o->add("300|400|500|600|700|800");
          o->value(4);
        } // Fl_Choice* mnuCWoffset
        { Fl_Choice* o = mnuCWdefFilter = new Fl_Choice(318, 307, 65, 22, _("Def\' Filt\'"));
          mnuCWdefFilter->down_box(FL_BORDER_BOX);
          mnuCWdefFilter->callback((Fl_Callback*)cb_mnuCWdefFilter);
          mnuCWdefFilter->align(FL_ALIGN_BOTTOM);
          o->add("Wide|Narr");
          o->value(1);
        } // Fl_Choice* mnuCWdefFilter
        CW2tab->end();
      } // Fl_Group* CW2tab
      { VOXtab = new Fl_Group(2, 302, 495, 50, _("Vox"));
        VOXtab->hide();
        { sldrVoxLevel = new Fl_Counter(60, 307, 70, 22, _("gain"));
          sldrVoxLevel->type(1);
          sldrVoxLevel->minimum(0);
          sldrVoxLevel->maximum(255);
          sldrVoxLevel->step(1);
          sldrVoxLevel->callback((Fl_Callback*)cb_sldrVoxLevel);
        } // Fl_Counter* sldrVoxLevel
        { sldrAntiVox = new Fl_Counter(164, 307, 70, 22, _("anti"));
          sldrAntiVox->type(1);
          sldrAntiVox->minimum(0);
          sldrAntiVox->maximum(255);
          sldrAntiVox->step(1);
          sldrAntiVox->callback((Fl_Callback*)cb_sldrAntiVox);
        } // Fl_Counter* sldrAntiVox
        { sldrVoxDelay = new Fl_Counter(268, 307, 70, 22, _("delay"));
          sldrVoxDelay->type(1);
          sldrVoxDelay->minimum(0);
          sldrVoxDelay->maximum(100);
          sldrVoxDelay->step(1);
          sldrVoxDelay->callback((Fl_Callback*)cb_sldrVoxDelay);
        } // Fl_Counter* sldrVoxDelay
        { btnVoxOnOff = new Fl_Light_Button(373, 307, 70, 22, _("VOX"));
          btnVoxOnOff->callback((Fl_Callback*)cb_btnVoxOnOff);
        } // Fl_Light_Button* btnVoxOnOff
        VOXtab->end();
      } // Fl_Group* VOXtab
      { SPCHtab = new Fl_Group(2, 302, 495, 50, _("Speech"));
        SPCHtab->hide();
        { MonVol = new Fl_Counter(36, 307, 70, 22, _("Mon vol"));
          MonVol->tooltip(_("Side tone volume"));
          MonVol->type(1);
          MonVol->minimum(0);
          MonVol->maximum(100);
          MonVol->step(1);
          MonVol->value(25);
        } // Fl_Counter* MonVol
        { btnSpchMon = new Fl_Light_Button(153, 307, 70, 22, _("Mon\'"));
          btnSpchMon->callback((Fl_Callback*)cb_btnSpchMon);
        } // Fl_Light_Button* btnSpchMon
        { sldrCompression = new Fl_Counter(270, 307, 70, 22, _("Comp"));
          sldrCompression->type(1);
          sldrCompression->minimum(0);
          sldrCompression->maximum(255);
          sldrCompression->step(1);
          sldrCompression->callback((Fl_Callback*)cb_sldrCompression);
        } // Fl_Counter* sldrCompression
        { btnSpchProc = new Fl_Light_Button(387, 307, 70, 22, _("Proc\'"));
          btnSpchProc->callback((Fl_Callback*)cb_btnSpchProc);
        } // Fl_Light_Button* btnSpchProc
        SPCHtab->end();
      } // Fl_Group* SPCHtab
      { RXtab = new Fl_Group(2, 302, 495, 50, _("RX"));
        RXtab->hide();
        { sldrSqlLevel = new Fl_Counter(32, 309, 80, 22, _("SQL dbm"));
          sldrSqlLevel->type(1);
          sldrSqlLevel->labelsize(12);
          sldrSqlLevel->minimum(-127);
          sldrSqlLevel->maximum(0);
          sldrSqlLevel->step(1);
          sldrSqlLevel->value(-127);
          sldrSqlLevel->callback((Fl_Callback*)cb_sldrSqlLevel);
        } // Fl_Counter* sldrSqlLevel
        { btnSQLtype[0] = new Fl_Round_Button(155, 308, 70, 21, _("Level"));
          btnSQLtype[0]->down_box(FL_ROUND_DOWN_BOX);
          btnSQLtype[0]->value(1);
          btnSQLtype[0]->callback((Fl_Callback*)cb_btnSQLtype);
        } // Fl_Round_Button* btnSQLtype[0]
        { sldrAgcAction = new Fl_Counter(268, 309, 80, 22, _("AGC action"));
          sldrAgcAction->type(1);
          sldrAgcAction->labelsize(12);
          sldrAgcAction->minimum(0);
          sldrAgcAction->maximum(255);
          sldrAgcAction->step(1);
          sldrAgcAction->callback((Fl_Callback*)cb_sldrAgcAction);
        } // Fl_Counter* sldrAgcAction
        { sldrAgcSpeed = new Fl_Counter(391, 309, 80, 22, _("AGC speed"));
          sldrAgcSpeed->type(1);
          sldrAgcSpeed->labelsize(12);
          sldrAgcSpeed->minimum(0);
          sldrAgcSpeed->maximum(255);
          sldrAgcSpeed->step(1);
          sldrAgcSpeed->value(127);
          sldrAgcSpeed->callback((Fl_Callback*)cb_sldrAgcSpeed);
        } // Fl_Counter* sldrAgcSpeed
        { btnSQLtype[1] = new Fl_Round_Button(155, 329, 70, 21, _("Syllabic"));
          btnSQLtype[1]->down_box(FL_ROUND_DOWN_BOX);
          btnSQLtype[1]->callback((Fl_Callback*)cb_btnSQLtype1);
        } // Fl_Round_Button* btnSQLtype[1]
        RXtab->end();
      } // Fl_Group* RXtab
      { TXtab = new Fl_Group(2, 302, 495, 50, _("TX"));
        TXtab->hide();
        { btnAmpOnOff = new Fl_Check_Button(111, 313, 107, 15, _("Amp on/off"));
          btnAmpOnOff->down_box(FL_DOWN_BOX);
          btnAmpOnOff->callback((Fl_Callback*)cb_btnAmpOnOff);
        } // Fl_Check_Button* btnAmpOnOff
        { tuner_bypass = new Fl_Check_Button(164, 311, 70, 15, _("Tuner"));
          tuner_bypass->tooltip(_("Check to bypass tuner"));
          tuner_bypass->down_box(FL_DOWN_BOX);
          tuner_bypass->hide();
        } // Fl_Check_Button* tuner_bypass
        { sldrXmtEqualizer = new Fl_Counter(247, 307, 80, 22, _("Equilization"));
          sldrXmtEqualizer->type(1);
          sldrXmtEqualizer->minimum(-127);
          sldrXmtEqualizer->maximum(127);
          sldrXmtEqualizer->step(1);
          sldrXmtEqualizer->callback((Fl_Callback*)cb_sldrXmtEqualizer);
        } // Fl_Counter* sldrXmtEqualizer
        TXtab->end();
      } // Fl_Group* TXtab
      { OSCtab = new Fl_Group(2, 302, 495, 50, _("Osc\'"));
        OSCtab->hide();
        { ctr_vfo_adj = new Fl_Counter(191, 307, 120, 22, _("Vfo Adj(ppm)"));
          ctr_vfo_adj->callback((Fl_Callback*)cb_ctr_vfo_adj);
          ctr_vfo_adj->align(34);
        } // Fl_Counter* ctr_vfo_adj
        OSCtab->end();
      } // Fl_Group* OSCtab
      tabs->end();
    } // Fl_Tabs* tabs
    o->end();
  } // Fl_Double_Window* o
  return w;
}

Fl_Return_Button *btnOkCommsDialog=(Fl_Return_Button *)0;

static void cb_btnOkCommsDialog(Fl_Return_Button*, void*) {
  cbOkCommsDialog();
}

Fl_Choice *selectCommPort=(Fl_Choice *)0;

Fl_Double_Window* CommsDialog() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(151, 94, _("Select"));
    w = o;
    o->box(FL_UP_BOX);
    { btnOkCommsDialog = new Fl_Return_Button(20, 55, 105, 25, _("OK"));
      btnOkCommsDialog->callback((Fl_Callback*)cb_btnOkCommsDialog);
    } // Fl_Return_Button* btnOkCommsDialog
    { selectCommPort = new Fl_Choice(20, 19, 105, 21, _("tty Port:"));
      selectCommPort->down_box(FL_BORDER_BOX);
      selectCommPort->align(FL_ALIGN_TOP_LEFT);
    } // Fl_Choice* selectCommPort
    o->set_modal();
    o->end();
  } // Fl_Double_Window* o
  return w;
}

Fl_Box *lblTest=(Fl_Box *)0;

Fl_Button *prefForeground=(Fl_Button *)0;

static void cb_prefForeground(Fl_Button*, void*) {
  cbPrefForeground();
}

Fl_Button *prefBackground=(Fl_Button *)0;

static void cb_prefBackground(Fl_Button*, void*) {
  cbPrefBackground();
}

Fl_Return_Button *btnOkDisplayDialog=(Fl_Return_Button *)0;

static void cb_btnOkDisplayDialog(Fl_Return_Button*, void*) {
  cbOkDisplayDialog();
}

Fl_Button *btnSmeterColor=(Fl_Button *)0;

static void cb_btnSmeterColor(Fl_Button*, void*) {
  cbSmeterColor();
}

Fl_Button *btnPowercolor=(Fl_Button *)0;

static void cb_btnPowercolor(Fl_Button*, void*) {
  cbPWRcolor();
}

Fl_Button *btnSWRcolor=(Fl_Button *)0;

static void cb_btnSWRcolor(Fl_Button*, void*) {
  cbSWRcolor();
}

Fl_Double_Window* DisplayDialog() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(274, 245, _("Colors"));
    w = o;
    { Fl_Group* o = new Fl_Group(194, 5, 73, 155, _("Freq Disp"));
      o->box(FL_ENGRAVED_FRAME);
      o->align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE);
      { Fl_Box* o = lblTest = new Fl_Box(212, 30, 40, 60, _("8"));
        lblTest->box(FL_DOWN_BOX);
        lblTest->color((Fl_Color)FL_FOREGROUND_COLOR);
        lblTest->selection_color((Fl_Color)FL_FOREGROUND_COLOR);
        lblTest->labelfont(4);
        lblTest->labelsize(56);
        lblTest->labelcolor((Fl_Color)167);
        o->labelsize(o->h()-8);
      } // Fl_Box* lblTest
      { prefForeground = new Fl_Button(207, 95, 50, 25, _("Color"));
        prefForeground->callback((Fl_Callback*)cb_prefForeground);
      } // Fl_Button* prefForeground
      { prefBackground = new Fl_Button(207, 125, 50, 25, _("Back"));
        prefBackground->callback((Fl_Callback*)cb_prefBackground);
      } // Fl_Button* prefBackground
      o->end();
    } // Fl_Group* o
    { btnOkDisplayDialog = new Fl_Return_Button(200, 175, 60, 25, _("OK"));
      btnOkDisplayDialog->callback((Fl_Callback*)cb_btnOkDisplayDialog);
    } // Fl_Return_Button* btnOkDisplayDialog
    { Fl_Group* o = new Fl_Group(4, 5, 55, 231, _("Smeter"));
      o->box(FL_EMBOSSED_FRAME);
      o->align(FL_ALIGN_TOP|FL_ALIGN_INSIDE);
      { Fl_Button* o = btnSmeterColor = new Fl_Button(11, 27, 40, 200);
        btnSmeterColor->tooltip(_("Click on Image to adjust color"));
        btnSmeterColor->box(FL_DOWN_BOX);
        btnSmeterColor->down_box(FL_FLAT_BOX);
        btnSmeterColor->color((Fl_Color)2);
        btnSmeterColor->selection_color((Fl_Color)2);
        btnSmeterColor->callback((Fl_Callback*)cb_btnSmeterColor);
        btnSmeterColor->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
        o->image(image_smeter);
        o->color(btnSmeter->color());
      } // Fl_Button* btnSmeterColor
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(64, 5, 55, 231, _("Power"));
      o->box(FL_EMBOSSED_FRAME);
      o->align(FL_ALIGN_TOP|FL_ALIGN_INSIDE);
      { Fl_Button* o = btnPowercolor = new Fl_Button(79, 27, 25, 200);
        btnPowercolor->tooltip(_("Click on Image to adjust color"));
        btnPowercolor->box(FL_DOWN_BOX);
        btnPowercolor->down_box(FL_FLAT_BOX);
        btnPowercolor->color((Fl_Color)175);
        btnPowercolor->selection_color((Fl_Color)175);
        btnPowercolor->callback((Fl_Callback*)cb_btnPowercolor);
        btnPowercolor->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
        o->image(image_p150);
        o->color(btnPower->color());
      } // Fl_Button* btnPowercolor
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(129, 5, 55, 231, _("SWR"));
      o->box(FL_EMBOSSED_FRAME);
      o->align(FL_ALIGN_TOP|FL_ALIGN_INSIDE);
      { Fl_Button* o = btnSWRcolor = new Fl_Button(142, 27, 25, 200);
        btnSWRcolor->tooltip(_("Click on Image to adjust color"));
        btnSWRcolor->box(FL_DOWN_BOX);
        btnSWRcolor->down_box(FL_FLAT_BOX);
        btnSWRcolor->color((Fl_Color)1);
        btnSWRcolor->selection_color((Fl_Color)1);
        btnSWRcolor->callback((Fl_Callback*)cb_btnSWRcolor);
        btnSWRcolor->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
        o->image(image_swr);
        o->color(btnSWR->color());
      } // Fl_Button* btnSWRcolor
      o->end();
    } // Fl_Group* o
    o->end();
  } // Fl_Double_Window* o
  return w;
}

Fl_Input *txtFreqRange=(Fl_Input *)0;

Fl_Button *btnRcvAnt=(Fl_Button *)0;

static void cb_btnRcvAnt(Fl_Button*, void*) {
  if (btnRcvAnt->value() == 1) btnRcvAnt->label("B");
else btnRcvAnt->label("A");
}

Fl_Button *btnXmtAnt=(Fl_Button *)0;

static void cb_btnXmtAnt(Fl_Button*, void*) {
  if (btnXmtAnt->value() == 1) btnXmtAnt->label("B");
else btnXmtAnt->label("A");
}

Fl_Browser *brwsAntRanges=(Fl_Browser *)0;

static void cb_brwsAntRanges(Fl_Browser*, void*) {
  cbbrwsAntRanges();
}

Fl_Button *btnAddAntRange=(Fl_Button *)0;

static void cb_btnAddAntRange(Fl_Button*, void*) {
  cbAddAntRange();
}

Fl_Button *btnDeleteAntRange=(Fl_Button *)0;

static void cb_btnDeleteAntRange(Fl_Button*, void*) {
  cbDeleteAntRange();
}

Fl_Return_Button *btnAntRangeDialogOK=(Fl_Return_Button *)0;

static void cb_btnAntRangeDialogOK(Fl_Return_Button*, void*) {
  cbAntRangeDialogOK();
}

Fl_Double_Window* FreqRangesDialog() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(260, 170, _("Antenna Port Setup"));
    w = o;
    { txtFreqRange = new Fl_Input(4, 25, 75, 25);
      txtFreqRange->tooltip(_("Enter Start Freq in KHz"));
      txtFreqRange->type(2);
      txtFreqRange->textfont(13);
      txtFreqRange->align(FL_ALIGN_TOP_LEFT);
    } // Fl_Input* txtFreqRange
    { btnRcvAnt = new Fl_Button(82, 25, 30, 25, _("A"));
      btnRcvAnt->type(1);
      btnRcvAnt->down_box(FL_UP_BOX);
      btnRcvAnt->labelfont(1);
      btnRcvAnt->callback((Fl_Callback*)cb_btnRcvAnt);
    } // Fl_Button* btnRcvAnt
    { btnXmtAnt = new Fl_Button(112, 25, 30, 25, _("A"));
      btnXmtAnt->type(1);
      btnXmtAnt->down_box(FL_UP_BOX);
      btnXmtAnt->labelfont(1);
      btnXmtAnt->callback((Fl_Callback*)cb_btnXmtAnt);
    } // Fl_Button* btnXmtAnt
    { new Fl_Box(79, 5, 30, 20, _("Rcv"));
    } // Fl_Box* o
    { new Fl_Box(110, 5, 30, 20, _("Xmt"));
    } // Fl_Box* o
    { brwsAntRanges = new Fl_Browser(147, 5, 108, 160);
      brwsAntRanges->type(2);
      brwsAntRanges->labelfont(4);
      brwsAntRanges->textfont(13);
      brwsAntRanges->callback((Fl_Callback*)cb_brwsAntRanges);
    } // Fl_Browser* brwsAntRanges
    { btnAddAntRange = new Fl_Button(70, 55, 72, 25, _("Add @>|"));
      btnAddAntRange->callback((Fl_Callback*)cb_btnAddAntRange);
      btnAddAntRange->align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE);
    } // Fl_Button* btnAddAntRange
    { btnDeleteAntRange = new Fl_Button(70, 83, 72, 25, _("Delete @#2|>"));
      btnDeleteAntRange->callback((Fl_Callback*)cb_btnDeleteAntRange);
      btnDeleteAntRange->align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE);
    } // Fl_Button* btnDeleteAntRange
    { btnAntRangeDialogOK = new Fl_Return_Button(10, 135, 85, 25, _("OK"));
      btnAntRangeDialogOK->callback((Fl_Callback*)cb_btnAntRangeDialogOK);
    } // Fl_Return_Button* btnAntRangeDialogOK
    { new Fl_Box(1, 5, 75, 20, _("Freq kHz"));
    } // Fl_Box* o
    o->set_modal();
    o->end();
  } // Fl_Double_Window* o
  return w;
}

Fl_Text_Display *txtViewLog=(Fl_Text_Display *)0;

Fl_Double_Window* ViewLogDialog() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(500, 130, _("Serial Log"));
    w = o;
    { txtViewLog = new Fl_Text_Display(0, 0, 500, 130);
      txtViewLog->textfont(13);
      txtViewLog->textsize(12);
    } // Fl_Text_Display* txtViewLog
    o->end();
  } // Fl_Double_Window* o
  return w;
}

Fl_Text_Display *txtDataDisp=(Fl_Text_Display *)0;

Fl_Return_Button *btnNRAMok=(Fl_Return_Button *)0;

static void cb_btnNRAMok(Fl_Return_Button*, void*) {
  cbNRAMok();
}

Fl_Button *btnAntImpData=(Fl_Button *)0;

static void cb_btnAntImpData(Fl_Button*, void*) {
  cbNRAMAntImp();
}

Fl_Button *btnSmeterData=(Fl_Button *)0;

static void cb_btnSmeterData(Fl_Button*, void*) {
  cbNRAMsmeter();
}

Fl_Button *btnFreqRefData=(Fl_Button *)0;

static void cb_btnFreqRefData(Fl_Button*, void*) {
  cbNRAMFreqRef();
}

Fl_Button *btnPhaseDet=(Fl_Button *)0;

static void cb_btnPhaseDet(Fl_Button*, void*) {
  cbNRAMPhase();
}

Fl_Button *btnCarrierData=(Fl_Button *)0;

static void cb_btnCarrierData(Fl_Button*, void*) {
  cbNRAMCarrier();
}

Fl_Button *btnAllData=(Fl_Button *)0;

static void cb_btnAllData(Fl_Button*, void*) {
  cbNRAMAll();
}

Fl_Button *btnSaveData=(Fl_Button *)0;

static void cb_btnSaveData(Fl_Button*, void*) {
  cbNRAMSave();
}

Fl_Button *btnRestoreData=(Fl_Button *)0;

static void cb_btnRestoreData(Fl_Button*, void*) {
  cbNRAMRestore();
}

Fl_Button *btnClearData=(Fl_Button *)0;

static void cb_btnClearData(Fl_Button*, void*) {
  cbNRAMClearText();
}

Fl_Double_Window* NRAMdataDialog() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(400, 230, _("NRAM critical data"));
    w = o;
    { txtDataDisp = new Fl_Text_Display(1, 3, 395, 170);
    } // Fl_Text_Display* txtDataDisp
    { btnNRAMok = new Fl_Return_Button(319, 201, 75, 25, _("OK"));
      btnNRAMok->callback((Fl_Callback*)cb_btnNRAMok);
    } // Fl_Return_Button* btnNRAMok
    { btnAntImpData = new Fl_Button(0, 176, 60, 25, _("AntIMp"));
      btnAntImpData->callback((Fl_Callback*)cb_btnAntImpData);
    } // Fl_Button* btnAntImpData
    { btnSmeterData = new Fl_Button(60, 176, 60, 25, _("Smeter"));
      btnSmeterData->callback((Fl_Callback*)cb_btnSmeterData);
    } // Fl_Button* btnSmeterData
    { btnFreqRefData = new Fl_Button(120, 176, 60, 25, _("FreqRef"));
      btnFreqRefData->callback((Fl_Callback*)cb_btnFreqRefData);
    } // Fl_Button* btnFreqRefData
    { btnPhaseDet = new Fl_Button(0, 201, 60, 25, _("Phase"));
      btnPhaseDet->callback((Fl_Callback*)cb_btnPhaseDet);
    } // Fl_Button* btnPhaseDet
    { btnCarrierData = new Fl_Button(60, 201, 60, 25, _("Carrier"));
      btnCarrierData->callback((Fl_Callback*)cb_btnCarrierData);
    } // Fl_Button* btnCarrierData
    { btnAllData = new Fl_Button(120, 201, 60, 25, _("All"));
      btnAllData->callback((Fl_Callback*)cb_btnAllData);
    } // Fl_Button* btnAllData
    { btnSaveData = new Fl_Button(188, 201, 60, 25, _("Save"));
      btnSaveData->tooltip(_("Save to file: NRAMdata.txt"));
      btnSaveData->callback((Fl_Callback*)cb_btnSaveData);
    } // Fl_Button* btnSaveData
    { btnRestoreData = new Fl_Button(254, 200, 60, 25, _("Restore"));
      btnRestoreData->callback((Fl_Callback*)cb_btnRestoreData);
      btnRestoreData->hide();
    } // Fl_Button* btnRestoreData
    { btnClearData = new Fl_Button(188, 175, 60, 25, _("Clr Txt"));
      btnClearData->callback((Fl_Callback*)cb_btnClearData);
    } // Fl_Button* btnClearData
    o->end();
  } // Fl_Double_Window* o
  return w;
}

Fl_Counter *cntrFreqStd=(Fl_Counter *)0;

Fl_Button *btnCalibrate=(Fl_Button *)0;

static void cb_btnCalibrate(Fl_Button*, void*) {
  cbCalibrate();
}

Fl_Button *btnCalFinished=(Fl_Button *)0;

static void cb_btnCalFinished(Fl_Button*, void*) {
  cbCalFinished();
}

Fl_Double_Window* FreqCalibDialog() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(285, 62, _("Calibrate to Freq Std"));
    w = o;
    { cntrFreqStd = new Fl_Counter(15, 15, 80, 20, _("Freq. Std."));
      cntrFreqStd->minimum(5);
      cntrFreqStd->maximum(15);
      cntrFreqStd->value(10);
    } // Fl_Counter* cntrFreqStd
    { btnCalibrate = new Fl_Button(120, 15, 64, 20, _("Calibrate"));
      btnCalibrate->callback((Fl_Callback*)cb_btnCalibrate);
    } // Fl_Button* btnCalibrate
    { btnCalFinished = new Fl_Button(205, 15, 64, 20, _("Finished"));
      btnCalFinished->callback((Fl_Callback*)cb_btnCalFinished);
    } // Fl_Button* btnCalFinished
    o->end();
  } // Fl_Double_Window* o
  return w;
}
