// generated by Fast Light User Interface Designer (fluid) version 1.0300

#include "gettext.h"
#include "kcat_panel.h"
#include "images.h"
#include "kcat.h"
#include "support.h"
#include "status.h"

static void cb_mnuOpen(Fl_Menu_*, void*) {
  openFreqList();
}

static void cb_mnuSave(Fl_Menu_*, void*) {
  saveFreqList();
}

static void cb_mnuExit(Fl_Menu_*, void*) {
  cbExit();
}

static void cb_mnuTooltips(Fl_Menu_*, void*) {
  xcvrState.tooltips=mnuTooltips->value();
Fl_Tooltip::enable(xcvrState.tooltips);
}

static void cb_mnuAntPorts(Fl_Menu_*, void*) {
  cbmnuAntPorts();
}

static void cb_mnuPreferences(Fl_Menu_*, void*) {
  setDisplayColors();
}

static void cb_mnuSelectPort(Fl_Menu_*, void*) {
  setCommsPort();
}

static void cb_mnu_cw_keyboard(Fl_Menu_*, void*) {
  open_keyboard();
}

static void cb_mnuScanner(Fl_Menu_*, void*) {
  open_scanner();
}

static void cb_mnuFreqCal(Fl_Menu_*, void*) {
  openFreqCalibDialog();
}

static void cb_mnuClearAntData(Fl_Menu_*, void*) {
  cbClearAntData();
}

static void cb_mnuNRAMdata(Fl_Menu_*, void*) {
  cbNRAM();
}

static void cb_mnuEvents(Fl_Menu_*, void*) {
  cbEventLog();
}

static void cb_mnuOnLineHelp(Fl_Menu_*, void*) {
  visit_URL((void *)("http://www.w1hkj.com/kcat-help/index.html"));
}

static void cb_mnuAbout(Fl_Menu_*, void*) {
  about();
}

unsigned char menu__i18n_done = 0;
Fl_Menu_Item menu_[] = {
 {"&Files", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"&Open", 0,  (Fl_Callback*)cb_mnuOpen, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"&Save", 0,  (Fl_Callback*)cb_mnuSave, 0, 128, FL_NORMAL_LABEL, 0, 14, 0},
 {"E&xit", 0,  (Fl_Callback*)cb_mnuExit, 0, 128, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"&Config", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"Tooltips", 0,  (Fl_Callback*)cb_mnuTooltips, 0, 130, FL_NORMAL_LABEL, 0, 14, 0},
 {"Antenna Ports", 0,  (Fl_Callback*)cb_mnuAntPorts, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"&Display Colors", 0,  (Fl_Callback*)cb_mnuPreferences, 0, 128, FL_NORMAL_LABEL, 0, 14, 0},
 {"Serial Port", 0,  (Fl_Callback*)cb_mnuSelectPort, 0, 128, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"Utils", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"CW keyboard", 0,  (Fl_Callback*)cb_mnu_cw_keyboard, 0, 128, FL_NORMAL_LABEL, 0, 14, 0},
 {"&Ant Imped", 0,  0, 0, 16, FL_NORMAL_LABEL, 0, 14, 0},
 {"Scanner", 0,  (Fl_Callback*)cb_mnuScanner, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"&FreqCal", 0,  (Fl_Callback*)cb_mnuFreqCal, 0, 16, FL_NORMAL_LABEL, 0, 14, 0},
 {"Clear Ant\' Data", 0,  (Fl_Callback*)cb_mnuClearAntData, 0, 128, FL_NORMAL_LABEL, 0, 14, 0},
 {"&NRAM data", 0,  (Fl_Callback*)cb_mnuNRAMdata, 0, 128, FL_NORMAL_LABEL, 0, 14, 0},
 {"Event log", 0,  (Fl_Callback*)cb_mnuEvents, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"&Help", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"On-line help", 0,  (Fl_Callback*)cb_mnuOnLineHelp, 0, 128, FL_NORMAL_LABEL, 0, 14, 0},
 {"&About", 0,  (Fl_Callback*)cb_mnuAbout, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0}
};

cFreqControl *FreqDisp=(cFreqControl *)0;

cFreqControl *FreqDispB=(cFreqControl *)0;

Fl_Button *btnRxA_TxA=(Fl_Button *)0;

static void cb_btnRxA_TxA(Fl_Button*, void*) {
  cbRxA_TxA();
}

Fl_Button *btnRxA_TxB=(Fl_Button *)0;

static void cb_btnRxA_TxB(Fl_Button*, void*) {
  cbRxA_TxB();
}

Fl_Button *btnA2B=(Fl_Button *)0;

static void cb_btnA2B(Fl_Button*, void*) {
  cbA2B();
}

Fl_Button *btnB2A=(Fl_Button *)0;

static void cb_btnB2A(Fl_Button*, void*) {
  cbB2A();
}

Fl_Button *btnRxB_TxA=(Fl_Button *)0;

static void cb_btnRxB_TxA(Fl_Button*, void*) {
  cbRxB_TxA();
}

Fl_Button *btnRxB_TxB=(Fl_Button *)0;

static void cb_btnRxB_TxB(Fl_Button*, void*) {
  cbRxB_TxB();
}

Fl_Browser *FreqSelect=(Fl_Browser *)0;

static void cb_FreqSelect(Fl_Browser*, void*) {
  if (FreqSelect->value())
selectFreq();
}

Fl_Button *btnAddFreq=(Fl_Button *)0;

static void cb_btnAddFreq(Fl_Button*, void*) {
  addFreq();
}

Fl_Button *btnDelFreq=(Fl_Button *)0;

static void cb_btnDelFreq(Fl_Button*, void*) {
  delFreq();
}

Fl_Button *btnClearList=(Fl_Button *)0;

static void cb_btnClearList(Fl_Button*, void*) {
  clearList();
}

Fl_Wheel_Value_Slider *sldrRIT=(Fl_Wheel_Value_Slider *)0;

static void cb_sldrRIT(Fl_Wheel_Value_Slider*, void*) {
  cbRIT();
}

Fl_Wheel_Value_Slider *sldrVOLUME=(Fl_Wheel_Value_Slider *)0;

static void cb_sldrVOLUME(Fl_Wheel_Value_Slider*, void*) {
  setVolume();
}

Fl_Wheel_Value_Slider *sldrIFSHIFT=(Fl_Wheel_Value_Slider *)0;

static void cb_sldrIFSHIFT(Fl_Wheel_Value_Slider*, void*) {
  if (btnIFsh->value() == 0)
btnIFsh->value(1);
setIFshift();
}

Fl_Wheel_Value_Slider *sldrNOTCH=(Fl_Wheel_Value_Slider *)0;

static void cb_sldrNOTCH(Fl_Wheel_Value_Slider*, void*) {
  setNotch();
}

Fl_Wheel_Value_Slider *sldrDepth=(Fl_Wheel_Value_Slider *)0;

static void cb_sldrDepth(Fl_Wheel_Value_Slider*, void*) {
  cbDepth();
}

Fl_Wheel_Value_Slider *sldrNR=(Fl_Wheel_Value_Slider *)0;

static void cb_sldrNR(Fl_Wheel_Value_Slider*, void*) {
  cbNR();
}

Fl_Choice *opMODE=(Fl_Choice *)0;

static void cb_opMODE(Fl_Choice*, void*) {
  setMode();
}

Fl_Choice *opBW=(Fl_Choice *)0;

static void cb_opBW(Fl_Choice*, void*) {
  setBW();
}

Fl_Choice *opNOTCH=(Fl_Choice *)0;

static void cb_opNOTCH(Fl_Choice*, void*) {
  setNotchWidth();
}

Fl_Wheel_Value_Slider *sldrMICGAIN=(Fl_Wheel_Value_Slider *)0;

static void cb_sldrMICGAIN(Fl_Wheel_Value_Slider*, void*) {
  setMicGain();
}

Fl_Wheel_Value_Slider *sldrPOWER=(Fl_Wheel_Value_Slider *)0;

static void cb_sldrPOWER(Fl_Wheel_Value_Slider*, void*) {
  setPower();
}

Fl_Light_Button *btnRIT=(Fl_Light_Button *)0;

static void cb_btnRIT(Fl_Light_Button*, void*) {
  cbbtnRIT();
}

Fl_Light_Button *btnVol=(Fl_Light_Button *)0;

static void cb_btnVol(Fl_Light_Button*, void*) {
  cbVol();
}

Fl_Light_Button *btnIFsh=(Fl_Light_Button *)0;

static void cb_btnIFsh(Fl_Light_Button*, void*) {
  cbIFsh();
}

Fl_Light_Button *btnNotch=(Fl_Light_Button *)0;

static void cb_btnNotch(Fl_Light_Button*, void*) {
  cbbtnNotch();
}

Fl_Light_Button *btnNR=(Fl_Light_Button *)0;

static void cb_btnNR(Fl_Light_Button*, void*) {
  cbbtnNR();
}

Fl_Light_Button *btnAttenuator=(Fl_Light_Button *)0;

static void cb_btnAttenuator(Fl_Light_Button*, void*) {
  cbAttenuator();
}

Fl_Light_Button *btnPreamp=(Fl_Light_Button *)0;

static void cb_btnPreamp(Fl_Light_Button*, void*) {
  cbPreamp();
}

Fl_Group *grpMeters=(Fl_Group *)0;

Fl_Button *btnSmeter=(Fl_Button *)0;

static void cb_btnSmeter(Fl_Button*, void*) {
  cbSmeter();
}

Fl_SigBar *sldrRcvSignal=(Fl_SigBar *)0;

Fl_Button *btnPower=(Fl_Button *)0;

static void cb_btnPower(Fl_Button*, void*) {
  cbPWR();
}

Fl_SigBar *sldrFwdPwr=(Fl_SigBar *)0;

Fl_Box *boxSWR=(Fl_Box *)0;

Fl_SigBar *sldrRefPwr=(Fl_SigBar *)0;

Fl_Box *boxSquelch=(Fl_Box *)0;

Fl_Button *btn_show_controls=(Fl_Button *)0;

static void cb_btn_show_controls(Fl_Button*, void*) {
  show_controls();
}

Fl_Light_Button *btnPTT=(Fl_Light_Button *)0;

static void cb_btnPTT(Fl_Light_Button*, void*) {
  cbPTT();
}

Fl_Button *btn_tune=(Fl_Button *)0;

static void cb_btn_tune(Fl_Button*, void*) {
  cbTune();
btn_autotune->value(1);
}

Fl_Light_Button *btn_autotune=(Fl_Light_Button *)0;

static void cb_btn_autotune(Fl_Light_Button* o, void*) {
  xcvrState.autotune = o->value();
cb_autotune(xcvrState.autotune);
}

Fl_Light_Button *btnCarrier=(Fl_Light_Button *)0;

static void cb_btnCarrier(Fl_Light_Button*, void*) {
  cbCarrier();
}

Fl_Choice *antSelect=(Fl_Choice *)0;

static void cb_antSelect(Fl_Choice*, void*) {
  cbAntSel();
}

Fl_Output *txtTEMP=(Fl_Output *)0;

static void cb_txtTEMP(Fl_Output*, void*) {
  cbTemp();
}

Fl_Tabs *tabs=(Fl_Tabs *)0;

Fl_Group *CWtab=(Fl_Group *)0;

Fl_Light_Button *btnSPOT=(Fl_Light_Button *)0;

static void cb_btnSPOT(Fl_Light_Button*, void*) {
  cbSPOT();
}

Fl_Counter *cntrWPM=(Fl_Counter *)0;

static void cb_cntrWPM(Fl_Counter* o, void*) {
  cntrWPM2->value(o->value());
cbWPM();
}

Fl_Wheel_Value_Slider *sldrCWweight=(Fl_Wheel_Value_Slider *)0;

static void cb_sldrCWweight(Fl_Wheel_Value_Slider*, void*) {
  cbCWweight();
}

Fl_Wheel_Value_Slider *sldrCWattack=(Fl_Wheel_Value_Slider *)0;

static void cb_sldrCWattack(Fl_Wheel_Value_Slider*, void*) {
  cbCWattack();
}

Fl_Choice *mnuCWmode=(Fl_Choice *)0;

static void cb_mnuCWmode(Fl_Choice*, void*) {
  cbCWmode();
}

Fl_Check_Button *btnQSKonoff=(Fl_Check_Button *)0;

static void cb_btnQSKonoff(Fl_Check_Button*, void*) {
  cbQSKonoff();
}

Fl_Group *CW2tab=(Fl_Group *)0;

Fl_Counter *sldrSideTone=(Fl_Counter *)0;

static void cb_sldrSideTone(Fl_Counter*, void*) {
  cbSidetone();
}

Fl_Choice *mnuCWoffset=(Fl_Choice *)0;

static void cb_mnuCWoffset(Fl_Choice*, void*) {
  cbCWoffset();
}

Fl_Choice *mnuCWdefFilter=(Fl_Choice *)0;

static void cb_mnuCWdefFilter(Fl_Choice*, void*) {
  cbCWdefFilter();
}

Fl_Group *VOXtab=(Fl_Group *)0;

Fl_Counter *sldrVoxLevel=(Fl_Counter *)0;

static void cb_sldrVoxLevel(Fl_Counter*, void*) {
  cbsldrVoxLevel();
}

Fl_Counter *sldrAntiVox=(Fl_Counter *)0;

static void cb_sldrAntiVox(Fl_Counter*, void*) {
  cbsldrAntiVox();
}

Fl_Counter *sldrVoxDelay=(Fl_Counter *)0;

static void cb_sldrVoxDelay(Fl_Counter*, void*) {
  cbsldrVoxDelay();
}

Fl_Light_Button *btnVoxOnOff=(Fl_Light_Button *)0;

static void cb_btnVoxOnOff(Fl_Light_Button*, void*) {
  cbVoxOnOff();
}

Fl_Group *SPCHtab=(Fl_Group *)0;

Fl_Light_Button *btnSpchMon=(Fl_Light_Button *)0;

static void cb_btnSpchMon(Fl_Light_Button*, void*) {
  cbSpchMon();
}

Fl_Counter *sldrCompression=(Fl_Counter *)0;

static void cb_sldrCompression(Fl_Counter*, void*) {
  cbsldrCompression();
}

Fl_Light_Button *btnSpchProc=(Fl_Light_Button *)0;

static void cb_btnSpchProc(Fl_Light_Button*, void*) {
  cbbtnSpchProc();
}

Fl_Group *RXtab=(Fl_Group *)0;

Fl_Counter *sldrSqlLevel=(Fl_Counter *)0;

static void cb_sldrSqlLevel(Fl_Counter*, void*) {
  cbSqlLevel();
}

static void cb_btnSQLtype(Fl_Round_Button*, void*) {
  btnSQLtype[1]->value(0);
cbSQLtype();
}

Fl_Counter *sldrAgcAction=(Fl_Counter *)0;

static void cb_sldrAgcAction(Fl_Counter*, void*) {
  cbsldrAgcAction();
}

Fl_Counter *sldrAgcSpeed=(Fl_Counter *)0;

static void cb_sldrAgcSpeed(Fl_Counter*, void*) {
  cbsldrAgcSpeed();
}

Fl_Round_Button *btnSQLtype[2]={(Fl_Round_Button *)0};

static void cb_btnSQLtype1(Fl_Round_Button*, void*) {
  btnSQLtype[0]->value(0);
cbSQLtype();
}

Fl_Group *TXtab=(Fl_Group *)0;

Fl_Check_Button *btnAmpOnOff=(Fl_Check_Button *)0;

static void cb_btnAmpOnOff(Fl_Check_Button*, void*) {
  cbbtnAmpOnOff();
}

Fl_Counter *sldrXmtEqualizer=(Fl_Counter *)0;

static void cb_sldrXmtEqualizer(Fl_Counter*, void*) {
  cbsldrXmtEqualizer();
}

Fl_Group *OSCtab=(Fl_Group *)0;

Fl_Counter *ctr_vfo_adj=(Fl_Counter *)0;

static void cb_ctr_vfo_adj(Fl_Counter* o, void*) {
  xcvrState.VFOADJ=o->value();
movFreq();
movFreqB();
}

Fl_Counter *ctr_vfo_offset=(Fl_Counter *)0;

static void cb_ctr_vfo_offset(Fl_Counter* o, void*) {
  xcvrState.VFO_OFFSET = o->value();
movFreq();
movFreqB();
}

Fl_Double_Window* kcat_window() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(530, 355, _("kcat"));
    w = o;
    o->color((Fl_Color)51);
    { Fl_Menu_Bar* o = new Fl_Menu_Bar(2, 2, 350, 22);
      o->labelsize(12);
      o->textsize(12);
      { Fl_Menu_Item* o = &menu_[6];
        xcvrState.tooltips ? o->set() :o->clear();
      }
      if (!menu__i18n_done) {
        int i=0;
        for ( ; i<23; i++)
          if (menu_[i].label())
            menu_[i].label(_(menu_[i].label()));
        menu__i18n_done = 1;
      }
      o->menu(menu_);
    } // Fl_Menu_Bar* o
    { cFreqControl* o = FreqDisp = new cFreqControl(2, 25, 170, 40, _("8"));
      FreqDisp->box(FL_DOWN_BOX);
      FreqDisp->color(FL_BACKGROUND_COLOR);
      FreqDisp->selection_color(FL_BACKGROUND_COLOR);
      FreqDisp->labeltype(FL_NORMAL_LABEL);
      FreqDisp->labelfont(0);
      FreqDisp->labelsize(14);
      FreqDisp->labelcolor(FL_FOREGROUND_COLOR);
      FreqDisp->align(Fl_Align(FL_ALIGN_CENTER));
      FreqDisp->when(FL_WHEN_RELEASE);
      o->SetONOFFCOLOR (FL_YELLOW, FL_BLACK);
      o->setCallBack(movFreq);
    } // cFreqControl* FreqDisp
    { cFreqControl* o = FreqDispB = new cFreqControl(180, 25, 170, 40, _("8"));
      FreqDispB->box(FL_DOWN_BOX);
      FreqDispB->color(FL_BACKGROUND_COLOR);
      FreqDispB->selection_color(FL_BACKGROUND_COLOR);
      FreqDispB->labeltype(FL_NORMAL_LABEL);
      FreqDispB->labelfont(0);
      FreqDispB->labelsize(14);
      FreqDispB->labelcolor(FL_FOREGROUND_COLOR);
      FreqDispB->align(Fl_Align(FL_ALIGN_CENTER));
      FreqDispB->when(FL_WHEN_RELEASE);
      o->SetONOFFCOLOR (FL_YELLOW, FL_BLACK);
      o->setCallBack(movFreqB);
    } // cFreqControl* FreqDispB
    { btnRxA_TxA = new Fl_Button(2, 67, 40, 20, _("A/A"));
      btnRxA_TxA->tooltip(_("T/R on A"));
      btnRxA_TxA->color(FL_LIGHT1);
      btnRxA_TxA->callback((Fl_Callback*)cb_btnRxA_TxA);
    } // Fl_Button* btnRxA_TxA
    { btnRxA_TxB = new Fl_Button(45, 67, 40, 20, _("A/B"));
      btnRxA_TxB->tooltip(_("Rx on A\nTx on B"));
      btnRxA_TxB->color(FL_LIGHT1);
      btnRxA_TxB->callback((Fl_Callback*)cb_btnRxA_TxB);
    } // Fl_Button* btnRxA_TxB
    { btnA2B = new Fl_Button(132, 67, 40, 20, _("@->"));
      btnA2B->tooltip(_("Vfo A --> Vfo B"));
      btnA2B->callback((Fl_Callback*)cb_btnA2B);
    } // Fl_Button* btnA2B
    { btnB2A = new Fl_Button(180, 67, 40, 20, _("@<-"));
      btnB2A->tooltip(_("Vfo B --> Vfo A"));
      btnB2A->callback((Fl_Callback*)cb_btnB2A);
    } // Fl_Button* btnB2A
    { btnRxB_TxA = new Fl_Button(266, 67, 40, 20, _("B/A"));
      btnRxB_TxA->tooltip(_("Rx on B\nTx on A"));
      btnRxB_TxA->color(FL_LIGHT1);
      btnRxB_TxA->callback((Fl_Callback*)cb_btnRxB_TxA);
    } // Fl_Button* btnRxB_TxA
    { btnRxB_TxB = new Fl_Button(310, 67, 40, 20, _("B/B"));
      btnRxB_TxB->tooltip(_("T/R on B"));
      btnRxB_TxB->color(FL_LIGHT1);
      btnRxB_TxB->callback((Fl_Callback*)cb_btnRxB_TxB);
    } // Fl_Button* btnRxB_TxB
    { FreqSelect = new Fl_Browser(377, 2, 150, 63);
      FreqSelect->tooltip(_("Select operating frequency/mode"));
      FreqSelect->type(2);
      FreqSelect->labelfont(4);
      FreqSelect->labelsize(12);
      FreqSelect->textfont(13);
      FreqSelect->textsize(12);
      FreqSelect->callback((Fl_Callback*)cb_FreqSelect);
    } // Fl_Browser* FreqSelect
    { btnAddFreq = new Fl_Button(355, 2, 20, 20, _("@|>"));
      btnAddFreq->tooltip(_("Add to list"));
      btnAddFreq->box(FL_PLASTIC_UP_BOX);
      btnAddFreq->labelsize(10);
      btnAddFreq->callback((Fl_Callback*)cb_btnAddFreq);
    } // Fl_Button* btnAddFreq
    { btnDelFreq = new Fl_Button(355, 23, 20, 20, _("@1+"));
      btnDelFreq->tooltip(_("Delete from list"));
      btnDelFreq->box(FL_PLASTIC_UP_BOX);
      btnDelFreq->labelsize(10);
      btnDelFreq->callback((Fl_Callback*)cb_btnDelFreq);
    } // Fl_Button* btnDelFreq
    { btnClearList = new Fl_Button(355, 45, 20, 20, _("@-1square"));
      btnClearList->tooltip(_("Clear list"));
      btnClearList->box(FL_PLASTIC_UP_BOX);
      btnClearList->labelsize(10);
      btnClearList->callback((Fl_Callback*)cb_btnClearList);
    } // Fl_Button* btnClearList
    { Fl_Wheel_Value_Slider* o = sldrRIT = new Fl_Wheel_Value_Slider(2, 88, 348, 20);
      sldrRIT->tooltip(_("RIT (-790 to 790 Hz)"));
      sldrRIT->type(5);
      sldrRIT->box(FL_DOWN_BOX);
      sldrRIT->color((Fl_Color)26);
      sldrRIT->selection_color(FL_BACKGROUND_COLOR);
      sldrRIT->labeltype(FL_NO_LABEL);
      sldrRIT->labelfont(0);
      sldrRIT->labelsize(14);
      sldrRIT->labelcolor(FL_FOREGROUND_COLOR);
      sldrRIT->minimum(-790);
      sldrRIT->maximum(790);
      sldrRIT->step(10);
      sldrRIT->textsize(14);
      sldrRIT->callback((Fl_Callback*)cb_sldrRIT);
      sldrRIT->align(Fl_Align(FL_ALIGN_RIGHT));
      sldrRIT->when(FL_WHEN_CHANGED);
      o->reverse(true);
    } // Fl_Wheel_Value_Slider* sldrRIT
    { Fl_Wheel_Value_Slider* o = sldrVOLUME = new Fl_Wheel_Value_Slider(2, 109, 348, 20, _("Audio Volume"));
      sldrVOLUME->tooltip(_("Audio output volume"));
      sldrVOLUME->type(5);
      sldrVOLUME->box(FL_DOWN_BOX);
      sldrVOLUME->color((Fl_Color)26);
      sldrVOLUME->selection_color(FL_BACKGROUND_COLOR);
      sldrVOLUME->labeltype(FL_NO_LABEL);
      sldrVOLUME->labelfont(0);
      sldrVOLUME->labelsize(14);
      sldrVOLUME->labelcolor(FL_FOREGROUND_COLOR);
      sldrVOLUME->value(0.2);
      sldrVOLUME->textsize(14);
      sldrVOLUME->callback((Fl_Callback*)cb_sldrVOLUME);
      sldrVOLUME->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
      sldrVOLUME->when(FL_WHEN_CHANGED);
      o->reverse(true);
    } // Fl_Wheel_Value_Slider* sldrVOLUME
    { Fl_Wheel_Value_Slider* o = sldrIFSHIFT = new Fl_Wheel_Value_Slider(2, 130, 348, 20);
      sldrIFSHIFT->tooltip(_("Set IF Shift Frequency"));
      sldrIFSHIFT->type(5);
      sldrIFSHIFT->box(FL_DOWN_BOX);
      sldrIFSHIFT->color((Fl_Color)26);
      sldrIFSHIFT->selection_color(FL_BACKGROUND_COLOR);
      sldrIFSHIFT->labeltype(FL_NO_LABEL);
      sldrIFSHIFT->labelfont(0);
      sldrIFSHIFT->labelsize(14);
      sldrIFSHIFT->labelcolor(FL_FOREGROUND_COLOR);
      sldrIFSHIFT->minimum(-1280);
      sldrIFSHIFT->maximum(1270);
      sldrIFSHIFT->step(10);
      sldrIFSHIFT->textsize(14);
      sldrIFSHIFT->callback((Fl_Callback*)cb_sldrIFSHIFT);
      sldrIFSHIFT->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
      sldrIFSHIFT->when(FL_WHEN_CHANGED);
      o->reverse(true);
    } // Fl_Wheel_Value_Slider* sldrIFSHIFT
    { Fl_Wheel_Value_Slider* o = sldrNOTCH = new Fl_Wheel_Value_Slider(2, 151, 348, 20);
      sldrNOTCH->tooltip(_("Set Notch Frequency"));
      sldrNOTCH->type(5);
      sldrNOTCH->box(FL_DOWN_BOX);
      sldrNOTCH->color((Fl_Color)26);
      sldrNOTCH->selection_color(FL_BACKGROUND_COLOR);
      sldrNOTCH->labeltype(FL_NO_LABEL);
      sldrNOTCH->labelfont(0);
      sldrNOTCH->labelsize(14);
      sldrNOTCH->labelcolor(FL_FOREGROUND_COLOR);
      sldrNOTCH->minimum(200);
      sldrNOTCH->maximum(2750);
      sldrNOTCH->step(10);
      sldrNOTCH->textsize(14);
      sldrNOTCH->callback((Fl_Callback*)cb_sldrNOTCH);
      sldrNOTCH->align(Fl_Align(FL_ALIGN_CENTER));
      sldrNOTCH->when(FL_WHEN_CHANGED);
      o->reverse(true);
    } // Fl_Wheel_Value_Slider* sldrNOTCH
    { Fl_Wheel_Value_Slider* o = sldrDepth = new Fl_Wheel_Value_Slider(2, 152, 340, 18);
      sldrDepth->tooltip(_("Set Notch Depth"));
      sldrDepth->type(5);
      sldrDepth->box(FL_DOWN_BOX);
      sldrDepth->color((Fl_Color)26);
      sldrDepth->selection_color(FL_BACKGROUND_COLOR);
      sldrDepth->labeltype(FL_NO_LABEL);
      sldrDepth->labelfont(0);
      sldrDepth->labelsize(14);
      sldrDepth->labelcolor(FL_FOREGROUND_COLOR);
      sldrDepth->maximum(100);
      sldrDepth->step(1);
      sldrDepth->value(50);
      sldrDepth->textsize(14);
      sldrDepth->callback((Fl_Callback*)cb_sldrDepth);
      sldrDepth->align(Fl_Align(FL_ALIGN_CENTER));
      sldrDepth->when(FL_WHEN_CHANGED);
      sldrDepth->hide();
      o->reverse(true);
    } // Fl_Wheel_Value_Slider* sldrDepth
    { Fl_Wheel_Value_Slider* o = sldrNR = new Fl_Wheel_Value_Slider(2, 173, 348, 20);
      sldrNR->tooltip(_("Noise Reduction (min -> max)"));
      sldrNR->type(5);
      sldrNR->box(FL_DOWN_BOX);
      sldrNR->color((Fl_Color)26);
      sldrNR->selection_color(FL_BACKGROUND_COLOR);
      sldrNR->labeltype(FL_NO_LABEL);
      sldrNR->labelfont(0);
      sldrNR->labelsize(14);
      sldrNR->labelcolor(FL_FOREGROUND_COLOR);
      sldrNR->maximum(255);
      sldrNR->step(1);
      sldrNR->textsize(14);
      sldrNR->callback((Fl_Callback*)cb_sldrNR);
      sldrNR->align(Fl_Align(FL_ALIGN_RIGHT));
      sldrNR->when(FL_WHEN_CHANGED);
      o->reverse(true);
    } // Fl_Wheel_Value_Slider* sldrNR
    { opMODE = new Fl_Choice(2, 194, 85, 20);
      opMODE->tooltip(_("Select Mode"));
      opMODE->down_box(FL_BORDER_BOX);
      opMODE->callback((Fl_Callback*)cb_opMODE);
    } // Fl_Choice* opMODE
    { opBW = new Fl_Choice(98, 194, 85, 20);
      opBW->tooltip(_("Select Bandwidth"));
      opBW->down_box(FL_BORDER_BOX);
      opBW->callback((Fl_Callback*)cb_opBW);
    } // Fl_Choice* opBW
    { opNOTCH = new Fl_Choice(194, 194, 85, 20);
      opNOTCH->tooltip(_("Select Notch Depth"));
      opNOTCH->down_box(FL_BORDER_BOX);
      opNOTCH->callback((Fl_Callback*)cb_opNOTCH);
    } // Fl_Choice* opNOTCH
    { Fl_Wheel_Value_Slider* o = sldrMICGAIN = new Fl_Wheel_Value_Slider(2, 215, 348, 20, _("Mic"));
      sldrMICGAIN->tooltip(_("Mic / Gain control"));
      sldrMICGAIN->type(5);
      sldrMICGAIN->box(FL_DOWN_BOX);
      sldrMICGAIN->color((Fl_Color)26);
      sldrMICGAIN->selection_color(FL_BACKGROUND_COLOR);
      sldrMICGAIN->labeltype(FL_NORMAL_LABEL);
      sldrMICGAIN->labelfont(0);
      sldrMICGAIN->labelsize(14);
      sldrMICGAIN->labelcolor(FL_FOREGROUND_COLOR);
      sldrMICGAIN->textsize(14);
      sldrMICGAIN->callback((Fl_Callback*)cb_sldrMICGAIN);
      sldrMICGAIN->align(Fl_Align(FL_ALIGN_RIGHT));
      sldrMICGAIN->when(FL_WHEN_CHANGED);
      o->reverse(true);
    } // Fl_Wheel_Value_Slider* sldrMICGAIN
    { Fl_Wheel_Value_Slider* o = sldrPOWER = new Fl_Wheel_Value_Slider(2, 236, 348, 20, _("Pwr"));
      sldrPOWER->tooltip(_("Set Power Output"));
      sldrPOWER->type(5);
      sldrPOWER->box(FL_DOWN_BOX);
      sldrPOWER->color((Fl_Color)26);
      sldrPOWER->selection_color(FL_BACKGROUND_COLOR);
      sldrPOWER->labeltype(FL_NORMAL_LABEL);
      sldrPOWER->labelfont(0);
      sldrPOWER->labelsize(14);
      sldrPOWER->labelcolor(FL_FOREGROUND_COLOR);
      sldrPOWER->maximum(100);
      sldrPOWER->step(1);
      sldrPOWER->value(20);
      sldrPOWER->textsize(14);
      sldrPOWER->callback((Fl_Callback*)cb_sldrPOWER);
      sldrPOWER->align(Fl_Align(FL_ALIGN_RIGHT));
      sldrPOWER->when(FL_WHEN_CHANGED);
      o->reverse(true);
    } // Fl_Wheel_Value_Slider* sldrPOWER
    { btnRIT = new Fl_Light_Button(352, 88, 54, 20, _("RIT"));
      btnRIT->tooltip(_("RIT on/off"));
      btnRIT->callback((Fl_Callback*)cb_btnRIT);
    } // Fl_Light_Button* btnRIT
    { btnVol = new Fl_Light_Button(352, 109, 54, 20, _("Spkr"));
      btnVol->tooltip(_("Speaker on/off"));
      btnVol->value(1);
      btnVol->callback((Fl_Callback*)cb_btnVol);
    } // Fl_Light_Button* btnVol
    { btnIFsh = new Fl_Light_Button(352, 130, 54, 20, _("IFsh"));
      btnIFsh->tooltip(_("IF Shift On/Off"));
      btnIFsh->callback((Fl_Callback*)cb_btnIFsh);
    } // Fl_Light_Button* btnIFsh
    { btnNotch = new Fl_Light_Button(352, 151, 54, 20, _("Ntch"));
      btnNotch->tooltip(_("Notch - Manual (off) Auto (on)"));
      btnNotch->callback((Fl_Callback*)cb_btnNotch);
    } // Fl_Light_Button* btnNotch
    { btnNR = new Fl_Light_Button(352, 173, 54, 20, _("NR"));
      btnNR->tooltip(_("NR on/off"));
      btnNR->callback((Fl_Callback*)cb_btnNR);
    } // Fl_Light_Button* btnNR
    { btnAttenuator = new Fl_Light_Button(290, 194, 60, 20, _("Att"));
      btnAttenuator->tooltip(_("Attenuator On/Off"));
      btnAttenuator->callback((Fl_Callback*)cb_btnAttenuator);
    } // Fl_Light_Button* btnAttenuator
    { btnPreamp = new Fl_Light_Button(352, 194, 54, 20, _("Pre"));
      btnPreamp->tooltip(_("Preamp On/Off"));
      btnPreamp->callback((Fl_Callback*)cb_btnPreamp);
    } // Fl_Light_Button* btnPreamp
    { Fl_Group* o = new Fl_Group(407, 67, 122, 212);
      o->box(FL_THIN_DOWN_BOX);
      { grpMeters = new Fl_Group(408, 68, 120, 210);
        grpMeters->box(FL_FLAT_BOX);
        grpMeters->color(FL_GRAY0);
        grpMeters->selection_color(FL_LIGHT2);
        grpMeters->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
        { Fl_Button* o = btnSmeter = new Fl_Button(408, 73, 32, 200);
          btnSmeter->tooltip(_("Click - change scale"));
          btnSmeter->box(FL_FLAT_BOX);
          btnSmeter->down_box(FL_FLAT_BOX);
          btnSmeter->color((Fl_Color)48);
          btnSmeter->selection_color((Fl_Color)48);
          btnSmeter->callback((Fl_Callback*)cb_btnSmeter);
          btnSmeter->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
          o->image(image_smeter);
        } // Fl_Button* btnSmeter
        { Fl_SigBar* o = sldrRcvSignal = new Fl_SigBar(441, 82, 8, 182);
          sldrRcvSignal->box(FL_FLAT_BOX);
          sldrRcvSignal->color((Fl_Color)10);
          sldrRcvSignal->selection_color((Fl_Color)2);
          sldrRcvSignal->labeltype(FL_NORMAL_LABEL);
          sldrRcvSignal->labelfont(0);
          sldrRcvSignal->labelsize(14);
          sldrRcvSignal->labelcolor(FL_FOREGROUND_COLOR);
          sldrRcvSignal->align(Fl_Align(FL_ALIGN_CENTER));
          sldrRcvSignal->when(FL_WHEN_RELEASE);
          o->minimum(0.0f);
          o->maximum(-128.0f);
          o->horizontal(false);
        } // Fl_SigBar* sldrRcvSignal
        { Fl_Button* o = btnPower = new Fl_Button(451, 73, 27, 200);
          btnPower->tooltip(_("Click - FWD / ALC"));
          btnPower->box(FL_FLAT_BOX);
          btnPower->down_box(FL_FLAT_BOX);
          btnPower->color((Fl_Color)48);
          btnPower->selection_color((Fl_Color)48);
          btnPower->callback((Fl_Callback*)cb_btnPower);
          btnPower->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
          o->image(image_p150);
        } // Fl_Button* btnPower
        { Fl_SigBar* o = sldrFwdPwr = new Fl_SigBar(479, 82, 8, 182);
          sldrFwdPwr->box(FL_FLAT_BOX);
          sldrFwdPwr->color((Fl_Color)14);
          sldrFwdPwr->selection_color((Fl_Color)6);
          sldrFwdPwr->labeltype(FL_NORMAL_LABEL);
          sldrFwdPwr->labelfont(0);
          sldrFwdPwr->labelsize(14);
          sldrFwdPwr->labelcolor(FL_FOREGROUND_COLOR);
          sldrFwdPwr->align(Fl_Align(FL_ALIGN_CENTER));
          sldrFwdPwr->when(FL_WHEN_RELEASE);
          o->minimum(120.0f);
          o->maximum(0.0f);
          o->horizontal(false);
        } // Fl_SigBar* sldrFwdPwr
        { Fl_Box* o = boxSWR = new Fl_Box(490, 73, 25, 200);
          boxSWR->box(FL_FLAT_BOX);
          boxSWR->color(FL_LIGHT1);
          boxSWR->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
          o->image(image_swr);
        } // Fl_Box* boxSWR
        { Fl_SigBar* o = sldrRefPwr = new Fl_SigBar(516, 82, 8, 182);
          sldrRefPwr->box(FL_FLAT_BOX);
          sldrRefPwr->color((Fl_Color)9);
          sldrRefPwr->selection_color((Fl_Color)1);
          sldrRefPwr->labeltype(FL_NORMAL_LABEL);
          sldrRefPwr->labelfont(0);
          sldrRefPwr->labelsize(14);
          sldrRefPwr->labelcolor(FL_FOREGROUND_COLOR);
          sldrRefPwr->align(Fl_Align(FL_ALIGN_CENTER));
          sldrRefPwr->when(FL_WHEN_RELEASE);
          o->minimum(50.0f);
          o->maximum(0.0f);
          o->horizontal(false);
        } // Fl_SigBar* sldrRefPwr
        { boxSquelch = new Fl_Box(441, 71, 9, 9);
          boxSquelch->box(FL_FLAT_BOX);
          boxSquelch->color((Fl_Color)175);
          boxSquelch->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
        } // Fl_Box* boxSquelch
        grpMeters->end();
      } // Fl_Group* grpMeters
      o->end();
    } // Fl_Group* o
    { btn_show_controls = new Fl_Button(2, 258, 18, 20, _("@-22->"));
      btn_show_controls->tooltip(_("Show/Hide controls"));
      btn_show_controls->callback((Fl_Callback*)cb_btn_show_controls);
    } // Fl_Button* btn_show_controls
    { btnPTT = new Fl_Light_Button(24, 258, 50, 20, _("PTT"));
      btnPTT->tooltip(_("Xmt On/Off"));
      btnPTT->callback((Fl_Callback*)cb_btnPTT);
    } // Fl_Light_Button* btnPTT
    { btn_tune = new Fl_Button(78, 258, 50, 20, _("Tune"));
      btn_tune->tooltip(_("Manual Tune"));
      btn_tune->callback((Fl_Callback*)cb_btn_tune);
    } // Fl_Button* btn_tune
    { btn_autotune = new Fl_Light_Button(132, 258, 50, 20, _("A/T"));
      btn_autotune->tooltip(_("Auto tuner ON/OFF"));
      btn_autotune->callback((Fl_Callback*)cb_btn_autotune);
    } // Fl_Light_Button* btn_autotune
    { btnCarrier = new Fl_Light_Button(187, 258, 50, 20, _("Carr"));
      btnCarrier->tooltip(_("Constant Carrier"));
      btnCarrier->callback((Fl_Callback*)cb_btnCarrier);
    } // Fl_Light_Button* btnCarrier
    { Fl_Choice* o = antSelect = new Fl_Choice(240, 258, 110, 20);
      antSelect->down_box(FL_BORDER_BOX);
      antSelect->callback((Fl_Callback*)cb_antSelect);
      o->add("Ant: table|Ant: A-A|Ant: A-B|Ant: B-A|Ant: B-B");
      o->value(0);
    } // Fl_Choice* antSelect
    { txtTEMP = new Fl_Output(352, 258, 40, 20, _("C"));
      txtTEMP->tooltip(_("Click C / F"));
      txtTEMP->color(FL_FOREGROUND_COLOR);
      txtTEMP->selection_color(FL_BACKGROUND2_COLOR);
      txtTEMP->labelfont(13);
      txtTEMP->textfont(13);
      txtTEMP->textcolor((Fl_Color)62);
      txtTEMP->callback((Fl_Callback*)cb_txtTEMP);
      txtTEMP->align(Fl_Align(FL_ALIGN_RIGHT));
    } // Fl_Output* txtTEMP
    { tabs = new Fl_Tabs(1, 282, 526, 70);
      tabs->selection_color(FL_LIGHT1);
      { CWtab = new Fl_Group(1, 302, 526, 50, _("CW"));
        CWtab->color(FL_LIGHT1);
        CWtab->selection_color(FL_LIGHT1);
        CWtab->hide();
        { btnSPOT = new Fl_Light_Button(2, 310, 55, 22, _("Spot"));
          btnSPOT->callback((Fl_Callback*)cb_btnSPOT);
        } // Fl_Light_Button* btnSPOT
        { Fl_Counter* o = cntrWPM = new Fl_Counter(59, 310, 90, 22, _("Wpm"));
          cntrWPM->tooltip(_("Char rate in WPM"));
          cntrWPM->minimum(5);
          cntrWPM->maximum(80);
          cntrWPM->step(1);
          cntrWPM->value(18);
          cntrWPM->callback((Fl_Callback*)cb_cntrWPM);
          o->lstep(5);
        } // Fl_Counter* cntrWPM
        { sldrCWweight = new Fl_Wheel_Value_Slider(152, 310, 120, 22, _("         Lite        Hvy"));
          sldrCWweight->type(5);
          sldrCWweight->box(FL_DOWN_BOX);
          sldrCWweight->color((Fl_Color)26);
          sldrCWweight->selection_color(FL_BACKGROUND_COLOR);
          sldrCWweight->labeltype(FL_NORMAL_LABEL);
          sldrCWweight->labelfont(0);
          sldrCWweight->labelsize(14);
          sldrCWweight->labelcolor(FL_FOREGROUND_COLOR);
          sldrCWweight->maximum(255);
          sldrCWweight->step(1);
          sldrCWweight->value(128);
          sldrCWweight->textsize(14);
          sldrCWweight->callback((Fl_Callback*)cb_sldrCWweight);
          sldrCWweight->align(Fl_Align(FL_ALIGN_BOTTOM_LEFT));
          sldrCWweight->when(FL_WHEN_CHANGED);
        } // Fl_Wheel_Value_Slider* sldrCWweight
        { sldrCWattack = new Fl_Wheel_Value_Slider(274, 310, 120, 22, _("         Soft     Hard"));
          sldrCWattack->type(5);
          sldrCWattack->box(FL_DOWN_BOX);
          sldrCWattack->color((Fl_Color)26);
          sldrCWattack->selection_color(FL_BACKGROUND_COLOR);
          sldrCWattack->labeltype(FL_NORMAL_LABEL);
          sldrCWattack->labelfont(0);
          sldrCWattack->labelsize(14);
          sldrCWattack->labelcolor(FL_FOREGROUND_COLOR);
          sldrCWattack->maximum(255);
          sldrCWattack->step(1);
          sldrCWattack->value(128);
          sldrCWattack->textsize(14);
          sldrCWattack->callback((Fl_Callback*)cb_sldrCWattack);
          sldrCWattack->align(Fl_Align(FL_ALIGN_BOTTOM_LEFT));
          sldrCWattack->when(FL_WHEN_CHANGED);
        } // Fl_Wheel_Value_Slider* sldrCWattack
        { Fl_Choice* o = mnuCWmode = new Fl_Choice(397, 310, 75, 22, _("Mode"));
          mnuCWmode->down_box(FL_BORDER_BOX);
          mnuCWmode->callback((Fl_Callback*)cb_mnuCWmode);
          mnuCWmode->align(Fl_Align(FL_ALIGN_BOTTOM));
          o->add("Left|Right|Str't");
          o->value(1);
        } // Fl_Choice* mnuCWmode
        { btnQSKonoff = new Fl_Check_Button(475, 312, 50, 18, _("QSK"));
          btnQSKonoff->tooltip(_("Enable keyer"));
          btnQSKonoff->down_box(FL_DOWN_BOX);
          btnQSKonoff->callback((Fl_Callback*)cb_btnQSKonoff);
        } // Fl_Check_Button* btnQSKonoff
        CWtab->end();
      } // Fl_Group* CWtab
      { CW2tab = new Fl_Group(2, 302, 525, 50, _("CW -xtra"));
        CW2tab->color(FL_LIGHT1);
        CW2tab->selection_color(FL_LIGHT1);
        CW2tab->hide();
        { Fl_Counter* o = sldrSideTone = new Fl_Counter(49, 307, 100, 22, _("S-T/Spch-Mon"));
          sldrSideTone->tooltip(_("Side tone volume"));
          sldrSideTone->minimum(0);
          sldrSideTone->maximum(100);
          sldrSideTone->step(1);
          sldrSideTone->value(24);
          sldrSideTone->callback((Fl_Callback*)cb_sldrSideTone);
          o->lstep(10);
        } // Fl_Counter* sldrSideTone
        { Fl_Choice* o = mnuCWoffset = new Fl_Choice(220, 307, 100, 22, _("Offset"));
          mnuCWoffset->down_box(FL_BORDER_BOX);
          mnuCWoffset->callback((Fl_Callback*)cb_mnuCWoffset);
          mnuCWoffset->align(Fl_Align(FL_ALIGN_BOTTOM));
          o->add("300|400|500|600|700|800");
          o->value(4);
        } // Fl_Choice* mnuCWoffset
        { Fl_Choice* o = mnuCWdefFilter = new Fl_Choice(391, 307, 100, 22, _("Def\' Filt\'"));
          mnuCWdefFilter->down_box(FL_BORDER_BOX);
          mnuCWdefFilter->callback((Fl_Callback*)cb_mnuCWdefFilter);
          mnuCWdefFilter->align(Fl_Align(FL_ALIGN_BOTTOM));
          o->add("Wide|Narrow");
          o->value(1);
        } // Fl_Choice* mnuCWdefFilter
        CW2tab->end();
      } // Fl_Group* CW2tab
      { VOXtab = new Fl_Group(2, 302, 525, 50, _("Vox"));
        VOXtab->hide();
        { Fl_Counter* o = sldrVoxLevel = new Fl_Counter(25, 310, 100, 22, _("gain"));
          sldrVoxLevel->minimum(0);
          sldrVoxLevel->maximum(255);
          sldrVoxLevel->step(1);
          sldrVoxLevel->callback((Fl_Callback*)cb_sldrVoxLevel);
          o->lstep(10);
        } // Fl_Counter* sldrVoxLevel
        { Fl_Counter* o = sldrAntiVox = new Fl_Counter(160, 310, 100, 22, _("anti"));
          sldrAntiVox->minimum(0);
          sldrAntiVox->maximum(255);
          sldrAntiVox->step(1);
          sldrAntiVox->callback((Fl_Callback*)cb_sldrAntiVox);
          o->lstep(10);
        } // Fl_Counter* sldrAntiVox
        { Fl_Counter* o = sldrVoxDelay = new Fl_Counter(295, 310, 100, 22, _("delay"));
          sldrVoxDelay->minimum(0);
          sldrVoxDelay->maximum(100);
          sldrVoxDelay->step(1);
          sldrVoxDelay->callback((Fl_Callback*)cb_sldrVoxDelay);
          o->lstep(10);
        } // Fl_Counter* sldrVoxDelay
        { btnVoxOnOff = new Fl_Light_Button(431, 310, 70, 22, _("VOX"));
          btnVoxOnOff->callback((Fl_Callback*)cb_btnVoxOnOff);
        } // Fl_Light_Button* btnVoxOnOff
        VOXtab->end();
      } // Fl_Group* VOXtab
      { SPCHtab = new Fl_Group(2, 302, 525, 50, _("Speech"));
        SPCHtab->hide();
        { btnSpchMon = new Fl_Light_Button(106, 310, 70, 22, _("Mon\'"));
          btnSpchMon->tooltip(_("Monitor both mic and aux input"));
          btnSpchMon->callback((Fl_Callback*)cb_btnSpchMon);
        } // Fl_Light_Button* btnSpchMon
        { Fl_Counter* o = sldrCompression = new Fl_Counter(214, 310, 100, 22, _("Comp"));
          sldrCompression->minimum(0);
          sldrCompression->maximum(255);
          sldrCompression->step(1);
          sldrCompression->callback((Fl_Callback*)cb_sldrCompression);
          o->lstep(10);
        } // Fl_Counter* sldrCompression
        { btnSpchProc = new Fl_Light_Button(353, 310, 70, 22, _("Proc\'"));
          btnSpchProc->callback((Fl_Callback*)cb_btnSpchProc);
        } // Fl_Light_Button* btnSpchProc
        SPCHtab->end();
      } // Fl_Group* SPCHtab
      { RXtab = new Fl_Group(2, 302, 525, 50, _("RX"));
        RXtab->hide();
        { Fl_Counter* o = sldrSqlLevel = new Fl_Counter(18, 309, 100, 22, _("SQL dbm"));
          sldrSqlLevel->minimum(-127);
          sldrSqlLevel->maximum(0);
          sldrSqlLevel->step(1);
          sldrSqlLevel->value(-127);
          sldrSqlLevel->callback((Fl_Callback*)cb_sldrSqlLevel);
          o->lstep(10);
        } // Fl_Counter* sldrSqlLevel
        { btnSQLtype[0] = new Fl_Round_Button(159, 308, 70, 21, _("Level"));
          btnSQLtype[0]->down_box(FL_ROUND_DOWN_BOX);
          btnSQLtype[0]->value(1);
          btnSQLtype[0]->callback((Fl_Callback*)cb_btnSQLtype);
        } // Fl_Round_Button* btnSQLtype[0]
        { Fl_Counter* o = sldrAgcAction = new Fl_Counter(270, 309, 100, 22, _("AGC action"));
          sldrAgcAction->minimum(0);
          sldrAgcAction->maximum(255);
          sldrAgcAction->step(1);
          sldrAgcAction->callback((Fl_Callback*)cb_sldrAgcAction);
          o->lstep(10);
        } // Fl_Counter* sldrAgcAction
        { Fl_Counter* o = sldrAgcSpeed = new Fl_Counter(412, 309, 100, 22, _("AGC speed"));
          sldrAgcSpeed->minimum(0);
          sldrAgcSpeed->maximum(255);
          sldrAgcSpeed->step(1);
          sldrAgcSpeed->value(127);
          sldrAgcSpeed->callback((Fl_Callback*)cb_sldrAgcSpeed);
          o->lstep(10);
        } // Fl_Counter* sldrAgcSpeed
        { btnSQLtype[1] = new Fl_Round_Button(159, 329, 70, 21, _("Syllabic"));
          btnSQLtype[1]->down_box(FL_ROUND_DOWN_BOX);
          btnSQLtype[1]->callback((Fl_Callback*)cb_btnSQLtype1);
        } // Fl_Round_Button* btnSQLtype[1]
        RXtab->end();
      } // Fl_Group* RXtab
      { TXtab = new Fl_Group(2, 302, 525, 50, _("TX"));
        { btnAmpOnOff = new Fl_Check_Button(179, 314, 107, 15, _("Amp on/off"));
          btnAmpOnOff->down_box(FL_DOWN_BOX);
          btnAmpOnOff->callback((Fl_Callback*)cb_btnAmpOnOff);
        } // Fl_Check_Button* btnAmpOnOff
        { Fl_Counter* o = sldrXmtEqualizer = new Fl_Counter(299, 311, 100, 22, _("Equilization"));
          sldrXmtEqualizer->minimum(-127);
          sldrXmtEqualizer->maximum(127);
          sldrXmtEqualizer->step(1);
          sldrXmtEqualizer->callback((Fl_Callback*)cb_sldrXmtEqualizer);
          o->lstep(10);
        } // Fl_Counter* sldrXmtEqualizer
        TXtab->end();
      } // Fl_Group* TXtab
      { OSCtab = new Fl_Group(2, 302, 525, 50, _("Osc\'"));
        OSCtab->hide();
        { Fl_Counter* o = ctr_vfo_adj = new Fl_Counter(80, 312, 120, 22, _("DDS adjust (ppm)"));
          ctr_vfo_adj->callback((Fl_Callback*)cb_ctr_vfo_adj);
          ctr_vfo_adj->align(Fl_Align(34));
          o->lstep(1);
          o->value(xcvrState.VFOADJ);
        } // Fl_Counter* ctr_vfo_adj
        { Fl_Counter* o = ctr_vfo_offset = new Fl_Counter(325, 311, 120, 22, _("DDS offset"));
          ctr_vfo_offset->step(1);
          ctr_vfo_offset->callback((Fl_Callback*)cb_ctr_vfo_offset);
          ctr_vfo_offset->align(Fl_Align(34));
          o->lstep(10);
          o->value(xcvrState.VFO_OFFSET);
        } // Fl_Counter* ctr_vfo_offset
        OSCtab->end();
      } // Fl_Group* OSCtab
      tabs->end();
    } // Fl_Tabs* tabs
    o->end();
  } // Fl_Double_Window* o
  return w;
}

Fl_Choice *selectCommPort=(Fl_Choice *)0;

Fl_Return_Button *btnOkCommsDialog=(Fl_Return_Button *)0;

static void cb_btnOkCommsDialog(Fl_Return_Button*, void*) {
  cbOkCommsDialog();
}

Fl_Double_Window* CommsDialog() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(323, 104, _("Select"));
    w = o;
    o->box(FL_UP_BOX);
    { selectCommPort = new Fl_Choice(34, 60, 175, 21, _("Port:"));
      selectCommPort->down_box(FL_BORDER_BOX);
      selectCommPort->align(Fl_Align(FL_ALIGN_TOP_LEFT));
    } // Fl_Choice* selectCommPort
    { btnOkCommsDialog = new Fl_Return_Button(218, 60, 68, 21, _("OK"));
      btnOkCommsDialog->callback((Fl_Callback*)cb_btnOkCommsDialog);
    } // Fl_Return_Button* btnOkCommsDialog
    { new Fl_Box(5, 3, 312, 41, _("Select the KC505 serial port\nUse TEST for a testdrive"));
    } // Fl_Box* o
    o->set_modal();
    o->end();
  } // Fl_Double_Window* o
  return w;
}

Fl_Int_Input *txtFreqRange=(Fl_Int_Input *)0;

Fl_Button *btnRcvAnt=(Fl_Button *)0;

static void cb_btnRcvAnt(Fl_Button*, void*) {
  if (btnRcvAnt->value() == 1) btnRcvAnt->label("B");
else btnRcvAnt->label("A");
}

Fl_Button *btnXmtAnt=(Fl_Button *)0;

static void cb_btnXmtAnt(Fl_Button*, void*) {
  if (btnXmtAnt->value() == 1) btnXmtAnt->label("B");
else btnXmtAnt->label("A");
}

Fl_Browser *brwsAntRanges=(Fl_Browser *)0;

static void cb_brwsAntRanges(Fl_Browser*, void*) {
  cbbrwsAntRanges();
}

Fl_Button *btnAddAntRange=(Fl_Button *)0;

static void cb_btnAddAntRange(Fl_Button*, void*) {
  cbAddAntRange();
}

Fl_Button *btnDeleteAntRange=(Fl_Button *)0;

static void cb_btnDeleteAntRange(Fl_Button*, void*) {
  cbDeleteAntRange();
}

Fl_Return_Button *btnAntRangeDialogOK=(Fl_Return_Button *)0;

static void cb_btnAntRangeDialogOK(Fl_Return_Button*, void*) {
  cbAntRangeDialogOK();
}

Fl_Double_Window* FreqRangesDialog() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(260, 170, _("Antenna Port Setup"));
    w = o;
    { txtFreqRange = new Fl_Int_Input(4, 25, 75, 25);
      txtFreqRange->tooltip(_("Enter Start Freq in KHz"));
      txtFreqRange->type(2);
      txtFreqRange->textfont(13);
      txtFreqRange->align(Fl_Align(FL_ALIGN_TOP_LEFT));
    } // Fl_Int_Input* txtFreqRange
    { btnRcvAnt = new Fl_Button(82, 25, 30, 25, _("A"));
      btnRcvAnt->type(1);
      btnRcvAnt->down_box(FL_UP_BOX);
      btnRcvAnt->labelfont(1);
      btnRcvAnt->callback((Fl_Callback*)cb_btnRcvAnt);
    } // Fl_Button* btnRcvAnt
    { btnXmtAnt = new Fl_Button(112, 25, 30, 25, _("A"));
      btnXmtAnt->type(1);
      btnXmtAnt->down_box(FL_UP_BOX);
      btnXmtAnt->labelfont(1);
      btnXmtAnt->callback((Fl_Callback*)cb_btnXmtAnt);
    } // Fl_Button* btnXmtAnt
    { new Fl_Box(79, 5, 30, 20, _("Rcv"));
    } // Fl_Box* o
    { new Fl_Box(110, 5, 30, 20, _("Xmt"));
    } // Fl_Box* o
    { brwsAntRanges = new Fl_Browser(147, 5, 108, 160);
      brwsAntRanges->type(2);
      brwsAntRanges->labelfont(4);
      brwsAntRanges->textfont(13);
      brwsAntRanges->callback((Fl_Callback*)cb_brwsAntRanges);
    } // Fl_Browser* brwsAntRanges
    { btnAddAntRange = new Fl_Button(70, 55, 72, 25, _("Add @>|"));
      btnAddAntRange->callback((Fl_Callback*)cb_btnAddAntRange);
      btnAddAntRange->align(Fl_Align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE));
    } // Fl_Button* btnAddAntRange
    { btnDeleteAntRange = new Fl_Button(70, 83, 72, 25, _("Delete @#2|>"));
      btnDeleteAntRange->callback((Fl_Callback*)cb_btnDeleteAntRange);
      btnDeleteAntRange->align(Fl_Align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE));
    } // Fl_Button* btnDeleteAntRange
    { btnAntRangeDialogOK = new Fl_Return_Button(10, 135, 85, 25, _("OK"));
      btnAntRangeDialogOK->callback((Fl_Callback*)cb_btnAntRangeDialogOK);
    } // Fl_Return_Button* btnAntRangeDialogOK
    { new Fl_Box(1, 5, 75, 20, _("Freq kHz"));
    } // Fl_Box* o
    o->set_modal();
    o->end();
  } // Fl_Double_Window* o
  return w;
}

Fl_Text_Display *txtDataDisp=(Fl_Text_Display *)0;

Fl_Return_Button *btnNRAMok=(Fl_Return_Button *)0;

static void cb_btnNRAMok(Fl_Return_Button*, void*) {
  cbNRAMok();
}

Fl_Button *btnAntImpData=(Fl_Button *)0;

static void cb_btnAntImpData(Fl_Button*, void*) {
  cbNRAMAntImp();
}

Fl_Button *btnSmeterData=(Fl_Button *)0;

static void cb_btnSmeterData(Fl_Button*, void*) {
  cbNRAMsmeter();
}

Fl_Button *btnFreqRefData=(Fl_Button *)0;

static void cb_btnFreqRefData(Fl_Button*, void*) {
  cbNRAMFreqRef();
}

Fl_Button *btnPhaseDet=(Fl_Button *)0;

static void cb_btnPhaseDet(Fl_Button*, void*) {
  cbNRAMPhase();
}

Fl_Button *btnCarrierData=(Fl_Button *)0;

static void cb_btnCarrierData(Fl_Button*, void*) {
  cbNRAMCarrier();
}

Fl_Button *btnAllData=(Fl_Button *)0;

static void cb_btnAllData(Fl_Button*, void*) {
  cbNRAMAll();
}

Fl_Button *btnSaveData=(Fl_Button *)0;

static void cb_btnSaveData(Fl_Button*, void*) {
  cbNRAMSave();
}

Fl_Button *btnRestoreData=(Fl_Button *)0;

static void cb_btnRestoreData(Fl_Button*, void*) {
  cbNRAMRestore();
}

Fl_Button *btnClearData=(Fl_Button *)0;

static void cb_btnClearData(Fl_Button*, void*) {
  cbNRAMClearText();
}

Fl_Double_Window* NRAMdataDialog() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(400, 230, _("NRAM critical data"));
    w = o;
    { txtDataDisp = new Fl_Text_Display(1, 3, 395, 170);
    } // Fl_Text_Display* txtDataDisp
    { btnNRAMok = new Fl_Return_Button(319, 201, 75, 25, _("OK"));
      btnNRAMok->callback((Fl_Callback*)cb_btnNRAMok);
    } // Fl_Return_Button* btnNRAMok
    { btnAntImpData = new Fl_Button(0, 176, 60, 25, _("AntIMp"));
      btnAntImpData->callback((Fl_Callback*)cb_btnAntImpData);
    } // Fl_Button* btnAntImpData
    { btnSmeterData = new Fl_Button(60, 176, 60, 25, _("Smeter"));
      btnSmeterData->callback((Fl_Callback*)cb_btnSmeterData);
    } // Fl_Button* btnSmeterData
    { btnFreqRefData = new Fl_Button(120, 176, 60, 25, _("FreqRef"));
      btnFreqRefData->callback((Fl_Callback*)cb_btnFreqRefData);
    } // Fl_Button* btnFreqRefData
    { btnPhaseDet = new Fl_Button(0, 201, 60, 25, _("Phase"));
      btnPhaseDet->callback((Fl_Callback*)cb_btnPhaseDet);
    } // Fl_Button* btnPhaseDet
    { btnCarrierData = new Fl_Button(60, 201, 60, 25, _("Carrier"));
      btnCarrierData->callback((Fl_Callback*)cb_btnCarrierData);
    } // Fl_Button* btnCarrierData
    { btnAllData = new Fl_Button(120, 201, 60, 25, _("All"));
      btnAllData->callback((Fl_Callback*)cb_btnAllData);
    } // Fl_Button* btnAllData
    { btnSaveData = new Fl_Button(188, 201, 60, 25, _("Save"));
      btnSaveData->tooltip(_("Save to file: NRAMdata.txt"));
      btnSaveData->callback((Fl_Callback*)cb_btnSaveData);
    } // Fl_Button* btnSaveData
    { btnRestoreData = new Fl_Button(254, 200, 60, 25, _("Restore"));
      btnRestoreData->callback((Fl_Callback*)cb_btnRestoreData);
      btnRestoreData->hide();
    } // Fl_Button* btnRestoreData
    { btnClearData = new Fl_Button(188, 175, 60, 25, _("Clr Txt"));
      btnClearData->callback((Fl_Callback*)cb_btnClearData);
    } // Fl_Button* btnClearData
    o->end();
  } // Fl_Double_Window* o
  return w;
}

Fl_Counter *cntrFreqStd=(Fl_Counter *)0;

Fl_Button *btnCalibrate=(Fl_Button *)0;

static void cb_btnCalibrate(Fl_Button*, void*) {
  cbCalibrate();
}

Fl_Button *btnCalFinished=(Fl_Button *)0;

static void cb_btnCalFinished(Fl_Button*, void*) {
  cbCalFinished();
}

Fl_Double_Window* FreqCalibDialog() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(285, 62, _("Calibrate to Freq Std"));
    w = o;
    { cntrFreqStd = new Fl_Counter(15, 15, 80, 20, _("Freq. Std."));
      cntrFreqStd->minimum(5);
      cntrFreqStd->maximum(15);
      cntrFreqStd->value(10);
    } // Fl_Counter* cntrFreqStd
    { btnCalibrate = new Fl_Button(120, 15, 64, 20, _("Calibrate"));
      btnCalibrate->callback((Fl_Callback*)cb_btnCalibrate);
    } // Fl_Button* btnCalibrate
    { btnCalFinished = new Fl_Button(205, 15, 64, 20, _("Finished"));
      btnCalFinished->callback((Fl_Callback*)cb_btnCalFinished);
    } // Fl_Button* btnCalFinished
    o->end();
  } // Fl_Double_Window* o
  return w;
}

Fl_Box *lblTest=(Fl_Box *)0;

Fl_Button *prefFont=(Fl_Button *)0;

static void cb_prefFont(Fl_Button*, void*) {
  cbPrefFont();
}

Fl_Button *prefForeground=(Fl_Button *)0;

static void cb_prefForeground(Fl_Button*, void*) {
  cbPrefForeground();
}

Fl_Button *btnBacklight=(Fl_Button *)0;

static void cb_btnBacklight(Fl_Button*, void*) {
  cbBacklightColor();
}

Fl_Button *btnSmeterColor=(Fl_Button *)0;

static void cb_btnSmeterColor(Fl_Button*, void*) {
  cbSMeterColor();
}

Fl_Button *btnSWRcolor=(Fl_Button *)0;

static void cb_btnSWRcolor(Fl_Button*, void*) {
  cbSWRMeterColor();
}

Fl_Button *btnPowercolor=(Fl_Button *)0;

static void cb_btnPowercolor(Fl_Button*, void*) {
  cbPwrMeterColor();
}

Fl_Button *btnPeakColor=(Fl_Button *)0;

static void cb_btnPeakColor(Fl_Button*, void*) {
  cbPeakMeterColor();
}

Fl_Group *grpMeter1disp=(Fl_Group *)0;

Fl_Button *btnSmeterdisp=(Fl_Button *)0;

Fl_SigBar *sldrRcvSignaldisp=(Fl_SigBar *)0;

Fl_Box *boxSquelchdisp=(Fl_Box *)0;

Fl_Group *grpMeter2disp=(Fl_Group *)0;

Fl_Button *btnPowerdisp=(Fl_Button *)0;

Fl_SigBar *sldrFwdPwrdisp=(Fl_SigBar *)0;

Fl_Button *btnSWRdisp=(Fl_Button *)0;

Fl_SigBar *sldrRefPwrdisp=(Fl_SigBar *)0;

Fl_Choice *mnuScheme=(Fl_Choice *)0;

static void cb_mnuScheme(Fl_Choice* o, void*) {
  xcvrState.ui_scheme = o->text();
Fl::scheme(xcvrState.ui_scheme.c_str());
}

Fl_Button *pref_sys_foreground=(Fl_Button *)0;

static void cb_pref_sys_foreground(Fl_Button*, void*) {
  cb_sys_foreground();
}

Fl_Button *pref_sys_background=(Fl_Button *)0;

static void cb_pref_sys_background(Fl_Button*, void*) {
  cb_sys_background();
}

Fl_Button *prefsys_background2=(Fl_Button *)0;

static void cb_prefsys_background2(Fl_Button*, void*) {
  cb_sys_background2();
}

Fl_Button *prefsys_defaults=(Fl_Button *)0;

static void cb_prefsys_defaults(Fl_Button*, void*) {
  cb_sys_defaults();
}

Fl_Wheel_Value_Slider *sldrColors=(Fl_Wheel_Value_Slider *)0;

Fl_Button *pref_slider_background=(Fl_Button *)0;

static void cb_pref_slider_background(Fl_Button*, void*) {
  cb_slider_background();
}

Fl_Button *pref_slider_select=(Fl_Button *)0;

static void cb_pref_slider_select(Fl_Button*, void*) {
  cb_slider_select();
}

Fl_Button *prefslider_defaults=(Fl_Button *)0;

static void cb_prefslider_defaults(Fl_Button*, void*) {
  cb_slider_defaults();
}

Fl_Button *btnReset=(Fl_Button *)0;

static void cb_btnReset(Fl_Button*, void*) {
  cb_reset_display_dialog();
}

Fl_Button *btnCancel=(Fl_Button *)0;

static void cb_btnCancel(Fl_Button*, void*) {
  cbCancelDisplayDialog();
}

Fl_Return_Button *btnOkDisplayDialog=(Fl_Return_Button *)0;

static void cb_btnOkDisplayDialog(Fl_Return_Button*, void*) {
  cbOkDisplayDialog();
}

Fl_Light_Button *btn_lighted=(Fl_Light_Button *)0;

static void cb_btn_lighted(Fl_Light_Button*, void*) {
  cb_lighted_button();
}

Fl_Button *btn_lighted_default=(Fl_Button *)0;

static void cb_btn_lighted_default(Fl_Button*, void*) {
  cb_lighted_default();
}

Fl_Double_Window* DisplayDialog() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(424, 295, _("kcat colors / scheme"));
    w = o;
    { Fl_Group* o = new Fl_Group(2, 2, 218, 70);
      o->box(FL_ENGRAVED_FRAME);
      { Fl_Group* o = new Fl_Group(5, 6, 210, 35);
        o->box(FL_DOWN_BOX);
        { lblTest = new Fl_Box(7, 8, 206, 31, _("14070.000"));
          lblTest->box(FL_FLAT_BOX);
          lblTest->labelfont(4);
          lblTest->labelsize(32);
        } // Fl_Box* lblTest
        o->end();
      } // Fl_Group* o
      { prefFont = new Fl_Button(10, 46, 60, 22, _("Font"));
        prefFont->callback((Fl_Callback*)cb_prefFont);
      } // Fl_Button* prefFont
      { prefForeground = new Fl_Button(78, 46, 60, 22, _("Color"));
        prefForeground->callback((Fl_Callback*)cb_prefForeground);
      } // Fl_Button* prefForeground
      { btnBacklight = new Fl_Button(146, 46, 60, 22, _("Back"));
        btnBacklight->callback((Fl_Callback*)cb_btnBacklight);
      } // Fl_Button* btnBacklight
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(2, 74, 218, 218);
      o->box(FL_ENGRAVED_BOX);
      { btnSmeterColor = new Fl_Button(154, 88, 60, 22, _("Smeter"));
        btnSmeterColor->callback((Fl_Callback*)cb_btnSmeterColor);
      } // Fl_Button* btnSmeterColor
      { btnSWRcolor = new Fl_Button(154, 144, 60, 22, _("SWR"));
        btnSWRcolor->callback((Fl_Callback*)cb_btnSWRcolor);
      } // Fl_Button* btnSWRcolor
      { btnPowercolor = new Fl_Button(154, 200, 60, 22, _("Pwr"));
        btnPowercolor->callback((Fl_Callback*)cb_btnPowercolor);
      } // Fl_Button* btnPowercolor
      { btnPeakColor = new Fl_Button(154, 256, 60, 22, _("Peak"));
        btnPeakColor->callback((Fl_Callback*)cb_btnPeakColor);
      } // Fl_Button* btnPeakColor
      { Fl_Group* o = new Fl_Group(3, 77, 149, 212);
        o->box(FL_DOWN_BOX);
        { grpMeter1disp = new Fl_Group(4, 78, 65, 210);
          grpMeter1disp->box(FL_FLAT_BOX);
          grpMeter1disp->color(FL_FOREGROUND_COLOR);
          grpMeter1disp->selection_color(FL_LIGHT2);
          grpMeter1disp->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
          { Fl_Button* o = btnSmeterdisp = new Fl_Button(9, 83, 40, 200);
            btnSmeterdisp->tooltip(_("Click - change scale"));
            btnSmeterdisp->box(FL_FLAT_BOX);
            btnSmeterdisp->down_box(FL_FLAT_BOX);
            btnSmeterdisp->color((Fl_Color)2);
            btnSmeterdisp->selection_color((Fl_Color)2);
            btnSmeterdisp->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
            o->image(image_smeter);
          } // Fl_Button* btnSmeterdisp
          { Fl_SigBar* o = sldrRcvSignaldisp = new Fl_SigBar(51, 92, 10, 182);
            sldrRcvSignaldisp->box(FL_FLAT_BOX);
            sldrRcvSignaldisp->color((Fl_Color)10);
            sldrRcvSignaldisp->selection_color((Fl_Color)2);
            sldrRcvSignaldisp->labeltype(FL_NORMAL_LABEL);
            sldrRcvSignaldisp->labelfont(0);
            sldrRcvSignaldisp->labelsize(14);
            sldrRcvSignaldisp->labelcolor(FL_FOREGROUND_COLOR);
            sldrRcvSignaldisp->align(Fl_Align(FL_ALIGN_CENTER));
            sldrRcvSignaldisp->when(FL_WHEN_RELEASE);
            o->minimum(0.0f);
            o->maximum(-128.0f);
            o->horizontal(false);
          } // Fl_SigBar* sldrRcvSignaldisp
          { boxSquelchdisp = new Fl_Box(51, 81, 9, 9);
            boxSquelchdisp->box(FL_OVAL_BOX);
            boxSquelchdisp->color((Fl_Color)6);
            boxSquelchdisp->selection_color(FL_FOREGROUND_COLOR);
          } // Fl_Box* boxSquelchdisp
          grpMeter1disp->end();
        } // Fl_Group* grpMeter1disp
        { grpMeter2disp = new Fl_Group(69, 78, 80, 210);
          grpMeter2disp->box(FL_FLAT_BOX);
          grpMeter2disp->color(FL_FOREGROUND_COLOR);
          grpMeter2disp->selection_color(FL_LIGHT2);
          grpMeter2disp->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
          { Fl_Button* o = btnPowerdisp = new Fl_Button(71, 83, 25, 200);
            btnPowerdisp->tooltip(_("Click - FWD / ALC"));
            btnPowerdisp->box(FL_FLAT_BOX);
            btnPowerdisp->down_box(FL_FLAT_BOX);
            btnPowerdisp->color((Fl_Color)175);
            btnPowerdisp->selection_color((Fl_Color)175);
            btnPowerdisp->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
            o->image(image_p150);
          } // Fl_Button* btnPowerdisp
          { Fl_SigBar* o = sldrFwdPwrdisp = new Fl_SigBar(98, 92, 10, 182);
            sldrFwdPwrdisp->box(FL_FLAT_BOX);
            sldrFwdPwrdisp->color((Fl_Color)14);
            sldrFwdPwrdisp->selection_color((Fl_Color)6);
            sldrFwdPwrdisp->labeltype(FL_NORMAL_LABEL);
            sldrFwdPwrdisp->labelfont(0);
            sldrFwdPwrdisp->labelsize(14);
            sldrFwdPwrdisp->labelcolor(FL_FOREGROUND_COLOR);
            sldrFwdPwrdisp->align(Fl_Align(FL_ALIGN_CENTER));
            sldrFwdPwrdisp->when(FL_WHEN_RELEASE);
            o->minimum(120.0f);
            o->maximum(0.0f);
            o->horizontal(false);
          } // Fl_SigBar* sldrFwdPwrdisp
          { Fl_Button* o = btnSWRdisp = new Fl_Button(122, 83, 25, 200);
            btnSWRdisp->tooltip(_("Click REF / SWR"));
            btnSWRdisp->box(FL_FLAT_BOX);
            btnSWRdisp->down_box(FL_FLAT_BOX);
            btnSWRdisp->color((Fl_Color)1);
            btnSWRdisp->selection_color((Fl_Color)1);
            btnSWRdisp->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
            o->image(image_swr);
          } // Fl_Button* btnSWRdisp
          { Fl_SigBar* o = sldrRefPwrdisp = new Fl_SigBar(110, 92, 10, 182);
            sldrRefPwrdisp->box(FL_FLAT_BOX);
            sldrRefPwrdisp->color((Fl_Color)9);
            sldrRefPwrdisp->selection_color((Fl_Color)1);
            sldrRefPwrdisp->labeltype(FL_NORMAL_LABEL);
            sldrRefPwrdisp->labelfont(0);
            sldrRefPwrdisp->labelsize(14);
            sldrRefPwrdisp->labelcolor(FL_FOREGROUND_COLOR);
            sldrRefPwrdisp->align(Fl_Align(FL_ALIGN_CENTER));
            sldrRefPwrdisp->when(FL_WHEN_RELEASE);
            o->minimum(50.0f);
            o->maximum(0.0f);
            o->horizontal(false);
          } // Fl_SigBar* sldrRefPwrdisp
          grpMeter2disp->end();
        } // Fl_Group* grpMeter2disp
        o->end();
      } // Fl_Group* o
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(220, 2, 202, 70, _("System"));
      o->box(FL_ENGRAVED_FRAME);
      o->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
      { mnuScheme = new Fl_Choice(227, 22, 80, 22, _("UI"));
        mnuScheme->tooltip(_("Change application look and feel"));
        mnuScheme->down_box(FL_BORDER_BOX);
        mnuScheme->callback((Fl_Callback*)cb_mnuScheme);
        mnuScheme->align(Fl_Align(FL_ALIGN_RIGHT));
        mnuScheme->add("base");
        mnuScheme->add("gtk+");
        mnuScheme->add("plastic");
        mnuScheme->value(mnuScheme->find_item(xcvrState.ui_scheme.c_str()));
      } // Fl_Choice* mnuScheme
      { pref_sys_foreground = new Fl_Button(227, 46, 60, 22, _("Fgnd"));
        pref_sys_foreground->tooltip(_("Label color"));
        pref_sys_foreground->callback((Fl_Callback*)cb_pref_sys_foreground);
      } // Fl_Button* pref_sys_foreground
      { pref_sys_background = new Fl_Button(291, 46, 60, 22, _("Bngd"));
        pref_sys_background->tooltip(_("Background - normal"));
        pref_sys_background->callback((Fl_Callback*)cb_pref_sys_background);
      } // Fl_Button* pref_sys_background
      { prefsys_background2 = new Fl_Button(356, 46, 60, 22, _("Bgnd2"));
        prefsys_background2->tooltip(_("Background - selected"));
        prefsys_background2->callback((Fl_Callback*)cb_prefsys_background2);
      } // Fl_Button* prefsys_background2
      { prefsys_defaults = new Fl_Button(356, 21, 60, 22, _("Default"));
        prefsys_defaults->tooltip(_("Background - selected"));
        prefsys_defaults->callback((Fl_Callback*)cb_prefsys_defaults);
      } // Fl_Button* prefsys_defaults
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(220, 122, 202, 88);
      o->box(FL_ENGRAVED_FRAME);
      { Fl_Wheel_Value_Slider* o = sldrColors = new Fl_Wheel_Value_Slider(226, 128, 188, 20);
        sldrColors->tooltip(_("Adjust power level"));
        sldrColors->type(5);
        sldrColors->box(FL_THIN_DOWN_BOX);
        sldrColors->color(FL_BACKGROUND_COLOR);
        sldrColors->selection_color(FL_BACKGROUND_COLOR);
        sldrColors->labeltype(FL_NORMAL_LABEL);
        sldrColors->labelfont(0);
        sldrColors->labelsize(14);
        sldrColors->labelcolor(FL_FOREGROUND_COLOR);
        sldrColors->maximum(100);
        sldrColors->step(1);
        sldrColors->value(15);
        sldrColors->textsize(12);
        sldrColors->align(Fl_Align(FL_ALIGN_CENTER));
        sldrColors->when(FL_WHEN_CHANGED);
        o->reverse(true);
      } // Fl_Wheel_Value_Slider* sldrColors
      { pref_slider_background = new Fl_Button(226, 154, 90, 22, _("Bngd"));
        pref_slider_background->tooltip(_("Background - normal"));
        pref_slider_background->callback((Fl_Callback*)cb_pref_slider_background);
      } // Fl_Button* pref_slider_background
      { pref_slider_select = new Fl_Button(324, 154, 90, 22, _("Button"));
        pref_slider_select->tooltip(_("Background - normal"));
        pref_slider_select->callback((Fl_Callback*)cb_pref_slider_select);
      } // Fl_Button* pref_slider_select
      { prefslider_defaults = new Fl_Button(276, 183, 90, 22, _("Default"));
        prefslider_defaults->tooltip(_("Background - selected"));
        prefslider_defaults->callback((Fl_Callback*)cb_prefslider_defaults);
      } // Fl_Button* prefslider_defaults
      o->end();
    } // Fl_Group* o
    { btnReset = new Fl_Button(232, 223, 60, 22, _("Reset"));
      btnReset->tooltip(_("Restore all flrig defaults"));
      btnReset->callback((Fl_Callback*)cb_btnReset);
    } // Fl_Button* btnReset
    { btnCancel = new Fl_Button(234, 259, 60, 22, _("Cancel"));
      btnCancel->tooltip(_("Discard current changes"));
      btnCancel->callback((Fl_Callback*)cb_btnCancel);
    } // Fl_Button* btnCancel
    { btnOkDisplayDialog = new Fl_Return_Button(347, 260, 60, 22, _("OK"));
      btnOkDisplayDialog->tooltip(_("Save Current Changes"));
      btnOkDisplayDialog->callback((Fl_Callback*)cb_btnOkDisplayDialog);
    } // Fl_Return_Button* btnOkDisplayDialog
    { Fl_Group* o = new Fl_Group(220, 74, 202, 45);
      o->box(FL_ENGRAVED_FRAME);
      { btn_lighted = new Fl_Light_Button(226, 85, 90, 22, _("Lt Btn"));
        btn_lighted->callback((Fl_Callback*)cb_btn_lighted);
      } // Fl_Light_Button* btn_lighted
      { btn_lighted_default = new Fl_Button(324, 85, 90, 22, _("Default"));
        btn_lighted_default->tooltip(_("Background - selected"));
        btn_lighted_default->callback((Fl_Callback*)cb_btn_lighted_default);
      } // Fl_Button* btn_lighted_default
      o->end();
    } // Fl_Group* o
    o->end();
  } // Fl_Double_Window* o
  return w;
}

XYplot *spectrum_plot=(XYplot *)0;

cFreqControl *startFreqDisp=(cFreqControl *)0;

Fl_Choice *scan_range=(Fl_Choice *)0;

static void cb_scan_range(Fl_Choice*, void*) {
  set_freq_range();
}

Fl_Button *btn_start_scan=(Fl_Button *)0;

static void cb_btn_start_scan(Fl_Button*, void*) {
  start_scan();
}

Fl_Button *btn_stop_scan=(Fl_Button *)0;

static void cb_btn_stop_scan(Fl_Button*, void*) {
  stop_scan();
}

Fl_Button *btn_start_continuous=(Fl_Button *)0;

static void cb_btn_start_continuous(Fl_Button*, void*) {
  start_continuous_scan();
}

Fl_Choice *db_max=(Fl_Choice *)0;

static void cb_db_max(Fl_Choice*, void*) {
  db_max_cb();
}

Fl_Choice *db_min=(Fl_Choice *)0;

static void cb_db_min(Fl_Choice*, void*) {
  db_min_cb();
}

Fl_Double_Window* scanner_window() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(530, 174, _("kcat scanner"));
    w = o;
    { spectrum_plot = new XYplot(128, 2, 400, 170, _("spectrum plot"));
      spectrum_plot->box(FL_DOWN_BOX);
      spectrum_plot->color(FL_SELECTION_COLOR);
      spectrum_plot->selection_color(FL_BACKGROUND2_COLOR);
      spectrum_plot->labeltype(FL_NORMAL_LABEL);
      spectrum_plot->labelfont(0);
      spectrum_plot->labelsize(14);
      spectrum_plot->labelcolor(FL_BACKGROUND2_COLOR);
      spectrum_plot->align(Fl_Align(FL_ALIGN_CENTER));
      spectrum_plot->when(FL_WHEN_RELEASE);
      Fl_Group::current()->resizable(spectrum_plot);
    } // XYplot* spectrum_plot
    { Fl_Group* o = new Fl_Group(2, 2, 124, 170);
      { cFreqControl* o = startFreqDisp = new cFreqControl(3, 2, 120, 36, _("6.1"));
        startFreqDisp->box(FL_DOWN_BOX);
        startFreqDisp->color(FL_BACKGROUND_COLOR);
        startFreqDisp->selection_color(FL_BACKGROUND_COLOR);
        startFreqDisp->labeltype(FL_NORMAL_LABEL);
        startFreqDisp->labelfont(0);
        startFreqDisp->labelsize(14);
        startFreqDisp->labelcolor(FL_FOREGROUND_COLOR);
        startFreqDisp->align(Fl_Align(FL_ALIGN_CENTER));
        startFreqDisp->when(FL_WHEN_RELEASE);
        o->SetONOFFCOLOR (FL_YELLOW, FL_BLACK);
        o->setCallBack(startFreq);
      } // cFreqControl* startFreqDisp
      { Fl_Choice* o = scan_range = new Fl_Choice(3, 47, 90, 20, _("Rng"));
        scan_range->down_box(FL_BORDER_BOX);
        scan_range->callback((Fl_Callback*)cb_scan_range);
        scan_range->align(Fl_Align(FL_ALIGN_RIGHT));
        o->add("2500|5000|10000|25000|50000|100000");
        o->value(0);
      } // Fl_Choice* scan_range
      { btn_start_scan = new Fl_Button(3, 76, 55, 20, _("Start"));
        btn_start_scan->callback((Fl_Callback*)cb_btn_start_scan);
      } // Fl_Button* btn_start_scan
      { btn_stop_scan = new Fl_Button(68, 76, 55, 20, _("Stop"));
        btn_stop_scan->callback((Fl_Callback*)cb_btn_stop_scan);
      } // Fl_Button* btn_stop_scan
      { btn_start_continuous = new Fl_Button(12, 101, 103, 20, _("Continuous"));
        btn_start_continuous->callback((Fl_Callback*)cb_btn_start_continuous);
      } // Fl_Button* btn_start_continuous
      { Fl_Choice* o = db_max = new Fl_Choice(3, 123, 70, 20, _("dbMax"));
        db_max->down_box(FL_BORDER_BOX);
        db_max->callback((Fl_Callback*)cb_db_max);
        db_max->align(Fl_Align(FL_ALIGN_RIGHT));
        o->add("0|-10|-20|-30|-40|-50");
        o->value(0);
      } // Fl_Choice* db_max
      { Fl_Choice* o = db_min = new Fl_Choice(3, 146, 70, 20, _("dbMin"));
        db_min->down_box(FL_BORDER_BOX);
        db_min->callback((Fl_Callback*)cb_db_min);
        db_min->align(Fl_Align(FL_ALIGN_RIGHT));
        o->add("-60|-70|-80|-90|-100|-110|-120|-130");
        o->value(5);
      } // Fl_Choice* db_min
      { Fl_Box* o = new Fl_Box(2, 168, 122, 0);
        o->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
        Fl_Group::current()->resizable(o);
      } // Fl_Box* o
      o->end();
    } // Fl_Group* o
    o->end();
  } // Fl_Double_Window* o
  return w;
}

Fl_Input2 *txt_to_send=(Fl_Input2 *)0;

Fl_Button *btn_msg1=(Fl_Button *)0;

static void cb_btn_msg1(Fl_Button*, void*) {
  exec_msg1();
}

Fl_Button *btn_msg2=(Fl_Button *)0;

static void cb_btn_msg2(Fl_Button*, void*) {
  exec_msg2();
}

Fl_Button *btn_msg3=(Fl_Button *)0;

static void cb_btn_msg3(Fl_Button*, void*) {
  exec_msg3();
}

Fl_Button *btn_msg4=(Fl_Button *)0;

static void cb_btn_msg4(Fl_Button*, void*) {
  exec_msg4();
}

Fl_Button *btn_msg5=(Fl_Button *)0;

static void cb_btn_msg5(Fl_Button*, void*) {
  exec_msg5();
}

Fl_Button *btn_msg6=(Fl_Button *)0;

static void cb_btn_msg6(Fl_Button*, void*) {
  exec_msg6();
}

Fl_Button *btn_msg7=(Fl_Button *)0;

static void cb_btn_msg7(Fl_Button*, void*) {
  exec_msg7();
}

Fl_Button *btn_msg8=(Fl_Button *)0;

static void cb_btn_msg8(Fl_Button*, void*) {
  exec_msg8();
}

Fl_Button *btn_msg9=(Fl_Button *)0;

static void cb_btn_msg9(Fl_Button*, void*) {
  exec_msg9();
}

Fl_Button *btn_msg10=(Fl_Button *)0;

static void cb_btn_msg10(Fl_Button*, void*) {
  exec_msg10();
}

Fl_Button *btn_msg11=(Fl_Button *)0;

static void cb_btn_msg11(Fl_Button*, void*) {
  exec_msg11();
}

Fl_Button *btn_msg12=(Fl_Button *)0;

static void cb_btn_msg12(Fl_Button*, void*) {
  exec_msg12();
}

Fl_Button *btn_messages=(Fl_Button *)0;

static void cb_btn_messages(Fl_Button*, void*) {
  config_messages();
}

Fl_Button *btn_abort=(Fl_Button *)0;

static void cb_btn_abort(Fl_Button*, void*) {
  cb_cancel_transmit();
}

Fl_Light_Button *btn_send=(Fl_Light_Button *)0;

static void cb_btn_send(Fl_Light_Button*, void*) {
  cb_send_button();
}

Fl_Input2 *txt_sta=(Fl_Input2 *)0;

static void cb_txt_sta(Fl_Input2*, void*) {
  check_call();
}

Fl_Input2 *txt_name=(Fl_Input2 *)0;

Fl_Input *txt_freq=(Fl_Input *)0;

static void cb_txt_freq(Fl_Input*, void*) {
  check_call();
}

Fl_Input2 *txt_xchg=(Fl_Input2 *)0;

Fl_Button *btn_log_it=(Fl_Button *)0;

static void cb_btn_log_it(Fl_Button*, void*) {
  xml_add_record();
}

Fl_Button *btn_clear=(Fl_Button *)0;

static void cb_btn_clear(Fl_Button*, void*) {
  txt_sta->value("");
txt_name->value("");
txt_xchg->value("");
txt_sta->color(FL_BACKGROUND2_COLOR);
txt_sta->take_focus();
}

Fl_Check_Button *btn_dups=(Fl_Check_Button *)0;

static void cb_btn_dups(Fl_Check_Button*, void*) {
  dups();
}

Fl_Check_Button *btnConnect=(Fl_Check_Button *)0;

static void cb_btnConnect(Fl_Check_Button*, void*) {
  connect_to_server();
}

Fl_Counter *cntrFARNSWORTH=(Fl_Counter *)0;

static void cb_cntrFARNSWORTH(Fl_Counter* o, void*) {
  xcvrState.FARNSWORTH_WPM = (int)o->value();
}

static void cb_Farnsworth(Fl_Check_Button* o, void*) {
  xcvrState.FARNSWORTH = o->value();
}

Fl_Counter *cntrWPM2=(Fl_Counter *)0;

static void cb_cntrWPM2(Fl_Counter* o, void*) {
  cntrWPM->value(o->value());
cbWPM();
}

Fl_Double_Window* cwkeyboard_window() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(680, 178, _("kcat CW keyboard"));
    w = o;
    { Fl_Input2* o = txt_to_send = new Fl_Input2(2, 2, 676, 70, _("input:"));
      txt_to_send->type(4);
      txt_to_send->box(FL_DOWN_BOX);
      txt_to_send->color(FL_BACKGROUND2_COLOR);
      txt_to_send->selection_color(FL_SELECTION_COLOR);
      txt_to_send->labeltype(FL_NORMAL_LABEL);
      txt_to_send->labelfont(0);
      txt_to_send->labelsize(14);
      txt_to_send->labelcolor(FL_FOREGROUND_COLOR);
      txt_to_send->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
      txt_to_send->when(FL_WHEN_CHANGED);
      o->wrap(true);
    } // Fl_Input2* txt_to_send
    { btn_msg1 = new Fl_Button(3, 75, 54, 22, _("m 1"));
      btn_msg1->tooltip(_("Action - Fkey/Left click\nEdit - Right click"));
      btn_msg1->callback((Fl_Callback*)cb_btn_msg1);
    } // Fl_Button* btn_msg1
    { btn_msg2 = new Fl_Button(59, 75, 54, 22, _("m 2"));
      btn_msg2->tooltip(_("Action - Fkey/Left click\nEdit - Right click"));
      btn_msg2->callback((Fl_Callback*)cb_btn_msg2);
    } // Fl_Button* btn_msg2
    { btn_msg3 = new Fl_Button(115, 75, 54, 22, _("m 3"));
      btn_msg3->tooltip(_("Action - Fkey/Left click\nEdit - Right click"));
      btn_msg3->callback((Fl_Callback*)cb_btn_msg3);
    } // Fl_Button* btn_msg3
    { btn_msg4 = new Fl_Button(171, 75, 54, 22, _("m 4"));
      btn_msg4->tooltip(_("Action - Fkey/Left click\nEdit - Right click"));
      btn_msg4->callback((Fl_Callback*)cb_btn_msg4);
    } // Fl_Button* btn_msg4
    { btn_msg5 = new Fl_Button(228, 75, 54, 22, _("m 5"));
      btn_msg5->tooltip(_("Action - Fkey/Left click\nEdit - Right click"));
      btn_msg5->callback((Fl_Callback*)cb_btn_msg5);
    } // Fl_Button* btn_msg5
    { btn_msg6 = new Fl_Button(284, 75, 54, 22, _("m 6"));
      btn_msg6->tooltip(_("Action - Fkey/Left click\nEdit - Right click"));
      btn_msg6->callback((Fl_Callback*)cb_btn_msg6);
    } // Fl_Button* btn_msg6
    { btn_msg7 = new Fl_Button(340, 75, 54, 22, _("m 7"));
      btn_msg7->tooltip(_("Action - Fkey/Left click\nEdit - Right click"));
      btn_msg7->callback((Fl_Callback*)cb_btn_msg7);
    } // Fl_Button* btn_msg7
    { btn_msg8 = new Fl_Button(396, 75, 54, 22, _("m 8"));
      btn_msg8->tooltip(_("Action - Fkey/Left click\nEdit - Right click"));
      btn_msg8->callback((Fl_Callback*)cb_btn_msg8);
    } // Fl_Button* btn_msg8
    { btn_msg9 = new Fl_Button(453, 75, 54, 22, _("m 9"));
      btn_msg9->tooltip(_("Action - Fkey/Left click\nEdit - Right click"));
      btn_msg9->callback((Fl_Callback*)cb_btn_msg9);
    } // Fl_Button* btn_msg9
    { btn_msg10 = new Fl_Button(509, 75, 54, 22, _("m 10"));
      btn_msg10->tooltip(_("Action - Fkey/Left click\nEdit - Right click"));
      btn_msg10->callback((Fl_Callback*)cb_btn_msg10);
    } // Fl_Button* btn_msg10
    { btn_msg11 = new Fl_Button(565, 75, 54, 22, _("m 11"));
      btn_msg11->tooltip(_("Action - Fkey/Left click\nEdit - Right click"));
      btn_msg11->callback((Fl_Callback*)cb_btn_msg11);
    } // Fl_Button* btn_msg11
    { btn_msg12 = new Fl_Button(622, 75, 54, 22, _("m 12"));
      btn_msg12->tooltip(_("Action - Fkey/Left click\nEdit - Right click"));
      btn_msg12->callback((Fl_Callback*)cb_btn_msg12);
    } // Fl_Button* btn_msg12
    { btn_messages = new Fl_Button(456, 103, 80, 22, _("Configure"));
      btn_messages->callback((Fl_Callback*)cb_btn_messages);
    } // Fl_Button* btn_messages
    { btn_abort = new Fl_Button(545, 103, 60, 22, _("Abort"));
      btn_abort->callback((Fl_Callback*)cb_btn_abort);
    } // Fl_Button* btn_abort
    { btn_send = new Fl_Light_Button(615, 103, 60, 22, _("Send"));
      btn_send->callback((Fl_Callback*)cb_btn_send);
    } // Fl_Light_Button* btn_send
    { Fl_Group* o = new Fl_Group(2, 102, 448, 73);
      o->box(FL_ENGRAVED_FRAME);
      { txt_sta = new Fl_Input2(5, 121, 100, 22, _("STA"));
        txt_sta->tooltip(_("Other station"));
        txt_sta->box(FL_DOWN_BOX);
        txt_sta->color(FL_BACKGROUND2_COLOR);
        txt_sta->selection_color(FL_SELECTION_COLOR);
        txt_sta->labeltype(FL_NORMAL_LABEL);
        txt_sta->labelfont(0);
        txt_sta->labelsize(14);
        txt_sta->labelcolor(FL_FOREGROUND_COLOR);
        txt_sta->callback((Fl_Callback*)cb_txt_sta);
        txt_sta->align(Fl_Align(FL_ALIGN_TOP_LEFT));
        txt_sta->when(FL_WHEN_CHANGED);
      } // Fl_Input2* txt_sta
      { txt_name = new Fl_Input2(117, 121, 100, 22, _("NAM"));
        txt_name->tooltip(_("Other operator"));
        txt_name->box(FL_DOWN_BOX);
        txt_name->color(FL_BACKGROUND2_COLOR);
        txt_name->selection_color(FL_SELECTION_COLOR);
        txt_name->labeltype(FL_NORMAL_LABEL);
        txt_name->labelfont(0);
        txt_name->labelsize(14);
        txt_name->labelcolor(FL_FOREGROUND_COLOR);
        txt_name->align(Fl_Align(FL_ALIGN_TOP_LEFT));
        txt_name->when(FL_WHEN_RELEASE);
      } // Fl_Input2* txt_name
      { txt_freq = new Fl_Input(228, 121, 100, 22, _("Freq:"));
        txt_freq->tooltip(_("Frequency (MHz preferred)"));
        txt_freq->callback((Fl_Callback*)cb_txt_freq);
        txt_freq->align(Fl_Align(FL_ALIGN_TOP_LEFT));
        txt_freq->when(FL_WHEN_CHANGED);
      } // Fl_Input* txt_freq
      { txt_xchg = new Fl_Input2(340, 121, 100, 22, _("X_in"));
        txt_xchg->tooltip(_("Rcvd Contest Exchange"));
        txt_xchg->box(FL_DOWN_BOX);
        txt_xchg->color(FL_BACKGROUND2_COLOR);
        txt_xchg->selection_color(FL_SELECTION_COLOR);
        txt_xchg->labeltype(FL_NORMAL_LABEL);
        txt_xchg->labelfont(0);
        txt_xchg->labelsize(14);
        txt_xchg->labelcolor(FL_FOREGROUND_COLOR);
        txt_xchg->align(Fl_Align(FL_ALIGN_TOP_LEFT));
        txt_xchg->when(FL_WHEN_CHANGED);
      } // Fl_Input2* txt_xchg
      { btn_log_it = new Fl_Button(229, 146, 54, 22, _("Log"));
        btn_log_it->callback((Fl_Callback*)cb_btn_log_it);
        btn_log_it->deactivate();
      } // Fl_Button* btn_log_it
      { btn_clear = new Fl_Button(10, 146, 54, 22, _("Clear"));
        btn_clear->callback((Fl_Callback*)cb_btn_clear);
      } // Fl_Button* btn_clear
      { Fl_Check_Button* o = btn_dups = new Fl_Check_Button(341, 149, 90, 15, _("Ck Dups"));
        btn_dups->tooltip(_("Check for duplicates"));
        btn_dups->down_box(FL_DOWN_BOX);
        btn_dups->callback((Fl_Callback*)cb_btn_dups);
        btn_dups->deactivate();
        o->value(xcvrState.dups);
      } // Fl_Check_Button* btn_dups
      { btnConnect = new Fl_Check_Button(119, 149, 85, 15, _("Connect"));
        btnConnect->tooltip(_("Connect to fllog server"));
        btnConnect->down_box(FL_DOWN_BOX);
        btnConnect->callback((Fl_Callback*)cb_btnConnect);
      } // Fl_Check_Button* btnConnect
      o->end();
    } // Fl_Group* o
    { Fl_Counter* o = cntrFARNSWORTH = new Fl_Counter(567, 132, 90, 22);
      cntrFARNSWORTH->tooltip(_("Word rate in WPM"));
      cntrFARNSWORTH->minimum(5);
      cntrFARNSWORTH->maximum(80);
      cntrFARNSWORTH->step(1);
      cntrFARNSWORTH->value(18);
      cntrFARNSWORTH->callback((Fl_Callback*)cb_cntrFARNSWORTH);
      cntrFARNSWORTH->align(Fl_Align(FL_ALIGN_CENTER));
      o->lstep(5);
      o->maximum(cntrWPM->value());
      o->value(xcvrState.FARNSWORTH_WPM);
    } // Fl_Counter* cntrFARNSWORTH
    { Fl_Check_Button* o = new Fl_Check_Button(567, 157, 103, 15, _("Farnsworth"));
      o->tooltip(_("Enable Farnsworth CW"));
      o->down_box(FL_DOWN_BOX);
      o->callback((Fl_Callback*)cb_Farnsworth);
      o->value(xcvrState.FARNSWORTH);
    } // Fl_Check_Button* o
    { Fl_Counter* o = cntrWPM2 = new Fl_Counter(464, 133, 90, 22, _("Wpm"));
      cntrWPM2->tooltip(_("Char rate in WPM"));
      cntrWPM2->minimum(5);
      cntrWPM2->maximum(80);
      cntrWPM2->step(1);
      cntrWPM2->value(18);
      cntrWPM2->callback((Fl_Callback*)cb_cntrWPM2);
      o->lstep(5);
    } // Fl_Counter* cntrWPM2
    o->end();
  } // Fl_Double_Window* o
  return w;
}

Fl_Input2 *label_1=(Fl_Input2 *)0;

Fl_Input2 *edit_msg1=(Fl_Input2 *)0;

Fl_Input2 *label_2=(Fl_Input2 *)0;

Fl_Input2 *edit_msg2=(Fl_Input2 *)0;

Fl_Input2 *label_3=(Fl_Input2 *)0;

Fl_Input2 *edit_msg3=(Fl_Input2 *)0;

Fl_Input2 *label_4=(Fl_Input2 *)0;

Fl_Input2 *edit_msg4=(Fl_Input2 *)0;

Fl_Input2 *label_5=(Fl_Input2 *)0;

Fl_Input2 *edit_msg5=(Fl_Input2 *)0;

Fl_Input2 *label_6=(Fl_Input2 *)0;

Fl_Input2 *edit_msg6=(Fl_Input2 *)0;

Fl_Input2 *label_7=(Fl_Input2 *)0;

Fl_Input2 *edit_msg7=(Fl_Input2 *)0;

Fl_Input2 *label_8=(Fl_Input2 *)0;

Fl_Input2 *edit_msg8=(Fl_Input2 *)0;

Fl_Input2 *label_9=(Fl_Input2 *)0;

Fl_Input2 *edit_msg9=(Fl_Input2 *)0;

Fl_Input2 *label_10=(Fl_Input2 *)0;

Fl_Input2 *edit_msg10=(Fl_Input2 *)0;

Fl_Input2 *label_11=(Fl_Input2 *)0;

Fl_Input2 *edit_msg11=(Fl_Input2 *)0;

Fl_Input2 *label_12=(Fl_Input2 *)0;

Fl_Input2 *edit_msg12=(Fl_Input2 *)0;

Fl_Button *btn_done_edit=(Fl_Button *)0;

static void cb_btn_done_edit(Fl_Button*, void*) {
  done_edit();
}

Fl_Button *btn_cancel_edit=(Fl_Button *)0;

static void cb_btn_cancel_edit(Fl_Button*, void*) {
  cancel_edit();
}

Fl_Button *btn_apply_edit=(Fl_Button *)0;

static void cb_btn_apply_edit(Fl_Button*, void*) {
  apply_edit();
}

Fl_Input2 *txt_cll=(Fl_Input2 *)0;

static void cb_txt_cll(Fl_Input2*, void*) {
  change_txt_cll();
}

Fl_Input2 *txt_opr=(Fl_Input2 *)0;

static void cb_txt_opr(Fl_Input2*, void*) {
  change_txt_opr();
}

Fl_Input2 *txt_qth=(Fl_Input2 *)0;

static void cb_txt_qth(Fl_Input2*, void*) {
  change_txt_qth();
}

Fl_Input2 *txt_loc=(Fl_Input2 *)0;

static void cb_txt_loc(Fl_Input2*, void*) {
  change_txt_loc();
}

Fl_Int_Input *txt_serial_nbr=(Fl_Int_Input *)0;

static void cb_txt_serial_nbr(Fl_Int_Input*, void*) {
  serial_nbr();
}

Fl_Int_Input *txt_time_span=(Fl_Int_Input *)0;

static void cb_txt_time_span(Fl_Int_Input*, void*) {
  time_span();
}

Fl_Input *txt_xout=(Fl_Input *)0;

static void cb_txt_xout(Fl_Input* o, void*) {
  xcvrState.xout=o->value();
}

Fl_Check_Button *btn_zeros=(Fl_Check_Button *)0;

static void cb_btn_zeros(Fl_Check_Button*, void*) {
  zeros();
}

Fl_Check_Button *btn_ck_band=(Fl_Check_Button *)0;

static void cb_btn_ck_band(Fl_Check_Button*, void*) {
  ck_band();
}

Fl_Check_Button *btn_ck_time_span=(Fl_Check_Button *)0;

static void cb_btn_ck_time_span(Fl_Check_Button*, void*) {
  time_span();
}

Fl_Double_Window* message_editor() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(600, 382, _("Configure CW Keyboard"));
    w = o;
    { new Fl_Box(12, 2, 84, 19, _("Msg Label"));
    } // Fl_Box* o
    { new Fl_Box(201, 2, 223, 19, _("Message Text"));
    } // Fl_Box* o
    { label_1 = new Fl_Input2(30, 23, 50, 22, _("1:"));
      label_1->box(FL_DOWN_BOX);
      label_1->color(FL_BACKGROUND2_COLOR);
      label_1->selection_color(FL_SELECTION_COLOR);
      label_1->labeltype(FL_NORMAL_LABEL);
      label_1->labelfont(0);
      label_1->labelsize(14);
      label_1->labelcolor(FL_FOREGROUND_COLOR);
      label_1->align(Fl_Align(FL_ALIGN_LEFT));
      label_1->when(FL_WHEN_RELEASE);
    } // Fl_Input2* label_1
    { edit_msg1 = new Fl_Input2(85, 23, 375, 22);
      edit_msg1->box(FL_DOWN_BOX);
      edit_msg1->color(FL_BACKGROUND2_COLOR);
      edit_msg1->selection_color(FL_SELECTION_COLOR);
      edit_msg1->labeltype(FL_NORMAL_LABEL);
      edit_msg1->labelfont(0);
      edit_msg1->labelsize(14);
      edit_msg1->labelcolor(FL_FOREGROUND_COLOR);
      edit_msg1->align(Fl_Align(FL_ALIGN_LEFT));
      edit_msg1->when(FL_WHEN_RELEASE);
    } // Fl_Input2* edit_msg1
    { label_2 = new Fl_Input2(30, 47, 50, 22, _("2:"));
      label_2->box(FL_DOWN_BOX);
      label_2->color(FL_BACKGROUND2_COLOR);
      label_2->selection_color(FL_SELECTION_COLOR);
      label_2->labeltype(FL_NORMAL_LABEL);
      label_2->labelfont(0);
      label_2->labelsize(14);
      label_2->labelcolor(FL_FOREGROUND_COLOR);
      label_2->align(Fl_Align(FL_ALIGN_LEFT));
      label_2->when(FL_WHEN_RELEASE);
    } // Fl_Input2* label_2
    { edit_msg2 = new Fl_Input2(85, 47, 375, 22);
      edit_msg2->box(FL_DOWN_BOX);
      edit_msg2->color(FL_BACKGROUND2_COLOR);
      edit_msg2->selection_color(FL_SELECTION_COLOR);
      edit_msg2->labeltype(FL_NORMAL_LABEL);
      edit_msg2->labelfont(0);
      edit_msg2->labelsize(14);
      edit_msg2->labelcolor(FL_FOREGROUND_COLOR);
      edit_msg2->align(Fl_Align(FL_ALIGN_LEFT));
      edit_msg2->when(FL_WHEN_RELEASE);
    } // Fl_Input2* edit_msg2
    { label_3 = new Fl_Input2(30, 71, 50, 22, _("3:"));
      label_3->box(FL_DOWN_BOX);
      label_3->color(FL_BACKGROUND2_COLOR);
      label_3->selection_color(FL_SELECTION_COLOR);
      label_3->labeltype(FL_NORMAL_LABEL);
      label_3->labelfont(0);
      label_3->labelsize(14);
      label_3->labelcolor(FL_FOREGROUND_COLOR);
      label_3->align(Fl_Align(FL_ALIGN_LEFT));
      label_3->when(FL_WHEN_RELEASE);
    } // Fl_Input2* label_3
    { edit_msg3 = new Fl_Input2(85, 71, 375, 22);
      edit_msg3->box(FL_DOWN_BOX);
      edit_msg3->color(FL_BACKGROUND2_COLOR);
      edit_msg3->selection_color(FL_SELECTION_COLOR);
      edit_msg3->labeltype(FL_NORMAL_LABEL);
      edit_msg3->labelfont(0);
      edit_msg3->labelsize(14);
      edit_msg3->labelcolor(FL_FOREGROUND_COLOR);
      edit_msg3->align(Fl_Align(FL_ALIGN_LEFT));
      edit_msg3->when(FL_WHEN_RELEASE);
    } // Fl_Input2* edit_msg3
    { label_4 = new Fl_Input2(30, 95, 50, 22, _("4:"));
      label_4->box(FL_DOWN_BOX);
      label_4->color(FL_BACKGROUND2_COLOR);
      label_4->selection_color(FL_SELECTION_COLOR);
      label_4->labeltype(FL_NORMAL_LABEL);
      label_4->labelfont(0);
      label_4->labelsize(14);
      label_4->labelcolor(FL_FOREGROUND_COLOR);
      label_4->align(Fl_Align(FL_ALIGN_LEFT));
      label_4->when(FL_WHEN_RELEASE);
    } // Fl_Input2* label_4
    { edit_msg4 = new Fl_Input2(85, 95, 375, 22);
      edit_msg4->box(FL_DOWN_BOX);
      edit_msg4->color(FL_BACKGROUND2_COLOR);
      edit_msg4->selection_color(FL_SELECTION_COLOR);
      edit_msg4->labeltype(FL_NORMAL_LABEL);
      edit_msg4->labelfont(0);
      edit_msg4->labelsize(14);
      edit_msg4->labelcolor(FL_FOREGROUND_COLOR);
      edit_msg4->align(Fl_Align(FL_ALIGN_LEFT));
      edit_msg4->when(FL_WHEN_RELEASE);
    } // Fl_Input2* edit_msg4
    { label_5 = new Fl_Input2(30, 119, 50, 22, _("5:"));
      label_5->box(FL_DOWN_BOX);
      label_5->color(FL_BACKGROUND2_COLOR);
      label_5->selection_color(FL_SELECTION_COLOR);
      label_5->labeltype(FL_NORMAL_LABEL);
      label_5->labelfont(0);
      label_5->labelsize(14);
      label_5->labelcolor(FL_FOREGROUND_COLOR);
      label_5->align(Fl_Align(FL_ALIGN_LEFT));
      label_5->when(FL_WHEN_RELEASE);
    } // Fl_Input2* label_5
    { edit_msg5 = new Fl_Input2(85, 119, 375, 22);
      edit_msg5->box(FL_DOWN_BOX);
      edit_msg5->color(FL_BACKGROUND2_COLOR);
      edit_msg5->selection_color(FL_SELECTION_COLOR);
      edit_msg5->labeltype(FL_NORMAL_LABEL);
      edit_msg5->labelfont(0);
      edit_msg5->labelsize(14);
      edit_msg5->labelcolor(FL_FOREGROUND_COLOR);
      edit_msg5->align(Fl_Align(FL_ALIGN_LEFT));
      edit_msg5->when(FL_WHEN_RELEASE);
    } // Fl_Input2* edit_msg5
    { label_6 = new Fl_Input2(30, 143, 50, 22, _("6:"));
      label_6->box(FL_DOWN_BOX);
      label_6->color(FL_BACKGROUND2_COLOR);
      label_6->selection_color(FL_SELECTION_COLOR);
      label_6->labeltype(FL_NORMAL_LABEL);
      label_6->labelfont(0);
      label_6->labelsize(14);
      label_6->labelcolor(FL_FOREGROUND_COLOR);
      label_6->align(Fl_Align(FL_ALIGN_LEFT));
      label_6->when(FL_WHEN_RELEASE);
    } // Fl_Input2* label_6
    { edit_msg6 = new Fl_Input2(85, 143, 375, 22);
      edit_msg6->box(FL_DOWN_BOX);
      edit_msg6->color(FL_BACKGROUND2_COLOR);
      edit_msg6->selection_color(FL_SELECTION_COLOR);
      edit_msg6->labeltype(FL_NORMAL_LABEL);
      edit_msg6->labelfont(0);
      edit_msg6->labelsize(14);
      edit_msg6->labelcolor(FL_FOREGROUND_COLOR);
      edit_msg6->align(Fl_Align(FL_ALIGN_LEFT));
      edit_msg6->when(FL_WHEN_RELEASE);
    } // Fl_Input2* edit_msg6
    { label_7 = new Fl_Input2(30, 167, 50, 22, _("7:"));
      label_7->box(FL_DOWN_BOX);
      label_7->color(FL_BACKGROUND2_COLOR);
      label_7->selection_color(FL_SELECTION_COLOR);
      label_7->labeltype(FL_NORMAL_LABEL);
      label_7->labelfont(0);
      label_7->labelsize(14);
      label_7->labelcolor(FL_FOREGROUND_COLOR);
      label_7->align(Fl_Align(FL_ALIGN_LEFT));
      label_7->when(FL_WHEN_RELEASE);
    } // Fl_Input2* label_7
    { edit_msg7 = new Fl_Input2(85, 167, 375, 22);
      edit_msg7->box(FL_DOWN_BOX);
      edit_msg7->color(FL_BACKGROUND2_COLOR);
      edit_msg7->selection_color(FL_SELECTION_COLOR);
      edit_msg7->labeltype(FL_NORMAL_LABEL);
      edit_msg7->labelfont(0);
      edit_msg7->labelsize(14);
      edit_msg7->labelcolor(FL_FOREGROUND_COLOR);
      edit_msg7->align(Fl_Align(FL_ALIGN_LEFT));
      edit_msg7->when(FL_WHEN_RELEASE);
    } // Fl_Input2* edit_msg7
    { label_8 = new Fl_Input2(30, 192, 50, 22, _("8:"));
      label_8->box(FL_DOWN_BOX);
      label_8->color(FL_BACKGROUND2_COLOR);
      label_8->selection_color(FL_SELECTION_COLOR);
      label_8->labeltype(FL_NORMAL_LABEL);
      label_8->labelfont(0);
      label_8->labelsize(14);
      label_8->labelcolor(FL_FOREGROUND_COLOR);
      label_8->align(Fl_Align(FL_ALIGN_LEFT));
      label_8->when(FL_WHEN_RELEASE);
    } // Fl_Input2* label_8
    { edit_msg8 = new Fl_Input2(85, 192, 375, 22);
      edit_msg8->box(FL_DOWN_BOX);
      edit_msg8->color(FL_BACKGROUND2_COLOR);
      edit_msg8->selection_color(FL_SELECTION_COLOR);
      edit_msg8->labeltype(FL_NORMAL_LABEL);
      edit_msg8->labelfont(0);
      edit_msg8->labelsize(14);
      edit_msg8->labelcolor(FL_FOREGROUND_COLOR);
      edit_msg8->align(Fl_Align(FL_ALIGN_LEFT));
      edit_msg8->when(FL_WHEN_RELEASE);
    } // Fl_Input2* edit_msg8
    { label_9 = new Fl_Input2(30, 216, 50, 22, _("9:"));
      label_9->box(FL_DOWN_BOX);
      label_9->color(FL_BACKGROUND2_COLOR);
      label_9->selection_color(FL_SELECTION_COLOR);
      label_9->labeltype(FL_NORMAL_LABEL);
      label_9->labelfont(0);
      label_9->labelsize(14);
      label_9->labelcolor(FL_FOREGROUND_COLOR);
      label_9->align(Fl_Align(FL_ALIGN_LEFT));
      label_9->when(FL_WHEN_RELEASE);
    } // Fl_Input2* label_9
    { edit_msg9 = new Fl_Input2(85, 216, 375, 22);
      edit_msg9->box(FL_DOWN_BOX);
      edit_msg9->color(FL_BACKGROUND2_COLOR);
      edit_msg9->selection_color(FL_SELECTION_COLOR);
      edit_msg9->labeltype(FL_NORMAL_LABEL);
      edit_msg9->labelfont(0);
      edit_msg9->labelsize(14);
      edit_msg9->labelcolor(FL_FOREGROUND_COLOR);
      edit_msg9->align(Fl_Align(FL_ALIGN_LEFT));
      edit_msg9->when(FL_WHEN_RELEASE);
    } // Fl_Input2* edit_msg9
    { label_10 = new Fl_Input2(30, 240, 50, 22, _("10:"));
      label_10->box(FL_DOWN_BOX);
      label_10->color(FL_BACKGROUND2_COLOR);
      label_10->selection_color(FL_SELECTION_COLOR);
      label_10->labeltype(FL_NORMAL_LABEL);
      label_10->labelfont(0);
      label_10->labelsize(14);
      label_10->labelcolor(FL_FOREGROUND_COLOR);
      label_10->align(Fl_Align(FL_ALIGN_LEFT));
      label_10->when(FL_WHEN_RELEASE);
    } // Fl_Input2* label_10
    { edit_msg10 = new Fl_Input2(85, 240, 375, 22);
      edit_msg10->box(FL_DOWN_BOX);
      edit_msg10->color(FL_BACKGROUND2_COLOR);
      edit_msg10->selection_color(FL_SELECTION_COLOR);
      edit_msg10->labeltype(FL_NORMAL_LABEL);
      edit_msg10->labelfont(0);
      edit_msg10->labelsize(14);
      edit_msg10->labelcolor(FL_FOREGROUND_COLOR);
      edit_msg10->align(Fl_Align(FL_ALIGN_LEFT));
      edit_msg10->when(FL_WHEN_RELEASE);
    } // Fl_Input2* edit_msg10
    { label_11 = new Fl_Input2(29, 264, 50, 22, _("11:"));
      label_11->box(FL_DOWN_BOX);
      label_11->color(FL_BACKGROUND2_COLOR);
      label_11->selection_color(FL_SELECTION_COLOR);
      label_11->labeltype(FL_NORMAL_LABEL);
      label_11->labelfont(0);
      label_11->labelsize(14);
      label_11->labelcolor(FL_FOREGROUND_COLOR);
      label_11->align(Fl_Align(FL_ALIGN_LEFT));
      label_11->when(FL_WHEN_RELEASE);
    } // Fl_Input2* label_11
    { edit_msg11 = new Fl_Input2(84, 264, 375, 22);
      edit_msg11->box(FL_DOWN_BOX);
      edit_msg11->color(FL_BACKGROUND2_COLOR);
      edit_msg11->selection_color(FL_SELECTION_COLOR);
      edit_msg11->labeltype(FL_NORMAL_LABEL);
      edit_msg11->labelfont(0);
      edit_msg11->labelsize(14);
      edit_msg11->labelcolor(FL_FOREGROUND_COLOR);
      edit_msg11->align(Fl_Align(FL_ALIGN_LEFT));
      edit_msg11->when(FL_WHEN_RELEASE);
    } // Fl_Input2* edit_msg11
    { label_12 = new Fl_Input2(30, 288, 50, 22, _("12:"));
      label_12->box(FL_DOWN_BOX);
      label_12->color(FL_BACKGROUND2_COLOR);
      label_12->selection_color(FL_SELECTION_COLOR);
      label_12->labeltype(FL_NORMAL_LABEL);
      label_12->labelfont(0);
      label_12->labelsize(14);
      label_12->labelcolor(FL_FOREGROUND_COLOR);
      label_12->align(Fl_Align(FL_ALIGN_LEFT));
      label_12->when(FL_WHEN_RELEASE);
    } // Fl_Input2* label_12
    { edit_msg12 = new Fl_Input2(85, 288, 375, 22);
      edit_msg12->box(FL_DOWN_BOX);
      edit_msg12->color(FL_BACKGROUND2_COLOR);
      edit_msg12->selection_color(FL_SELECTION_COLOR);
      edit_msg12->labeltype(FL_NORMAL_LABEL);
      edit_msg12->labelfont(0);
      edit_msg12->labelsize(14);
      edit_msg12->labelcolor(FL_FOREGROUND_COLOR);
      edit_msg12->align(Fl_Align(FL_ALIGN_LEFT));
      edit_msg12->when(FL_WHEN_RELEASE);
    } // Fl_Input2* edit_msg12
    { Fl_Group* o = new Fl_Group(464, 4, 65, 252);
      o->box(FL_ENGRAVED_FRAME);
      { new Fl_Box(469, 7, 54, 20, _("Tags"));
      } // Fl_Box* o
      { Fl_Box* o = new Fl_Box(469, 36, 55, 20, _("<CLL>"));
        o->tooltip(_("Your call"));
      } // Fl_Box* o
      { Fl_Box* o = new Fl_Box(469, 56, 55, 20, _("<QTH>"));
        o->tooltip(_("Your qth"));
      } // Fl_Box* o
      { Fl_Box* o = new Fl_Box(469, 76, 55, 20, _("<LOC>"));
        o->tooltip(_("Your location"));
      } // Fl_Box* o
      { Fl_Box* o = new Fl_Box(469, 96, 55, 20, _("<OPR>"));
        o->tooltip(_("Your name"));
      } // Fl_Box* o
      { Fl_Box* o = new Fl_Box(469, 115, 55, 20, _("<STA>"));
        o->tooltip(_("Other stations callsign"));
      } // Fl_Box* o
      { Fl_Box* o = new Fl_Box(469, 134, 55, 20, _("<NAM>"));
        o->tooltip(_("Other stations name"));
      } // Fl_Box* o
      { Fl_Box* o = new Fl_Box(469, 151, 55, 20, _("<#>"));
        o->tooltip(_("Serial OUT"));
      } // Fl_Box* o
      { Fl_Box* o = new Fl_Box(469, 170, 55, 20, _("<+>"));
        o->tooltip(_("Increment serial #"));
      } // Fl_Box* o
      { Fl_Box* o = new Fl_Box(469, 189, 55, 20, _("<->"));
        o->tooltip(_("Decrement serial #"));
      } // Fl_Box* o
      { Fl_Box* o = new Fl_Box(469, 208, 55, 20, _("<LOG>"));
        o->tooltip(_("Append entry to logbook"));
      } // Fl_Box* o
      { Fl_Box* o = new Fl_Box(469, 229, 55, 20, _("<X>"));
        o->tooltip(_("Xout text"));
      } // Fl_Box* o
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(529, 4, 65, 252);
      o->box(FL_ENGRAVED_FRAME);
      { new Fl_Box(532, 7, 59, 20, _("ProSign"));
      } // Fl_Box* o
      { Fl_Box* o = new Fl_Box(531, 36, 60, 20, _("* AA"));
        o->tooltip(_(".-..-."));
      } // Fl_Box* o
      { Fl_Box* o = new Fl_Box(531, 56, 60, 20, _("@@ AC"));
        o->tooltip(_(".--.-."));
      } // Fl_Box* o
      { Fl_Box* o = new Fl_Box(531, 75, 60, 20, _("+ AR"));
        o->tooltip(_(".-.-."));
      } // Fl_Box* o
      { Fl_Box* o = new Fl_Box(531, 94, 60, 20, _("% AS"));
        o->tooltip(_(".----."));
      } // Fl_Box* o
      { Fl_Box* o = new Fl_Box(531, 114, 60, 20, _("= BT"));
        o->tooltip(_("-...-"));
      } // Fl_Box* o
      { Fl_Box* o = new Fl_Box(531, 133, 60, 20, _("- DU"));
        o->tooltip(_("-....-"));
      } // Fl_Box* o
      { Fl_Box* o = new Fl_Box(531, 152, 60, 20, _("( KK"));
        o->tooltip(_("-.--.-"));
      } // Fl_Box* o
      { Fl_Box* o = new Fl_Box(531, 172, 60, 20, _(") KN"));
        o->tooltip(_("-.--."));
      } // Fl_Box* o
      { Fl_Box* o = new Fl_Box(531, 191, 60, 20, _("] SK"));
        o->tooltip(_("...-.-"));
      } // Fl_Box* o
      { Fl_Box* o = new Fl_Box(531, 210, 60, 20, _("[ SN"));
        o->tooltip(_(".-.-."));
      } // Fl_Box* o
      { Fl_Box* o = new Fl_Box(531, 229, 60, 20, _("$ SX"));
        o->tooltip(_("...-..-"));
      } // Fl_Box* o
      o->end();
    } // Fl_Group* o
    { btn_done_edit = new Fl_Button(539, 288, 56, 22, _("Done"));
      btn_done_edit->callback((Fl_Callback*)cb_btn_done_edit);
    } // Fl_Button* btn_done_edit
    { btn_cancel_edit = new Fl_Button(469, 264, 65, 22, _("Cancel"));
      btn_cancel_edit->callback((Fl_Callback*)cb_btn_cancel_edit);
    } // Fl_Button* btn_cancel_edit
    { btn_apply_edit = new Fl_Button(469, 288, 65, 22, _("Apply"));
      btn_apply_edit->callback((Fl_Callback*)cb_btn_apply_edit);
    } // Fl_Button* btn_apply_edit
    { txt_cll = new Fl_Input2(36, 312, 80, 22, _("CLL"));
      txt_cll->tooltip(_("Your callsign"));
      txt_cll->box(FL_DOWN_BOX);
      txt_cll->color(FL_BACKGROUND2_COLOR);
      txt_cll->selection_color(FL_SELECTION_COLOR);
      txt_cll->labeltype(FL_NORMAL_LABEL);
      txt_cll->labelfont(0);
      txt_cll->labelsize(14);
      txt_cll->labelcolor(FL_FOREGROUND_COLOR);
      txt_cll->callback((Fl_Callback*)cb_txt_cll);
      txt_cll->align(Fl_Align(FL_ALIGN_LEFT));
      txt_cll->when(FL_WHEN_RELEASE);
    } // Fl_Input2* txt_cll
    { txt_opr = new Fl_Input2(181, 312, 80, 22, _("OPR"));
      txt_opr->box(FL_DOWN_BOX);
      txt_opr->color(FL_BACKGROUND2_COLOR);
      txt_opr->selection_color(FL_SELECTION_COLOR);
      txt_opr->labeltype(FL_NORMAL_LABEL);
      txt_opr->labelfont(0);
      txt_opr->labelsize(14);
      txt_opr->labelcolor(FL_FOREGROUND_COLOR);
      txt_opr->callback((Fl_Callback*)cb_txt_opr);
      txt_opr->align(Fl_Align(FL_ALIGN_LEFT));
      txt_opr->when(FL_WHEN_RELEASE);
    } // Fl_Input2* txt_opr
    { txt_qth = new Fl_Input2(310, 312, 150, 22, _("QTH"));
      txt_qth->tooltip(_("Your QTH"));
      txt_qth->box(FL_DOWN_BOX);
      txt_qth->color(FL_BACKGROUND2_COLOR);
      txt_qth->selection_color(FL_SELECTION_COLOR);
      txt_qth->labeltype(FL_NORMAL_LABEL);
      txt_qth->labelfont(0);
      txt_qth->labelsize(14);
      txt_qth->labelcolor(FL_FOREGROUND_COLOR);
      txt_qth->callback((Fl_Callback*)cb_txt_qth);
      txt_qth->align(Fl_Align(FL_ALIGN_LEFT));
      txt_qth->when(FL_WHEN_RELEASE);
    } // Fl_Input2* txt_qth
    { txt_loc = new Fl_Input2(510, 312, 80, 22, _("LOC"));
      txt_loc->tooltip(_("Your locator"));
      txt_loc->box(FL_DOWN_BOX);
      txt_loc->color(FL_BACKGROUND2_COLOR);
      txt_loc->selection_color(FL_SELECTION_COLOR);
      txt_loc->labeltype(FL_NORMAL_LABEL);
      txt_loc->labelfont(0);
      txt_loc->labelsize(14);
      txt_loc->labelcolor(FL_FOREGROUND_COLOR);
      txt_loc->callback((Fl_Callback*)cb_txt_loc);
      txt_loc->align(Fl_Align(FL_ALIGN_LEFT));
      txt_loc->when(FL_WHEN_RELEASE);
    } // Fl_Input2* txt_loc
    { txt_serial_nbr = new Fl_Int_Input(56, 336, 60, 22, _("Next #"));
      txt_serial_nbr->tooltip(_("Next serial number to be sent"));
      txt_serial_nbr->type(2);
      txt_serial_nbr->callback((Fl_Callback*)cb_txt_serial_nbr);
    } // Fl_Int_Input* txt_serial_nbr
    { txt_time_span = new Fl_Int_Input(201, 336, 60, 22, _("Time Span"));
      txt_time_span->tooltip(_("Min\'s allowed between dups"));
      txt_time_span->type(2);
      txt_time_span->callback((Fl_Callback*)cb_txt_time_span);
    } // Fl_Int_Input* txt_time_span
    { Fl_Input* o = txt_xout = new Fl_Input(310, 336, 280, 22, _("Xout"));
      txt_xout->tooltip(_("Exchange out (not serial #)"));
      txt_xout->callback((Fl_Callback*)cb_txt_xout);
      o->value(xcvrState.xout.c_str());
    } // Fl_Input* txt_xout
    { Fl_Check_Button* o = btn_zeros = new Fl_Check_Button(56, 361, 87, 15, _("Zeros ?"));
      btn_zeros->tooltip(_("Send nbr as 0nn if < 100"));
      btn_zeros->down_box(FL_DOWN_BOX);
      btn_zeros->callback((Fl_Callback*)cb_btn_zeros);
      o->value(xcvrState.zeros);
    } // Fl_Check_Button* btn_zeros
    { Fl_Check_Button* o = btn_ck_band = new Fl_Check_Button(310, 361, 88, 15, _("Ck Band"));
      btn_ck_band->tooltip(_("Include band for dup check"));
      btn_ck_band->down_box(FL_DOWN_BOX);
      btn_ck_band->callback((Fl_Callback*)cb_btn_ck_band);
      o->value(xcvrState.band);
    } // Fl_Check_Button* btn_ck_band
    { Fl_Check_Button* o = btn_ck_time_span = new Fl_Check_Button(201, 361, 88, 15, _("Ck span"));
      btn_ck_time_span->tooltip(_("Include time span for dup check"));
      btn_ck_time_span->down_box(FL_DOWN_BOX);
      btn_ck_time_span->callback((Fl_Callback*)cb_btn_ck_time_span);
      o->value(xcvrState.time_span);
    } // Fl_Check_Button* btn_ck_time_span
    o->end();
  } // Fl_Double_Window* o
  return w;
}
